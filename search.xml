<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>css</title>
    <url>/post/0/</url>
    <content><![CDATA[<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="CSS规范"><a href="#CSS规范" class="headerlink" title="CSS规范"></a>CSS规范</h2><h3 id="1-CSS属性书写顺序"><a href="#1-CSS属性书写顺序" class="headerlink" title="1.CSS属性书写顺序"></a>1.CSS属性书写顺序</h3><p>建议遵循以下顺序：</p>
<ol>
<li><strong>布局定位属性</strong>：display / position / float / clear / visibility / overflow（建议 display 第一个写，毕竟关系到模式）</li>
<li><strong>自身属性</strong>：width / height / margin / padding / border / background</li>
<li><strong>文本属性</strong>：color / font / text-decoration / text-align / vertical-align / white- space / break-word</li>
<li><strong>其他属性（CSS3）</strong>：content / cursor / border-radius / box-shadow / text-shadow / background:linear-gradient …</li>
</ol>
<p><strong>举例：</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.css</span> &#123;</span><br><span class="line">   <span class="attribute">display</span>: block;</span><br><span class="line">   <span class="attribute">position</span>: relative;</span><br><span class="line">   <span class="attribute">float</span>: left;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">   <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">   <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">font-family</span>: Arial, <span class="string">&#x27;Helvetica Neue&#x27;</span>, Helvetica, sans-serif;</span><br><span class="line">   <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">   <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">5</span>);</span><br><span class="line">   <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="一-选择器"><a href="#一-选择器" class="headerlink" title="一.选择器"></a>一.选择器</h2><table>
<thead>
<tr>
<th>选择器</th>
<th>示例</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>.class</td>
<td>.intro</td>
<td>选择所有class=”intro”的元素</td>
</tr>
<tr>
<td>#*id</td>
<td>#firstname</td>
<td>选择所有id=”firstname”的元素</td>
</tr>
<tr>
<td>*</td>
<td>*</td>
<td>选择所有元素</td>
</tr>
<tr>
<td>element</td>
<td>p</td>
<td>选择所有<p>元素</td>
</tr>
<tr>
<td>element,element</td>
<td>div,p</td>
<td>选择所有<div>元素和<p>元素</td>
</tr>
<tr>
<td>element element</td>
<td>div p</td>
<td>选择<div>元素内的所有<p>元素</td>
</tr>
<tr>
<td>element&gt;element</td>
<td>div&gt;p</td>
<td>选择所有父级是 <div> 元素的 <p> 元素</td>
</tr>
<tr>
<td>element+element</td>
<td>div+p</td>
<td>选择所有紧接着<div>元素之后的<p>元素</td>
</tr>
<tr>
<td>[attribute]</td>
<td>[target]</td>
<td>选择所有带有target属性元素</td>
</tr>
<tr>
<td>[attribute=value]</td>
<td>[target=-blank]</td>
<td>选择所有使用target=”-blank”的元素</td>
</tr>
<tr>
<td>[attribute~=value]</td>
<td>[title~=flower]</td>
<td>选择标题属性包含单词”flower”的所有元素</td>
</tr>
<tr>
<td>[attribute|=language]</td>
<td>[lang|=en]</td>
<td>选择 lang 属性以 en 为开头的所有元素</td>
</tr>
<tr>
<td>:link</td>
<td>a:link</td>
<td>选择所有未访问链接</td>
</tr>
<tr>
<td>:visited</td>
<td>a:visited</td>
<td>选择所有访问过的链接</td>
</tr>
<tr>
<td>:active</td>
<td>a:active</td>
<td>选择活动链接</td>
</tr>
<tr>
<td>:hover</td>
<td>a:hover</td>
<td>选择鼠标在链接上面时</td>
</tr>
<tr>
<td>:focus</td>
<td>input:focus</td>
<td>选择具有焦点的输入元素</td>
</tr>
<tr>
<td>:first-letter</td>
<td>p:first-letter</td>
<td>选择每一个<p>元素的第一个字母</td>
</tr>
<tr>
<td>:first-line</td>
<td>p:first-line</td>
<td>选择每一个<p>元素的第一行</td>
</tr>
<tr>
<td>:first-child</td>
<td>p:first-child</td>
<td>指定只有当<p>元素是其父级的第一个子级的样式。</td>
</tr>
<tr>
<td>:before</td>
<td>p:before</td>
<td>在每个<p>元素之前插入内容</td>
</tr>
<tr>
<td>:after</td>
<td>p:after</td>
<td>在每个<p>元素之后插入内容</td>
</tr>
<tr>
<td>:lang(language)</td>
<td>p:lang(it)</td>
<td>选择一个lang属性的起始值=”it”的所有<p>元素</td>
</tr>
<tr>
<td>element1~element2</td>
<td>p~ul</td>
<td>选择p元素之后的每一个ul元素</td>
</tr>
<tr>
<td>[attribute^=value]</td>
<td>a[src^=”https”]</td>
<td>选择每一个src属性的值以”https”开头的元素</td>
</tr>
<tr>
<td>[attribute$=value]</td>
<td>a[src$=”.pdf”]</td>
<td>选择每一个src属性的值以”.pdf”结尾的元素</td>
</tr>
<tr>
<td>[attribute**=value*]</td>
<td>a[src*=”runoob”]</td>
<td>选择每一个src属性的值包含子字符串”runoob”的元素</td>
</tr>
<tr>
<td>:first-of-type</td>
<td>p:first-of-type</td>
<td>选择每个p元素是其父级的第一个p元素</td>
</tr>
<tr>
<td>:last-of-type</td>
<td>p:last-of-type</td>
<td>选择每个p元素是其父级的最后一个p元素</td>
</tr>
<tr>
<td>:only-of-type</td>
<td>p:only-of-type</td>
<td>选择每个p元素是其父级的唯一p元素</td>
</tr>
<tr>
<td>:only-child</td>
<td>p:only-child</td>
<td>选择每个p元素是其父级的唯一子元素</td>
</tr>
<tr>
<td>:nth-child(n)</td>
<td>p:nth-child(2)</td>
<td>选择每个p元素是其父级的第二个子元素</td>
</tr>
<tr>
<td>:nth-last-child(n)</td>
<td>p:nth-last-child(2)</td>
<td>选择每个p元素的是其父级的第二个子元素，从最后一个子项计数</td>
</tr>
<tr>
<td>:nth-of-type(n)</td>
<td>p:nth-of-type(2)</td>
<td>选择每个p元素是其父级的第二个p元素</td>
</tr>
<tr>
<td>:nth-last-of-type(n)</td>
<td>p:nth-last-of-type(2)</td>
<td>选择每个p元素的是其父级的第二个p元素，从最后一个子项计数</td>
</tr>
<tr>
<td>:last-child</td>
<td>p:last-child</td>
<td>选择每个p元素是其父级的最后一个子级。</td>
</tr>
<tr>
<td>:root</td>
<td>:root</td>
<td>选择文档的根元素</td>
</tr>
<tr>
<td>:empty</td>
<td>p:empty</td>
<td>选择每个没有任何子级的p元素（包括文本节点）</td>
</tr>
<tr>
<td>:target</td>
<td>#news:target</td>
<td>选择当前活动的#news元素（包含该锚名称的点击的URL）</td>
</tr>
<tr>
<td>:enabled</td>
<td>input:enabled</td>
<td>选择每一个已启用的输入元素</td>
</tr>
<tr>
<td>:disabled</td>
<td>input:disabled</td>
<td>选择每一个禁用的输入元素</td>
</tr>
<tr>
<td>:checked</td>
<td>input:checked</td>
<td>选择每个选中的输入元素</td>
</tr>
<tr>
<td>:not(selector)</td>
<td>:not(p)</td>
<td>选择每个并非p元素的元素</td>
</tr>
<tr>
<td>::selection</td>
<td>::selection</td>
<td>匹配元素中被用户选中或处于高亮状态的部分</td>
</tr>
<tr>
<td>:out-of-range</td>
<td>:out-of-range</td>
<td>匹配值在指定区间之外的input元素</td>
</tr>
<tr>
<td>:in-range</td>
<td>:in-range</td>
<td>匹配值在指定区间之内的input元素</td>
</tr>
<tr>
<td>:read-write</td>
<td>:read-write</td>
<td>用于匹配可读及可写的元素</td>
</tr>
<tr>
<td>:read-only</td>
<td>:read-only</td>
<td>用于匹配设置 “readonly”（只读） 属性的元素</td>
</tr>
<tr>
<td>:optional</td>
<td>:optional</td>
<td>用于匹配可选的输入元素</td>
</tr>
<tr>
<td>:required</td>
<td>:required</td>
<td>用于匹配设置了 “required” 属性的元素</td>
</tr>
<tr>
<td>:valid</td>
<td>:valid</td>
<td>用于匹配输入值为合法的元素</td>
</tr>
<tr>
<td>:invalid</td>
<td>:invalid</td>
<td>用于匹配输入值为非法的元素</td>
</tr>
</tbody></table>
<h2 id="三-css的显示模式"><a href="#三-css的显示模式" class="headerlink" title="三.css的显示模式"></a>三.css的显示模式</h2><h3 id="1-块元素"><a href="#1-块元素" class="headerlink" title="1.块元素"></a>1.块元素</h3><ul>
<li>比较霸道，自己独占一行。</li>
<li>高度，宽度、外边距以及内边距都可以控制。</li>
<li>宽度默认是容器（父级宽度）的100%。</li>
<li>是一个容器及盒子，里面可以放行内或者块级元素。</li>
</ul>
<h3 id="2-行内元素"><a href="#2-行内元素" class="headerlink" title="2.行内元素"></a>2.行内元素</h3><ul>
<li>相邻行内元素在一行上，一行可以显示多个。</li>
<li>高、宽直接设置是无效的。</li>
<li>默认宽度就是它本身内容的宽度。</li>
<li>行内元素只能容纳文本或其他行内元素。</li>
</ul>
<p><font color='red'>注意：</font><br>        链接里面不能再放链接<br>        特殊情况链接 <a> 里面可以放块级元素，但是给 <a> 转换一下块级模式最安全</p>
<h3 id="3-行内块元素"><a href="#3-行内块元素" class="headerlink" title="3.行内块元素"></a>3.行内块元素</h3><ul>
<li>和相邻行内元素（行内块）在一行上，但是他们之间会有空白缝隙。</li>
<li>一行可以显示多个（行内元素特点）。</li>
<li>默认宽度就是它本身内容的宽度（行内元素特点）。</li>
<li>高度，行高、外边距以及内边距都可以控制（块级元素特点）。</li>
</ul>
<h3 id="4、单行文字垂直居中的代码"><a href="#4、单行文字垂直居中的代码" class="headerlink" title="4、单行文字垂直居中的代码"></a>4、单行文字垂直居中的代码</h3><p><strong>解决方案</strong>:    </p>
<p>​        让文字的行高等于盒子的高度  就可以让文字在当前盒子内垂直居中</p>
<p><img data-src="../images/Css/1.png" alt="1"></p>
<p><img data-src="../images/Css/2.png" alt="2"></p>
<h2 id="四-css的背景"><a href="#四-css的背景" class="headerlink" title="四.css的背景"></a>四.css的背景</h2><p>通过 CSS 背景属性，可以给页面元素添加背景样式。<br>背景属性可以设置背景颜色、背景图片、背景平铺、背景图片位置、背景图像固定等。</p>
<h3 id="1、背景颜色"><a href="#1、背景颜色" class="headerlink" title="1、背景颜色"></a>1、背景颜色</h3><p><strong>样式名称</strong>：</p>
<p>​        background-color 定义元素的背景颜色</p>
<p><strong>使用方式</strong>：</p>
<p><img data-src="../images/Css/1570886137899.png" alt="1570886137899"></p>
<p><strong>其他说明</strong>：</p>
<p>​        元素背景颜色默认值是 transparent（透明）</p>
<p><img data-src="../images/Css/1570886176292.png" alt="1570886176292"></p>
<h3 id="2、背景图片"><a href="#2、背景图片" class="headerlink" title="2、背景图片"></a>2、背景图片</h3><p><strong>样式名称</strong>：</p>
<p>​        background-image  定义元素的背景图片</p>
<p><strong>使用方式</strong>：</p>
<p><img data-src="../images/Css/1570886322557.png" alt="1570886322557"></p>
<p><img data-src="../images/Css/1570886362813.png" alt="1570886362813"></p>
<p><strong>其他说明</strong>：</p>
<p>​        实际开发常见于 logo 或者一些装饰性的小图片或者是超大的背景图片, 优点是非常便于控制位置. (精灵图也是一种运用场景)</p>
<p>​        注意：背景图片后面的地址，千万不要忘记加 URL， 同时里面的路径<strong>不要加引号</strong>。</p>
<h3 id="3、背景平铺"><a href="#3、背景平铺" class="headerlink" title="3、背景平铺"></a>3、背景平铺</h3><p><strong>样式名称：</strong></p>
<p>​        background-repeat 设置元素背景图像的平铺 </p>
<p><strong>使用方式：</strong></p>
<p><img data-src="../images/Css/1570886648887.png" alt="1570886648887"></p>
<p><img data-src="../images/Css/1570886688306.png" alt="1570886688306"></p>
<h3 id="4、背景图片位置"><a href="#4、背景图片位置" class="headerlink" title="4、背景图片位置"></a>4、背景图片位置</h3><p><strong>样式名称：</strong></p>
<p>​        background-position 属性可以改变图片在背景中的位置</p>
<p><strong>使用方式：</strong></p>
<p>​        <img data-src="../images/Css/1570886973530.png" alt="1570886973530"></p>
<p>​        参数代表的意思是：x 坐标和 y 坐标。 可以使用 方位名词 或者 精确单位</p>
<p><img data-src="../images/Css/1570887034135.png" alt="1570887034135"></p>
<p><strong>其他说明：</strong></p>
<p>1、参数是方位名词</p>
<p>​        如果指定的两个值都是方位名词，则两个值前后顺序无关，比如 left  top 和 top  left 效果一致</p>
<p>​        如果只指定了一个方位名词，另一个值省略，则第二个值默认居中对齐</p>
<p>2、参数是精确单位</p>
<p>​        如果参数值是精确坐标，那么第一个肯定是 x 坐标，第二个一定是 y 坐标</p>
<p>​        如果只指定一个数值，那该数值一定是 x 坐标，另一个默认垂直居中</p>
<p>3、参数是混合单位</p>
<p>​        如果指定的两个值是精确单位和方位名词混合使用，则第一个值是 x 坐标，第二个值是 y 坐标</p>
<h3 id="5、背景图片固定"><a href="#5、背景图片固定" class="headerlink" title="5、背景图片固定"></a>5、背景图片固定</h3><p><strong>样式名称：</strong></p>
<p>​        background-attachment 属性设置背景图像是否固定或者随着页面的其余部分滚动。</p>
<p><strong>使用方式：</strong></p>
<p>​        <img data-src="../images/Css/1570887652404.png" alt="1570887652404"></p>
<p><img data-src="../images/Css/1570887699177.png" alt="1570887699177"></p>
<p><strong>其他说明：</strong></p>
<p>​        background-attachment 后期可以制作视差滚动的效果。</p>
<h3 id="6、背景样式合写"><a href="#6、背景样式合写" class="headerlink" title="6、背景样式合写"></a>6、背景样式合写</h3><p><strong>背景合写样式：</strong></p>
<p>​        background: 背景颜色 背景图片地址 背景平铺 背景图像滚动 背景图片位置;</p>
<p><strong>使用方式：</strong></p>
<p><img data-src="../images/Css/1570887809455.png" alt="1570887809455"></p>
<h3 id="7、背景色半透明"><a href="#7、背景色半透明" class="headerlink" title="7、背景色半透明"></a>7、背景色半透明</h3><p>CSS3 提供了背景颜色半透明的效果。 </p>
<p><strong>使用方式：</strong></p>
<p><img data-src="../images/Css/1570887978061.png" alt="1570887978061"></p>
<ul>
<li>最后一个参数是 alpha 透明度，取值范围在 0~1之间</li>
<li>我们习惯把 0.3 的 0 省略掉，写为 background: rgba(0, 0, 0, .3);</li>
</ul>
<p><strong>注意</strong>：</p>
<ul>
<li>背景半透明是指盒子背景半透明，盒子里面的内容不受影响</li>
<li>CSS3 新增属性，是 IE9+ 版本浏览器才支持的，但是现在实际开发,我们不太关注兼容性写法了,可以放心使用</li>
</ul>
<h3 id="8、背景总结"><a href="#8、背景总结" class="headerlink" title="8、背景总结"></a>8、背景总结</h3><p><img data-src="../images/Css/3.png" alt="3"></p>
<h3 id="9-背景渐变色"><a href="#9-背景渐变色" class="headerlink" title="9.背景渐变色"></a>9.背景渐变色</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 背景渐变必须添加浏览器私有前缀 */</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(起始方向, 颜色<span class="number">1</span>,颜色<span class="number">2</span>);</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(left, red, blue);</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(left top, red, blue);</span><br></pre></td></tr></table></figure>

<p>背景渐变必须添加浏览器私有前缀</p>
<p>起始方向可以是：方位名词或者度数，如果省略就是top</p>
<h2 id="五-CSS三大特性"><a href="#五-CSS三大特性" class="headerlink" title="五.CSS三大特性"></a>五.CSS三大特性</h2><h3 id="1、层叠性"><a href="#1、层叠性" class="headerlink" title="1、层叠性"></a>1、层叠性</h3><p>​        相同选择器给设置相同的样式，此时一个样式就会覆盖（层叠）另一个冲突的样式。层叠性主要解决样式冲突的问题</p>
<p>​        层叠性原则:</p>
<ul>
<li>样式冲突，遵循的原则是就近原则，哪个样式离结构近，就执行哪个样式</li>
<li>样式不冲突，不会层叠</li>
</ul>
<h3 id="2、继承性"><a href="#2、继承性" class="headerlink" title="2、继承性"></a>2、继承性</h3><p>​        CSS中的继承: 子标签会继承父标签的某些样式，如文本颜色和字号。</p>
<p>​        子元素可以继承父元素的样式：</p>
<p>​    （text-，font-，line-这些元素开头的可以继承，以及color属性）</p>
<p>行高的继承性：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>:<span class="number">12px</span>/<span class="number">1.5</span> Microsoft YaHei；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>行高可以跟单位也可以不跟单位</li>
<li>如果子元素没有设置行高，则会继承父元素的行高为 1.5</li>
<li>此时子元素的行高是：当前子元素的文字大小 * 1.5</li>
<li>body 行高 1.5  这样写法最大的优势就是里面子元素可以根据自己文字大小自动调整行高</li>
</ul>
<h3 id="3、优先级"><a href="#3、优先级" class="headerlink" title="3、优先级"></a>3、优先级</h3><p>当同一个元素指定多个选择器，就会有优先级的产生。</p>
<ul>
<li>选择器相同，则执行层叠性</li>
<li>选择器不同，则根据选择器权重执行</li>
</ul>
<p>选择器优先级计算表格：</p>
<p><img data-src="../images/Css/1571490129794.png" alt="1571490129794"></p>
<p>优先级注意点:</p>
<ol>
<li><p>权重是有4组数字组成,但是不会有进位。</p>
</li>
<li><p>可以理解为类选择器永远大于元素选择器, id选择器永远大于类选择器,以此类推..</p>
</li>
<li><p>等级判断从左向右，如果某一位数值相同，则判断下一位数值。</p>
</li>
<li><p>可以简单记忆法:  通配符和继承权重为0, 标签选择器为1,类(伪类)选择器为 10, id选择器 100, 行内样式表为 1000, !important 无穷大.</p>
</li>
<li><p>继承的权重是0， 如果该元素没有直接选中，不管父元素权重多高，子元素得到的权重都是 0。</p>
</li>
</ol>
<p>权重叠加：如果是复合选择器，则会有权重叠加，需要计算权重。</p>
<ul>
<li>div ul  li   ——&gt;      0,0,0,3</li>
<li>.nav ul li   ——&gt;      0,0,1,2</li>
<li>a:hover      —–&gt;   0,0,1,1</li>
<li>.nav a       ——&gt;      0,0,1,1</li>
</ul>
<h2 id="六-盒子模型"><a href="#六-盒子模型" class="headerlink" title="六.盒子模型"></a>六.盒子模型</h2><h3 id="1、网页布局的本质"><a href="#1、网页布局的本质" class="headerlink" title="1、网页布局的本质"></a>1、网页布局的本质</h3><p>网页布局的核心本质： 就是利用 CSS 摆盒子。</p>
<p>网页布局过程：</p>
<ol>
<li>先准备好相关的网页元素，网页元素基本都是盒子 Box 。</li>
<li>利用 CSS 设置好盒子样式，然后摆放到相应位置。</li>
<li>往盒子里面装内容</li>
</ol>
<h3 id="2、盒子模型（Box-Model）组成"><a href="#2、盒子模型（Box-Model）组成" class="headerlink" title="2、盒子模型（Box Model）组成"></a>2、盒子模型（Box Model）组成</h3><p>盒子模型：把 HTML 页面中的布局元素看作是一个矩形的盒子，也就是一个盛装内容的容器。</p>
<p>CSS 盒子模型本质上是一个盒子，封装周围的 HTML 元素，它包括：<strong>边框</strong>、<strong>外边距</strong>、<strong>内边距</strong>、和 <strong>实际内容</strong></p>
<p><img data-src="../images/Css/1571492536942.png" alt="1571492536942"></p>
<h3 id="3、边框（border）"><a href="#3、边框（border）" class="headerlink" title="3、边框（border）"></a>3、边框（border）</h3><h4 id="3-1、边框的使用"><a href="#3-1、边框的使用" class="headerlink" title="3.1、边框的使用"></a>3.1、边框的使用</h4><p>1、border可以设置元素的边框。边框有三部分组成：边框宽度(粗细) 边框样式  边框颜色；</p>
<p>2、语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border</span> : border-width || border-style || border-color;   </span><br></pre></td></tr></table></figure>

<p><img data-src="../images/Css/1571492659260.png" alt="1571492659260"></p>
<p>边框样式 border-style 可以设置如下值：</p>
<ul>
<li>none：没有边框即忽略所有边框的宽度（默认值）</li>
<li>solid：边框为单实线(最为常用的)</li>
<li>dashed：边框为虚线  </li>
<li>dotted：边框为点线</li>
</ul>
<p>3、边框的合写分写</p>
<p>边框简写：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid red;  </span><br></pre></td></tr></table></figure>

<p>边框分开写法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-top</span>: <span class="number">1px</span> solid red;  <span class="comment">/* 只设定上边框， 其余同理 */</span>   </span><br></pre></td></tr></table></figure>

<h4 id="3-2、表格的细线边框"><a href="#3-2、表格的细线边框" class="headerlink" title="3.2、表格的细线边框"></a>3.2、表格的细线边框</h4><p>1、border-collapse 属性控制浏览器绘制表格边框的方式。它控制相邻单元格的边框。</p>
<p>2、语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-collapse</span>:collapse; </span><br></pre></td></tr></table></figure>

<p>collapse 单词是合并的意思</p>
<p>border-collapse: collapse; 表示相邻边框合并在一起</p>
<h4 id="3-3、边框会影响盒子实际大小"><a href="#3-3、边框会影响盒子实际大小" class="headerlink" title="3.3、边框会影响盒子实际大小"></a>3.3、边框会影响盒子实际大小</h4><p>边框会额外增加盒子的实际大小。因此我们有两种方案解决：</p>
<ul>
<li>测量盒子大小的时候,不量边框。</li>
<li>如果测量的时候包含了边框,则需要 width/height 减去边框宽度</li>
</ul>
<h3 id="4、内边距（padding）"><a href="#4、内边距（padding）" class="headerlink" title="4、内边距（padding）"></a>4、内边距（padding）</h3><h4 id="4-1、内边距的使用方式"><a href="#4-1、内边距的使用方式" class="headerlink" title="4.1、内边距的使用方式"></a>4.1、内边距的使用方式</h4><p>1、padding 属性用于设置内边距，即边框与内容之间的距离。</p>
<p>2、语法：</p>
<p>合写属性：</p>
<p><img data-src="../images/Css/1571493298248.png" alt="1571493298248"></p>
<p>分写属性：</p>
<h4 id="4-2、内边距会影响盒子实际大小"><a href="#4-2、内边距会影响盒子实际大小" class="headerlink" title="4.2、内边距会影响盒子实际大小"></a>4.2、内边距会影响盒子实际大小</h4><p>1、当我们给盒子指定 padding 值之后，发生了 2 件事情：</p>
<ol>
<li>内容和边框有了距离，添加了内边距。</li>
<li>padding影响了盒子实际大小。</li>
</ol>
<p>2、内边距对盒子大小的影响：</p>
<ul>
<li>如果盒子已经有了宽度和高度，此时再指定内边框，会撑大盒子。</li>
<li>如何盒子本身没有指定width/height属性, 则此时padding不会撑开盒子大小。</li>
</ul>
<p>3、解决方案：</p>
<p>​        如果保证盒子跟效果图大小保持一致，则让 width/height 减去多出来的内边距大小即可。</p>
<h3 id="5、外边距（margin）"><a href="#5、外边距（margin）" class="headerlink" title="5、外边距（margin）"></a>5、外边距（margin）</h3><h4 id="5-1、外边距的使用方式"><a href="#5-1、外边距的使用方式" class="headerlink" title="5.1、外边距的使用方式"></a>5.1、外边距的使用方式</h4><p>margin 属性用于设置外边距，即控制盒子和盒子之间的距离。</p>
<p><img data-src="../images/Css/1571493260536.png" alt="1571493260536"></p>
<h4 id="5-2、外边距典型应用"><a href="#5-2、外边距典型应用" class="headerlink" title="5.2、外边距典型应用"></a>5.2、外边距典型应用</h4><p>外边距可以让块级盒子水平居中的两个条件：</p>
<ul>
<li>盒子必须指定了宽度（width）。</li>
<li>盒子左右的外边距都设置为 auto 。</li>
</ul>
<p>常见的写法，以下三种都可以：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">margin-left</span>: auto;   <span class="attribute">margin-right</span>: auto;</span><br><span class="line"><span class="attribute">margin</span>: auto;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br></pre></td></tr></table></figure>

<p><font color='red'>注意：</font>以上方法是让块级元素水平居中，行内元素或者行内块元素水平居中给其父元素添加 text-align:center 即可。</p>
<h4 id="5-3、外边距合并"><a href="#5-3、外边距合并" class="headerlink" title="5.3、外边距合并"></a>5.3、外边距合并</h4><p>使用 margin 定义块元素的垂直外边距时，可能会出现外边距的合并。</p>
<p>主要有两种情况:</p>
<p>1、相邻块元素垂直外边距的合并</p>
<p>​        当上下相邻的两个块元素（兄弟关系）相遇时，如果上面的元素有下外边距 margin-bottom，下面的元素有上外边距 margin-top ，则他们之间的垂直间距不是 margin-bottom 与 margin-top 之和。取两个值中的较大者这种现象被称为相邻块元素垂直外边距的合并。</p>
<p><img data-src="../images/Css/1571494239103.png" alt="1571494239103"></p>
<p>解决方案：<br>        尽量只给一个盒子添加 margin 值。</p>
<p>2、嵌套块元素垂直外边距的塌陷</p>
<p>​        对于两个嵌套关系（父子关系）的块元素，父元素有上外边距同时子元素也有上外边距，此时父元素会塌陷较大的外边距值。</p>
<p><img data-src="../images/Css/1571494373778.png" alt="1571494373778"></p>
<p>解决方案：</p>
<ul>
<li>可以为父元素定义上边框。</li>
<li>可以为父元素定义上内边距。</li>
<li>可以为父元素添加 overflow:hidden。</li>
</ul>
<h4 id="5-4、清除内外边距"><a href="#5-4、清除内外边距" class="headerlink" title="5.4、清除内外边距"></a>5.4、清除内外边距</h4><p>​        网页元素很多都带有默认的内外边距，而且不同浏览器默认的也不一致。因此我们在布局前，首先要清除下网页元素的内外边距。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">   <span class="attribute">padding</span>:<span class="number">0</span>;   <span class="comment">/* 清除内边距 */</span></span><br><span class="line">   <span class="attribute">margin</span>:<span class="number">0</span>;    <span class="comment">/* 清除外边距 */</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>​        注意：行内元素为了照顾兼容性，尽量只设置左右内外边距，不要设置上下内外边距。但是转换为块级和行内块元素就可以了</p>
<h2 id="七-其它样式"><a href="#七-其它样式" class="headerlink" title="七.其它样式"></a>七.其它样式</h2><h3 id="1、圆角边框"><a href="#1、圆角边框" class="headerlink" title="1、圆角边框"></a>1、圆角边框</h3><p>在 CSS3 中，新增了圆角边框样式，这样我们的盒子就可以变圆角了。</p>
<p>border-radius 属性用于设置元素的外边框圆角。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>:length;    </span><br></pre></td></tr></table></figure>

<ul>
<li>参数值可以为数值或百分比的形式</li>
<li>如果是正方形，想要设置为一个圆，把数值修改为高度或者宽度的一半即可，或者直接写为 50%</li>
<li>该属性是一个简写属性，可以跟四个值，分别代表左上角、右上角、右下角、左下角</li>
<li>分开写：border-top-left-radius、border-top-right-radius、border-bottom-right-radius 和border-bottom-left-radius</li>
<li>兼容性 ie9+ 浏览器支持, 但是不会影响页面布局,可以放心使用</li>
</ul>
<h3 id="2、盒子阴影"><a href="#2、盒子阴影" class="headerlink" title="2、盒子阴影"></a>2、盒子阴影</h3><p>CSS3 中新增了盒子阴影，我们可以使用 box-shadow 属性为盒子添加阴影。<br>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: h-shadow v-shadow blur spread color inset; </span><br></pre></td></tr></table></figure>

<p><img data-src="../images/Css/1571541874805.png" alt="1571541874805"></p>
<h3 id="3、文字阴影"><a href="#3、文字阴影" class="headerlink" title="3、文字阴影"></a>3、文字阴影</h3><p>在 CSS3 中，我们可以使用 text-shadow 属性将阴影应用于文本。<br>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-shadow</span>: h-shadow v-shadow blur color;</span><br></pre></td></tr></table></figure>

<p><img data-src="../images/Css/1571541954222.png" alt="1571541954222"></p>
<h2 id="八-浮动"><a href="#八-浮动" class="headerlink" title="八.浮动"></a>八.浮动</h2><h3 id="1、传统网页布局的三种方式"><a href="#1、传统网页布局的三种方式" class="headerlink" title="1、传统网页布局的三种方式"></a>1、传统网页布局的三种方式</h3><p>​    CSS 提供了三种传统布局方式(简单说,就是盒子如何进行排列顺序)：</p>
<ul>
<li><p>普通流（标准流）</p>
</li>
<li><p>浮动</p>
</li>
<li><p>定位</p>
<p>这三种布局方式都是用来摆放盒子的，盒子摆放到合适位置，布局自然就完成了。</p>
</li>
</ul>
<p>注意：实际开发中，一个页面基本都包含了这三种布局方式（后面移动端学习新的布局方式） 。</p>
<h3 id="2、标准流（普通流-文档流）"><a href="#2、标准流（普通流-文档流）" class="headerlink" title="2、标准流（普通流/文档流）"></a>2、标准流（普通流/文档流）</h3><p>所谓的标准流:  就是标签按照规定好默认方式排列</p>
<ol>
<li>块级元素会独占一行，从上向下顺序排列。常用元素：div、hr、p、h1~h6、ul、ol、dl、form、table</li>
<li>行内元素会按照顺序，从左到右顺序排列，碰到父元素边缘则自动换行。常用元素：span、a、i、em 等 </li>
</ol>
<p>以上都是标准流布局，我们前面学习的就是标准流，标准流是最基本的布局方式。</p>
<h3 id="3、为什么需要浮动？"><a href="#3、为什么需要浮动？" class="headerlink" title="3、为什么需要浮动？"></a>3、为什么需要浮动？</h3><p>​        总结： 有很多的布局效果，标准流没有办法完成，此时就可以利用浮动完成布局。 因为浮动可以改变元素标签默认的排列方式.</p>
<p>​        浮动最典型的应用：可以让多个块级元素一行内排列显示。</p>
<p>​        网页布局第一准则：<strong>多个块级元素纵向排列找标准流，多个块级元素横向排列找浮动</strong>。</p>
<h3 id="4、什么是浮动？"><a href="#4、什么是浮动？" class="headerlink" title="4、什么是浮动？"></a>4、什么是浮动？</h3><p>​        float 属性用于创建浮动框，将其移动到一边，直到左边缘或右边缘触及包含块或另一个浮动框的边缘。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">选择器 &#123; <span class="attribute">float</span>: 属性值; &#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="../images/Css/1571543209934.png" alt="1571543209934"></p>
<h3 id="5、浮动特性"><a href="#5、浮动特性" class="headerlink" title="5、浮动特性"></a>5、浮动特性</h3><p>加了浮动之后的元素,会具有很多特性,需要我们掌握的.</p>
<p>1、浮动元素会脱离标准流(脱标：浮动的盒子不再保留原先的位置)</p>
<p><img data-src="../images/Css/1571544664994.png" alt="1571544664994"></p>
<p>2、浮动的元素会一行内显示并且元素顶部对齐</p>
<p><font color='red'>注意：</font> </p>
<p>​        浮动的元素是互相贴靠在一起的（不会有缝隙），如果父级宽度装不下这些浮动的盒子，多出的盒子会另起一行对齐。</p>
<p>3、浮动的元素会具有行内块元素的特性</p>
<p>​        浮动元素的大小根据内容来决定</p>
<p>​        浮动的盒子中间是没有缝隙的</p>
<h3 id="6、浮动元素经常和标准流父级搭配使用"><a href="#6、浮动元素经常和标准流父级搭配使用" class="headerlink" title="6、浮动元素经常和标准流父级搭配使用"></a>6、浮动元素经常和标准流父级搭配使用</h3><p>为了约束浮动元素位置, 我们网页布局一般采取的策略是:</p>
<p>​        先用标准流父元素排列上下位置, 之后内部子元素采取浮动排列左右位置.  符合网页布局第一准侧</p>
<p><img data-src="../images/Css/1571544991989.png" alt="1571544991989"></p>
<h3 id="7、浮动布局注意点"><a href="#7、浮动布局注意点" class="headerlink" title="7、浮动布局注意点"></a>7、浮动布局注意点</h3><p>1、浮动和标准流的父盒子搭配。</p>
<p>先用标准流的父元素排列上下位置, 之后内部子元素采取浮动排列左右位置</p>
<p>2、一个元素浮动了，理论上其余的兄弟元素也要浮动。</p>
<p>一个盒子里面有多个子盒子，如果其中一个盒子浮动了，其他兄弟也应该浮动，以防止引起问题。</p>
<p>浮动的盒子只会影响浮动盒子后面的标准流,不会影响前面的标准流</p>
<h2 id="九-清除浮动"><a href="#九-清除浮动" class="headerlink" title="九.清除浮动"></a>九.清除浮动</h2><h3 id="1、为什么需要清除浮动？"><a href="#1、为什么需要清除浮动？" class="headerlink" title="1、为什么需要清除浮动？"></a>1、为什么需要清除浮动？</h3><p>​        由于父级盒子很多情况下，不方便给高度，但是子盒子浮动又不占有位置，最后父级盒子高度为 0 时，就会影响下面的标准流盒子。</p>
<p><img data-src="../images/Css/1571555883628.png" alt="1571555883628"></p>
<h3 id="2、清除浮动本质"><a href="#2、清除浮动本质" class="headerlink" title="2、清除浮动本质"></a>2、清除浮动本质</h3><p>清除浮动的本质是清除浮动元素造成的影响：浮动的子标签无法撑开父盒子的高度</p>
<p>注意：</p>
<ul>
<li>如果父盒子本身有高度，则不需要清除浮动</li>
<li>清除浮动之后，父级就会根据浮动的子盒子自动检测高度。</li>
<li>父级有了高度，就不会影响下面的标准流了</li>
</ul>
<h3 id="3、清除浮动样式"><a href="#3、清除浮动样式" class="headerlink" title="3、清除浮动样式"></a>3、清除浮动样式</h3><p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">选择器&#123;<span class="attribute">clear</span>:属性值;&#125; </span><br></pre></td></tr></table></figure>

<p><img data-src="../images/Css/1571555980419.png" alt="1571555980419"></p>
<p>我们实际工作中， 几乎只用 clear: both;</p>
<p>清除浮动的策略是:  闭合浮动. </p>
<h3 id="4、清除浮动的多种方式"><a href="#4、清除浮动的多种方式" class="headerlink" title="4、清除浮动的多种方式"></a>4、清除浮动的多种方式</h3><h4 id="4-1、额外标签法"><a href="#4-1、额外标签法" class="headerlink" title="4.1、额外标签法"></a>4.1、额外标签法</h4><p>额外标签法也称为隔墙法，是 W3C 推荐的做法。</p>
<p>使用方式：</p>
<p>​        额外标签法会在浮动元素末尾添加一个空的标签。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">例如 <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;clear:both&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>，或者其他标签（如<span class="tag">&lt;<span class="name">br</span> /&gt;</span>等）。</span><br></pre></td></tr></table></figure>

<p>​        优点： 通俗易懂，书写方便</p>
<p>​        缺点： 添加许多无意义的标签，结构化较差</p>
<p>​        注意： 要求这个新的空标签必须是块级元素。</p>
<p>总结:</p>
<p>​    1、清除浮动本质是?</p>
<p>​            清除浮动的本质是清除浮动元素脱离标准流造成的影响</p>
<p>​    2、清除浮动策略是?</p>
<p>​            闭合浮动.  只让浮动在父盒子内部影响,不影响父盒子外面的其他盒子.</p>
<p>​    3、额外标签法?</p>
<p>​            隔墙法, 就是在最后一个浮动的子元素后面添</p>
<p>​    4、加一个额外标签, 添加 清除浮动样式.</p>
<p>​            实际工作可能会遇到,但是不常用</p>
<h4 id="4-2、父级添加-overflow-属性"><a href="#4-2、父级添加-overflow-属性" class="headerlink" title="4.2、父级添加 overflow 属性"></a>4.2、父级添加 overflow 属性</h4><p>可以给父级添加 overflow 属性，将其属性值设置为 hidden、 auto 或 scroll 。</p>
<p>例如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">overflow</span>:hidden | auto | scroll;</span><br></pre></td></tr></table></figure>

<p>优点：代码简洁</p>
<p>缺点：无法显示溢出的部分</p>
<p>注意：是给父元素添加代码</p>
<h4 id="4-3、父级添加after伪元素"><a href="#4-3、父级添加after伪元素" class="headerlink" title="4.3、父级添加after伪元素"></a>4.3、父级添加after伪元素</h4><p>:after 方式是额外标签法的升级版。给父元素添加：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span>:after &#123;  </span><br><span class="line">  content: <span class="string">&quot;&quot;</span>; </span><br><span class="line">  <span class="attribute">display</span>: block; </span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>; </span><br><span class="line">  <span class="attribute">clear</span>: both; </span><br><span class="line">  <span class="attribute">visibility</span>: hidden;  </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;  <span class="comment">/* IE6、7 专有 */</span> </span><br><span class="line">  *zoom: <span class="number">1</span>;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>

<p>优点：没有增加标签，结构更简单</p>
<p>缺点：照顾低版本浏览器</p>
<p>代表网站： 百度、淘宝网、网易等</p>
<h4 id="4-4、父级添加双伪元素"><a href="#4-4、父级添加双伪元素" class="headerlink" title="4.4、父级添加双伪元素"></a>4.4、父级添加双伪元素</h4><p>给父元素添加</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span>:before,.clearfix:after &#123;</span><br><span class="line">  content:<span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">display</span>:table; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span>:after &#123;</span><br><span class="line">  clear:both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">   *zoom:<span class="number">1</span>;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>

<p>优点：代码更简洁</p>
<p>缺点：照顾低版本浏览器</p>
<p>代表网站：小米、腾讯等</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>为什么需要清除浮动？</p>
<ol>
<li>父级没高度。</li>
<li>子盒子浮动了。</li>
<li>影响下面布局了，我们就应该清除浮动了。</li>
</ol>
<p><img data-src="../images/Css/1571556500074.png" alt="1571556500074"></p>
<h2 id="十-定位"><a href="#十-定位" class="headerlink" title="十.定位"></a>十.定位</h2><h3 id="1-1-为什么使用定位"><a href="#1-1-为什么使用定位" class="headerlink" title="1.1 为什么使用定位"></a>1.1 为什么使用定位</h3><blockquote>
<p>我们先来看一个效果，同时思考一下<strong>用标准流或浮动能否实现类似的效果</strong>？</p>
</blockquote>
<p><strong>场景1</strong>： 某个元素可以自由的在一个盒子内移动位置，并且压住其他盒子.</p>
<img data-src="images/01_定位示例1.gif" />



<p><strong>场景2</strong>：当我们滚动窗口的时候，盒子是固定屏幕某个位置的。</p>
<img data-src="images/ding.png" />



<blockquote>
<p>结论<strong>：要实现以上效果，</strong>标准流 或 浮动都无法快速实现</p>
</blockquote>
<p>所以：</p>
<p>1.浮动可以让多个块级盒子一行没有缝隙排列显示， 经常用于横向排列盒子。</p>
<p>2.定位则是可以让盒子自由的在某个盒子内移动位置或者固定屏幕中某个位置，并且可以压住其他盒子。</p>
<h3 id="1-2-定位组成"><a href="#1-2-定位组成" class="headerlink" title="1.2 定位组成"></a>1.2 定位组成</h3><p><strong>定位</strong>：将盒子<strong>定</strong>在某一个位置，所以<strong>定位也是在摆放盒子， 按照定位的方式移动盒子</strong></p>
<p>定位也是用来布局的，它有两部分组成：</p>
<blockquote>
<p><strong>定位 = 定位模式 + 边偏移</strong>  </p>
</blockquote>
<p><strong>定位模式</strong> 用于指定一个元素在文档中的定位方式。<strong>边偏移</strong>则决定了该元素的最终位置。</p>
<h4 id="1-2-1-边偏移（方位名词）"><a href="#1-2-1-边偏移（方位名词）" class="headerlink" title="1.2.1 边偏移（方位名词）"></a>1.2.1 边偏移（方位名词）</h4><p><strong>边偏移</strong> 就是定位的盒子移动到最终位置。有 top、bottom、left 和 right  4 个属性。</p>
<table>
<thead>
<tr>
<th>边偏移属性</th>
<th align="left">示例</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>top</code></td>
<td align="left"><code>top: 80px</code></td>
<td><strong>顶端</strong>偏移量，定义元素相对于其父元素<strong>上边线的距离</strong>。</td>
</tr>
<tr>
<td><code>bottom</code></td>
<td align="left"><code>bottom: 80px</code></td>
<td><strong>底部</strong>偏移量，定义元素相对于其父元素<strong>下边线的距离</strong>。</td>
</tr>
<tr>
<td><code>left</code></td>
<td align="left"><code>left: 80px</code></td>
<td><strong>左侧</strong>偏移量，定义元素相对于其父元素<strong>左边线的距离</strong>。</td>
</tr>
<tr>
<td><code>right</code></td>
<td align="left"><code>right: 80px</code></td>
<td><strong>右侧</strong>偏移量，定义元素相对于其父元素<strong>右边线的距离</strong></td>
</tr>
</tbody></table>
<p>定位的盒子有了边偏移才有价值。 一般情况下，凡是有定位地方必定有边偏移。</p>
<h4 id="1-2-2-定位模式-position"><a href="#1-2-2-定位模式-position" class="headerlink" title="1.2.2 定位模式 (position)"></a>1.2.2 定位模式 (position)</h4><p>在 CSS 中，通过 <code>position</code> 属性定义元素的<strong>定位模式</strong>，语法如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">选择器 &#123; </span><br><span class="line">    <span class="attribute">position</span>: 属性值; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定位模式是有不同分类的，在不同情况下，我们用到不同的定位模式。</p>
<p>定位模式决定元素的定位方式 ，它通过 CSS 的 position 属性来设置，其值可以分为四个：</p>
<table>
<thead>
<tr>
<th>值</th>
<th align="center">语义</th>
</tr>
</thead>
<tbody><tr>
<td><code>static</code></td>
<td align="center"><strong>静态</strong>定位</td>
</tr>
<tr>
<td><code>relative</code></td>
<td align="center"><strong>相对</strong>定位</td>
</tr>
<tr>
<td><code>absolute</code></td>
<td align="center"><strong>绝对</strong>定位</td>
</tr>
<tr>
<td><code>fixed</code></td>
<td align="center"><strong>固定</strong>定位</td>
</tr>
</tbody></table>
 <img data-src='./images/26定位的概念.png'>

<h3 id="1-3-定位模式介绍"><a href="#1-3-定位模式介绍" class="headerlink" title="1.3 定位模式介绍"></a>1.3 定位模式介绍</h3><h4 id="1-3-1-静态定位-static-了解"><a href="#1-3-1-静态定位-static-了解" class="headerlink" title="1.3.1.  静态定位(static) - 了解"></a>1.3.1.  静态定位(static) - 了解</h4><ul>
<li><p><strong>静态定位</strong>是元素的<strong>默认</strong>定位方式，<strong>无定位的意思</strong>。它相当于 border 里面的none，静态定位static，不要定位的时候用。</p>
</li>
<li><p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">选择器 &#123; </span><br><span class="line">    position: static; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>静态定位 按照标准流特性摆放位置，它没有边偏移。</p>
</li>
<li><p>静态定位在布局时我们几乎不用的 </p>
</li>
</ul>
<h4 id="1-3-2-相对定位-relative-重要"><a href="#1-3-2-相对定位-relative-重要" class="headerlink" title="1.3.2. 相对定位(relative) - 重要"></a>1.3.2. 相对定位(relative) - 重要</h4><ul>
<li><strong>相对定位</strong>是元素在移动位置的时候，是相对于它自己<strong>原来的位置</strong>来说的（自恋型）。</li>
<li>语法：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">选择器 &#123; </span><br><span class="line">	position: relative; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>相对定位的特点：（务必记住）</p>
<ul>
<li><p>1.它是相对于自己原来的位置来移动的（移动位置的时候参照点是自己原来的位置）。</p>
</li>
<li><p>2.<strong>原来</strong>在标准流的<strong>位置</strong>继续占有，后面的盒子仍然以标准流的方式对待它。</p>
<p>因此，<strong>相对定位并没有脱标</strong>。它最典型的应用是给绝对定位当爹的。。。</p>
</li>
</ul>
</li>
<li><p>效果图：</p>
</li>
</ul>
<p><img data-src="./images/04_%E7%9B%B8%E5%AF%B9%E5%AE%9A%E4%BD%8D%E6%A1%88%E4%BE%8B.png" alt="相对定位案例"></p>
<h4 id="1-3-3-绝对定位-absolute-重要"><a href="#1-3-3-绝对定位-absolute-重要" class="headerlink" title="1.3.3. 绝对定位(absolute) - 重要"></a>1.3.3. 绝对定位(absolute) - 重要</h4><h5 id="1-3-3-1-绝对定位的介绍"><a href="#1-3-3-1-绝对定位的介绍" class="headerlink" title="1.3.3.1 绝对定位的介绍"></a>1.3.3.1 绝对定位的介绍</h5><ul>
<li><p><strong>绝对定位</strong>是元素在移动位置的时候，是相对于它<strong>祖先元素</strong>来说的（拼爹型）。</p>
</li>
<li><p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">选择器 &#123; </span><br><span class="line">	<span class="attribute">position</span>: absolute; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ol>
<li><p><strong>完全脱标</strong> —— 完全不占位置；  </p>
</li>
<li><p><strong>父元素没有定位</strong>，则以<strong>浏览器</strong>为准定位（Document 文档）。</p>
<img data-src="./images/05_绝对定位_父级无定位.png" width="600" /></li>
<li><p><strong>父元素要有定位</strong></p>
<ul>
<li>元素将依据最近的已经定位（绝对、固定或相对定位）的父元素（祖先）进行定位。</li>
</ul>
</li>
</ol>
<img data-src="./images/06_绝对定位_父级有定位.png" width="600" />





<ul>
<li><p><strong>绝对定位的特点总结</strong>：（务必记住）</p>
<p>1.如果<strong>没有祖先元素</strong>或者<strong>祖先元素没有定位</strong>，则以浏览器为基准定位（Document 文档）。</p>
<p>2.如果祖先元素有定位（相对、绝对、固定定位），则以最近一级的有定位祖先元素为参考点移动位置。</p>
<p>3.绝对定位<strong>不再占有原先的位置</strong>。所以绝对定位是脱离标准流的。（脱标）</p>
<p>4.定位后的元素生成一个块级框，所以定位后的行内元素可以设置宽高</p>
</li>
</ul>
<h5 id="1-3-3-2-定位口诀-——-子绝父相"><a href="#1-3-3-2-定位口诀-——-子绝父相" class="headerlink" title="1.3.3.2 定位口诀 —— 子绝父相"></a>1.3.3.2 定位口诀 —— 子绝父相</h5><p>弄清楚这个口诀，就明白了绝对定位和相对定位的使用场景。</p>
<p>这个<strong>“子绝父相”</strong>太重要了，是我们学习定位的<strong>口诀</strong>，是定位中最常用的一种方式这句话的意思是：<strong>子级是绝对定位的话，父级要用相对定位。</strong></p>
<p>因为绝对定位的盒子是拼爹的，所以要和父级搭配一起来使用。</p>
<p>①子级绝对定位，不会占有位置，可以放到父盒子里面的任何一个地方，不会影响其他的兄弟盒子。</p>
<p>②父盒子需要加定位限制子盒子在父盒子内显示。</p>
<p>③父盒子布局时，需要占有位置，因此父亲只能是相对定位。</p>
<p>这就是子绝父相的由来，所以<strong>相对定位经常用来作为绝对定位的父级</strong>。</p>
<p>总结： <strong>因为父级需要占有位置，因此是相对定位， 子盒子不需要占有位置，则是绝对定位</strong></p>
<p>当然，子绝父相不是永远不变的，如果父元素不需要占有位置，<strong>子绝父绝</strong>也会遇到。</p>
<h5 id="1-3-3-3-绝对定位盒子的居中算法"><a href="#1-3-3-3-绝对定位盒子的居中算法" class="headerlink" title="1.3.3.3 绝对定位盒子的居中算法"></a>1.3.3.3 绝对定位盒子的居中算法</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/* 1.left走50% 父容器宽度的一半 */</span></span><br><span class="line"><span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="comment">/* 2.margin 负值往左边走 自己盒子宽度的一半 */</span></span><br><span class="line"><span class="attribute">margin-left</span>: -<span class="number">50px</span>;</span><br></pre></td></tr></table></figure>





<p><strong>疑问</strong>：为什么在布局时，<strong>子级元素</strong>使用<strong>绝对定位</strong>时，<strong>父级元素</strong>就要用<strong>相对定位</strong>呢？</p>
<p>观察下图，思考一下在布局时，<strong>左右两个方向的箭头图片</strong>以及<strong>父级盒子</strong>的定位方式。</p>
<p><img data-src="./images/07_%E5%AD%90%E7%BB%9D%E7%88%B6%E7%9B%B8%E6%88%AA%E5%9B%BE.png" alt="子绝父相截图"></p>
<img data-src='./images/27子绝父相.png'>

<p><strong>分析</strong>：</p>
<ol>
<li><strong>方向箭头</strong>叠加在其他图片上方，应该使用<strong>绝对定位</strong>，因为<strong>绝对定位完全脱标</strong>，完全不占位置。</li>
<li><strong>父级盒子</strong>应该使用<strong>相对定位</strong>，因为<strong>相对定位不脱标</strong>，后续盒子仍然以标准流的方式对待它。<ul>
<li>如果父级盒子也使用<strong>绝对定位</strong>，会完全脱标，那么下方的<strong>广告盒子</strong>会上移，这显然不是我们想要的。</li>
</ul>
</li>
</ol>
<p><strong>结论</strong>：<strong>父级要占有位置，子级要任意摆放</strong>，这就是<strong>子绝父相</strong>的由来。</p>
<h4 id="1-3-4-固定定位-fixed-重要"><a href="#1-3-4-固定定位-fixed-重要" class="headerlink" title="1.3.4. 固定定位(fixed) - 重要"></a>1.3.4. 固定定位(fixed) - 重要</h4><ul>
<li><p><strong>固定定位</strong>是元素<strong>固定于浏览器可视区的位置</strong>。（认死理型）   主要使用场景： 可以在浏览器页面滚动时元素的位置不会改变。</p>
</li>
<li><p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">选择器 &#123; </span><br><span class="line">	position: fixed; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>固定定位的特点：（务必记住）：</p>
<p>1.以浏览器的可视窗口为参照点移动元素。</p>
<ul>
<li>跟父元素没有任何关系</li>
<li>不随滚动条滚动。</li>
</ul>
<p>2.固定定位<strong>不在占有原先的位置</strong>。</p>
</li>
<li><p>固定定位也是<strong>脱标</strong>的，其实<strong>固定定位也可以看做是一种特殊的绝对定位</strong>。（认死理型） </p>
<ul>
<li><strong>完全脱标</strong>—— 完全不占位置；</li>
<li>只认<strong>浏览器的可视窗口</strong> —— <code>浏览器可视窗口 + 边偏移属性</code> 来设置元素的位置；<ul>
<li>跟父元素没有任何关系；单独使用的</li>
<li>不随滚动条滚动。</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>提示</strong>：IE 6 等低版本浏览器不支持固定定位。</p>
<h4 id="1-3-5-粘性定位-sticky-了解"><a href="#1-3-5-粘性定位-sticky-了解" class="headerlink" title="1.3.5 粘性定位(sticky) - 了解"></a>1.3.5 粘性定位(sticky) - 了解</h4><ul>
<li><p><strong>粘性定位</strong>可以被认为是相对定位和固定定位的混合。 Sticky  粘性的 </p>
</li>
<li><p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">选择器 &#123; </span><br><span class="line">    position: sticky; </span><br><span class="line">    top: 10px; </span><br><span class="line">&#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure></li>
<li><p>粘性定位的特点：</p>
<p>1.以浏览器的可视窗口为参照点移动元素（固定定位特点）</p>
<p>2.粘性定位占有原先的位置（相对定位特点）</p>
<p>3.必须添加 top 、left、right、bottom <strong>其中一个</strong>才有效</p>
<p>跟页面滚动搭配使用。 兼容性较差，IE 不支持。</p>
</li>
</ul>
<h4 id="1-3-6-定位总结"><a href="#1-3-6-定位总结" class="headerlink" title="1.3.6 定位总结"></a>1.3.6 定位总结</h4><table>
<thead>
<tr>
<th><strong>定位模式</strong></th>
<th><strong>是否脱标</strong></th>
<th><strong>移动位置</strong></th>
<th><strong>是否常用</strong></th>
</tr>
</thead>
<tbody><tr>
<td>static   静态定位</td>
<td>否</td>
<td>不能使用边偏移</td>
<td>很少</td>
</tr>
<tr>
<td><strong>relative 相对定位</strong></td>
<td><strong>否 (占有位置)</strong></td>
<td><strong>相对于自身位置移动</strong></td>
<td><strong>基本单独使用</strong></td>
</tr>
<tr>
<td><strong>absolute绝对定位</strong></td>
<td><strong>是（不占有位置）</strong></td>
<td><strong>带有定位的父级</strong></td>
<td><strong>要和定位父级元素搭配使用</strong></td>
</tr>
<tr>
<td><strong>fixed 固定定位</strong></td>
<td><strong>是（不占有位置）</strong></td>
<td><strong>浏览器可视区</strong></td>
<td><strong>单独使用，不需要父级</strong></td>
</tr>
<tr>
<td>sticky 粘性定位</td>
<td>否   (占有位置)</td>
<td>浏览器可视区</td>
<td>少</td>
</tr>
</tbody></table>
<ul>
<li><p>一定记住 相对定位、固定定位、绝对定位 两个大的特点： 1. 是否占有位置（脱标否） 2. 以谁为基准点移动位置。</p>
</li>
<li><p>学习定位重点学会子绝父相。</p>
</li>
<li><p>注意：</p>
</li>
</ul>
<ol>
<li><strong>边偏移</strong>需要和<strong>定位模式</strong>联合使用，<strong>单独使用无效</strong>；</li>
<li><code>top</code> 和 <code>bottom</code> 不要同时使用；</li>
<li><code>left</code> 和 <code>right</code> 不要同时使用。</li>
<li>如果一个盒子既有left，又有right，则默认执行left属性，同理top和bottom会执行top。先左后右，先上后下。</li>
<li><font color='red'>浮动的元素不会压住下面标准流的文字；绝对（固定）定位会压住下面标准流所有的内容</font></li>
</ol>
<h2 id="十一-精灵图（重点）"><a href="#十一-精灵图（重点）" class="headerlink" title="十一. 精灵图（重点）"></a>十一. 精灵图（重点）</h2><h3 id="1-1-为什么需要精灵图"><a href="#1-1-为什么需要精灵图" class="headerlink" title="1.1 为什么需要精灵图"></a>1.1 为什么需要精灵图</h3><p><img data-src="../images/Css/1571482435259.png" alt="1571482435259"></p>
<p>一个网页中往往会应用很多小的背景图像作为修饰，当网页中的图像过多时，服务器就会频繁地接收和发送请求图片，造成服务器请求压力过大，这将大大降低页面的加载速度。</p>
<p><strong>为什么使用精灵图（目的）：</strong></p>
<p>​    <strong>为了有效地减少服务器接收和发送请求的次数</strong>，<strong>提高</strong>页面的<strong>加载速度</strong>，出现了 <strong>CSS 精灵技术</strong>（也称 CSS Sprites、CSS 雪碧）。</p>
<p><strong>核心原理</strong>：</p>
<p>​    将网页中的一些小背景图像整合到一张大图中 ，这样服务器只需要一次请求就可以了。</p>
<p><strong>精灵图举例</strong>:</p>
<p><img data-src="../images/Css/1571519067073.png" alt="1571519067073"></p>
<h3 id="1-2-精灵图（sprites）的使用"><a href="#1-2-精灵图（sprites）的使用" class="headerlink" title="1.2 精灵图（sprites）的使用"></a>1.2 精灵图（sprites）的使用</h3><p>使用精灵图核心：</p>
<ol>
<li>精灵技术主要针对于背景图片使用。就是把多个小背景图片整合到一张大图片中。</li>
<li>这个大图片也称为 sprites  精灵图  或者 雪碧图</li>
<li>移动背景图片位置， 此时可以使用 background-position 。</li>
<li>移动的距离就是这个目标图片的 x 和 y 坐标。注意网页中的坐标有所不同</li>
<li>因为一般情况下都是往上往左移动，所以数值是负值。</li>
<li>使用精灵图的时候需要精确测量，每个小背景图片的大小和位置。</li>
</ol>
<p>使用精灵图核心总结：</p>
<ol>
<li><p>精灵图主要<strong>针对于小的背景图片</strong>使用。</p>
</li>
<li><p>主要借助于背景位置来实现—<strong>background-position</strong> 。</p>
</li>
<li><p>一般情况下精灵图都是<strong>负值</strong>。（千万注意网页中的坐标： x轴右边走是正值，左边走是负值， y轴同理。）</p>
</li>
</ol>
<h3 id="1-3-案例：拼出自己名字"><a href="#1-3-案例：拼出自己名字" class="headerlink" title="1.3 案例：拼出自己名字"></a>1.3 案例：拼出自己名字</h3><h4 id="1-3-1-案例效果"><a href="#1-3-1-案例效果" class="headerlink" title="1.3.1 案例效果"></a>1.3.1 案例效果</h4><p><img data-src="../images/Css/1571519368229.png" alt="1571519368229"></p>
<h4 id="1-3-2-代码参考"><a href="#1-3-2-代码参考" class="headerlink" title="1.3.2 代码参考"></a>1.3.2 代码参考</h4><p>结构</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;p&quot;</span>&gt;</span>p<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;i&quot;</span>&gt;</span>i<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;n&quot;</span>&gt;</span>n<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;k&quot;</span>&gt;</span>k<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">images/abcd.jpg</span>) no-repeat;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.p</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">112px</span>;</span><br><span class="line">    <span class="comment">/* background-color: pink; */</span></span><br><span class="line">    <span class="attribute">background-position</span>:  -<span class="number">493px</span> -<span class="number">276px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.i</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">108px</span>;</span><br><span class="line">    <span class="comment">/* background-color: pink; */</span></span><br><span class="line">    <span class="attribute">background-position</span>: -<span class="number">327px</span> -<span class="number">142px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.n</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">108px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">109px</span>;</span><br><span class="line">    <span class="comment">/* background-color: pink; */</span></span><br><span class="line">    <span class="attribute">background-position</span>: -<span class="number">215px</span> -<span class="number">141px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.k</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">105px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">114px</span>;</span><br><span class="line">    <span class="comment">/* background-color: pink; */</span></span><br><span class="line">    <span class="attribute">background-position</span>: -<span class="number">495px</span> -<span class="number">142px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-4-ps测量精灵图距离"><a href="#1-4-ps测量精灵图距离" class="headerlink" title="1.4 ps测量精灵图距离"></a>1.4 ps测量精灵图距离</h3><p>视图选项卡新建x轴和y轴参考线，窗口选项卡打开信箱选项（F8），用矩形边框工具选中图形，ctrl+T自由变换模式，在信息窗口有到原点的距离。</p>
<h2 id="十二-字体图标"><a href="#十二-字体图标" class="headerlink" title="十二. 字体图标"></a>十二. 字体图标</h2><h3 id="1-1-字体图标的产生"><a href="#1-1-字体图标的产生" class="headerlink" title="1.1 字体图标的产生"></a>1.1 字体图标的产生</h3><p>字体图标使用场景：  主要用于显示网页中通用、常用的一些小图标。</p>
<p>精灵图是有诸多优点的，但是缺点很明显。</p>
<p>1.图片文件还是比较大的。</p>
<p>2.图片本身放大和缩小会失真。</p>
<p>3.一旦图片制作完毕想要更换非常复杂。</p>
<p>此时，有一种技术的出现很好的解决了以上问题，就是<strong>字体图标 iconfont</strong>。</p>
<p><strong>字体图标</strong>可以为前端工程师提供一种方便高效的图标使用方式，<strong>展示的是图标，本质属于字体</strong>。</p>
<h3 id="1-2-字体图标的优点"><a href="#1-2-字体图标的优点" class="headerlink" title="1.2 字体图标的优点"></a>1.2 字体图标的优点</h3><p><strong>轻量级</strong>：一个图标字体要比一系列的图像要小。一旦字体加载了，图标就会马上渲染出来，减少了服务器请求</p>
<ul>
<li>灵活性：本质其实是文字，可以很随意的改变颜色、产生阴影、透明效果、旋转等</li>
<li>兼容性：几乎支持所有的浏览器，请放心使用</li>
<li>注意： 字体图标不能替代精灵技术，只是对工作中图标部分技术的提升和优化。</li>
</ul>
<p><strong>总结：</strong></p>
<p>1.如果遇到一些结构和样式比较简单的小图标，就用字体图标。<img data-src="../images/Css/1571519724473.png" alt="1571519724473"></p>
<p>2.如果遇到一些结构和样式复杂一点的小图片，就用精灵图。</p>
<p><img data-src="../images/Css/1571519739775.png" alt="1571519739775"></p>
<p><strong>使用步骤</strong></p>
<p>字体图标是一些网页常见的小图标，我们直接网上下载即可。 因此使用可以分为：</p>
<p>1.字体图标的下载 </p>
<p>2.字体图标的引入 （引入到我们html页面中）</p>
<p>3.字体图标的追加 （以后添加新的小图标）</p>
<h3 id="1-3-字体图标的下载"><a href="#1-3-字体图标的下载" class="headerlink" title="1.3 字体图标的下载"></a><strong>1.3</strong> <strong>字体图标的下载</strong></h3><p><strong>推荐下载网站：</strong></p>
<ul>
<li><strong>icomoon</strong> <strong>字库</strong>  <a href="http://icomoon.io/">http://icomoon.io</a>    推荐指数  <strong>★★★★★</strong></li>
</ul>
<p>IcoMoon 成立于 2011 年，推出了第一个自定义图标字体生成器，它允许用户选择所需要的图标，使它们成一字型。该字库内容种类繁多，非常全面，唯一的遗憾是国外服务器，打开网速较慢。</p>
<ul>
<li><strong>阿里</strong> <strong>iconfont</strong> <strong>字库</strong>   <a href="http://www.iconfont.cn/">http://www.iconfont.cn/</a>   推荐指数   <strong>★★★★★</strong> </li>
</ul>
<p>这个是阿里妈妈 M2UX 的一个 iconfont 字体图标字库，包含了淘宝图标库和阿里妈妈图标库。可以使用 AI制作图标上传生成。 重点是，免费！</p>
<p><font color='red'>tips：阿里巴巴矢量图标库全选技巧  打开控制台，运行下列代码</font></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> span = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.icon-cover&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = span.length; i &lt; len; i++) &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(span[i].querySelector(<span class="string">&#x27;span&#x27;</span>).click());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1-4-字体图标的引入"><a href="#1-4-字体图标的引入" class="headerlink" title="1.4 字体图标的引入"></a><strong>1.4</strong> <strong>字体图标的引入</strong></h3><p><strong>下载完毕之后，注意原先的文件不要删，后面会用</strong>。</p>
<ol>
<li>把下载包里面的 <strong>fonts</strong> 文件夹放入页面根目录下</li>
</ol>
<p><img data-src="../images/Css/1571520092646.png" alt="1571520092646"></p>
<ul>
<li><strong>字体文件格式</strong></li>
</ul>
<p>不同浏览器所支持的字体格式是不一样的，字体图标之所以兼容，就是因为包含了主流浏览器支持的字体文件。</p>
<p>1).TureType(  <strong>.ttf</strong>  )格式.ttf字体是Windows和Mac的最常见的字体，支持这种字体的浏览器有IE9+、Firefox3.5+、Chrome4+、Safari3+、Opera10+、iOS Mobile、Safari4.2+；</p>
<p>2).Web Open Font Format( <strong>.woff</strong> )格式woff字体，支持这种字体的浏览器有IE9+、Firefox3.5+、Chrome6+、Safari3.6+、Opera11.1+；</p>
<p>3).Embedded Open Type( <strong>.eot</strong> )格式.eot字体是IE专用字体，支持这种字体的浏览器有IE4+；</p>
<p>4).SVG(  .<strong>svg</strong>  )格式.svg字体是基于SVG字体渲染的一种格式，支持这种字体的浏览器有Chrome4+、Safari3.1+、Opera10.0+、iOS Mobile Safari3.2+；</p>
<p>2.在 CSS 样式中全局声明字体： 简单理解把这些字体文件通过css引入到我们页面中。</p>
<p>一定注意字体文件路径的问题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@font-face &#123;</span><br><span class="line">  font-family: &#x27;icomoon&#x27;;</span><br><span class="line">  src:  url(&#x27;fonts/icomoon.eot?7kkyc2&#x27;);</span><br><span class="line">  src:  url(&#x27;fonts/icomoon.eot?7kkyc2#iefix&#x27;) format(&#x27;embedded-opentype&#x27;),</span><br><span class="line">    url(&#x27;fonts/icomoon.ttf?7kkyc2&#x27;) format(&#x27;truetype&#x27;),</span><br><span class="line">    url(&#x27;fonts/icomoon.woff?7kkyc2&#x27;) format(&#x27;woff&#x27;),</span><br><span class="line">    url(&#x27;fonts/icomoon.svg?7kkyc2#icomoon&#x27;) format(&#x27;svg&#x27;);</span><br><span class="line">  font-weight: normal;</span><br><span class="line">  font-style: normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ol start="3">
<li>html 标签内添加小图标。</li>
</ol>
<p><img data-src="../images/Css/1571520411345.png" alt="1571520411345"></p>
<ol start="4">
<li>给标签定义字体。</li>
</ol>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">span &#123;</span><br><span class="line">  font-family: &quot;icomoon&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  注意：务必保证 这个字体和上面@font-face里面的字体保持一致 </p>
<p>  <img data-src="../images/Css/1571520485350.png" alt="1571520485350"></p>
<h3 id="1-5-字体图标的追加"><a href="#1-5-字体图标的追加" class="headerlink" title="1.5 字体图标的追加"></a>1.5 字体图标的追加</h3><p>如果工作中，原来的字体图标不够用了，我们需要添加新的字体图标到原来的字体文件中。</p>
<p>把压缩包里面的 <strong>selection.json</strong> 从新上传，然后选中自己想要新的图标，从新下载压缩包，并替换原来的文件即可。</p>
<p><img data-src="../images/Css/1571520554317.png" alt="1571520554317"></p>
<h3 id="1-6-字体图标加载的原理："><a href="#1-6-字体图标加载的原理：" class="headerlink" title="1.6 字体图标加载的原理："></a>1.6 字体图标加载的原理：</h3><p><img data-src="../images/Css/%E5%AD%97%E4%BD%93%E5%9B%BE%E6%A0%87%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%8E%9F%E7%90%86.gif" alt="1571520617270"></p>
<h2 id="十三-CSS-三角"><a href="#十三-CSS-三角" class="headerlink" title="十三. CSS 三角"></a>十三. CSS 三角</h2><h3 id="1-1-介绍"><a href="#1-1-介绍" class="headerlink" title="1.1 介绍"></a>1.1 介绍</h3><p>网页中常见一些三角形，使用 CSS 直接画出来就可以，不必做成图片或者字体图标。</p>
<p>一张图， 你就知道 CSS 三角是怎么来的了, 做法如下：</p>
<p><img data-src="../images/Css/1571520965966.png" alt="1571520965966"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">0</span>; </span><br><span class="line">   <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">border</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line"><span class="attribute">border-color</span>: red green blue black;</span><br><span class="line"><span class="attribute">line-height</span>:<span class="number">0</span>;</span><br><span class="line">   <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>我们用css 边框可以模拟三角效果</li>
<li>宽度高度为0</li>
<li>我们4个边框都要写， 只保留需要的边框颜色，其余的不能省略，都改为 transparent 透明就好了</li>
<li>为了照顾兼容性 低版本的浏览器，加上 font-size: 0;  line-height: 0;</li>
</ol>
<h3 id="1-2-案例：京东三角"><a href="#1-2-案例：京东三角" class="headerlink" title="1.2 案例：京东三角"></a>1.2 案例：京东三角</h3><h4 id="1-2-1效果图"><a href="#1-2-1效果图" class="headerlink" title="1.2.1效果图"></a>1.2.1效果图</h4><p><img data-src="../images/Css/1571521183026.png" alt="1571521183026"></p>
<h4 id="1-2-2-代码参考"><a href="#1-2-2-代码参考" class="headerlink" title="1.2.2 代码参考"></a>1.2.2 代码参考</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS 三角制作<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/* border: 10px solid pink; */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">border-top</span>: <span class="number">10px</span> solid pink;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-right</span>: <span class="number">10px</span> solid red;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-bottom</span>: <span class="number">10px</span> solid blue;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-left</span>: <span class="number">10px</span> solid green;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">50px</span> solid transparent;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-left-color</span>: pink;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.jd</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">249px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.jd</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">            <span class="attribute">right</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">top</span>: -<span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 为了照顾兼容性 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">0</span>;  </span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">5px</span> solid transparent;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-bottom-color</span>: pink;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;jd&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="十四-CSS-用户界面样式"><a href="#十四-CSS-用户界面样式" class="headerlink" title="十四. CSS 用户界面样式"></a>十四. CSS 用户界面样式</h2><p><strong>什么是界面样式</strong></p>
<p>所谓的界面样式，就是更改一些用户操作样式，以便提高更好的用户体验。</p>
<ul>
<li>更改用户的鼠标样式 </li>
<li>表单轮廓</li>
<li>防止表单域拖拽</li>
</ul>
<h3 id="1-1-鼠标样式-cursor"><a href="#1-1-鼠标样式-cursor" class="headerlink" title="1.1 鼠标样式 cursor"></a>1.1 鼠标样式 cursor</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">	<span class="attribute">cursor</span>: pointer; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状。</p>
<p><img data-src="../images/Css/1571521805183.png" alt="1571521805183"></p>
<h3 id="1-2-轮廓线-outline"><a href="#1-2-轮廓线-outline" class="headerlink" title="1.2 轮廓线 outline"></a>1.2 轮廓线 outline</h3><p>给表单添加 outline: 0;   或者  outline: none; 样式之后，就可以去掉默认的蓝色边框。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line">	<span class="attribute">outline</span>: none; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3-防止拖拽文本域-resize"><a href="#1-3-防止拖拽文本域-resize" class="headerlink" title="1.3 防止拖拽文本域 resize"></a>1.3 防止拖拽文本域 resize</h3><p> 实际开发中，我们文本域右下角是不可以拖拽的。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">textarea</span>&#123;  	<span class="attribute">resize</span>: none; &#125;</span><br></pre></td></tr></table></figure>

<p>vertical-align 属性应用</p>
<h2 id="十五-vertical-align-属性应用"><a href="#十五-vertical-align-属性应用" class="headerlink" title="十五. vertical-align 属性应用"></a>十五. vertical-align 属性应用</h2><p>CSS 的 <strong>vertical-align</strong> 属性使用场景： 经常用于设置图片或者表单(行内块元素）和文字垂直对齐。</p>
<p>官方解释： 用于设置一个元素的<strong>垂直对齐方式</strong>，但是它只针对于行内元素或者行内块元素有效。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">vertical-align</span> : baseline | top | middle | bottom </span><br></pre></td></tr></table></figure>

<p><img data-src="../images/Css/1571522023413.png" alt="1571522023413"></p>
<p><img data-src="../images/Css/1571522040645.png" alt="1571522040645"></p>
<h3 id="1-1-图片、表单和文字对齐"><a href="#1-1-图片、表单和文字对齐" class="headerlink" title="1.1 图片、表单和文字对齐"></a><strong>1.1</strong> <strong>图片、表单和文字对齐</strong></h3><p>图片、表单都属于行内块元素，默认的 vertical-align 是基线对齐。</p>
<p><img data-src="../images/Css/1571522093729.png" alt="1571522093729"></p>
<p>此时可以给图片、表单这些行内块元素的 <strong>vertical-align 属性设置为 middle</strong> 就可以让文字和图片垂直居中对齐了。</p>
<h3 id="1-2-解决图片底部默认空白缝隙问题"><a href="#1-2-解决图片底部默认空白缝隙问题" class="headerlink" title="1.2 解决图片底部默认空白缝隙问题"></a>1.2 解决图片底部默认空白缝隙问题</h3><p>bug：图片底侧会有一个空白缝隙，原因是行内块元素会和文字的基线对齐。</p>
<p>主要解决方法有两种：</p>
<p>1.<strong>给图片</strong>添加 <strong>vertical-align:middle | top| bottom</strong> 等。 （提倡使用的）</p>
<p>2.把图片转换为块级元素  <strong>display: block</strong>; </p>
<p><img data-src="../images/Css/1571522162225.png" alt="1571522162225"></p>
<h2 id="十六-溢出的文字省略号显示"><a href="#十六-溢出的文字省略号显示" class="headerlink" title="十六. 溢出的文字省略号显示"></a>十六. 溢出的文字省略号显示</h2><h3 id="1-1-单行文本溢出显示省略号"><a href="#1-1-单行文本溢出显示省略号" class="headerlink" title="1.1 单行文本溢出显示省略号"></a>1.1 单行文本溢出显示省略号</h3><p><img data-src="../images/Css/1571522317809.png" alt="1571522317809"></p>
<p>单行文本溢出显示省略号–必须满足三个条件：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">  <span class="comment">/*1. 先强制一行内显示文本*/</span>   </span><br><span class="line"><span class="attribute">white-space</span>: nowrap;  （ 默认 <span class="attribute">normal</span> 自动换行）     </span><br><span class="line"><span class="comment">/*2. 超出的部分隐藏*/</span>   </span><br><span class="line"><span class="attribute">overflow</span>: hidden;     </span><br><span class="line"><span class="comment">/*3. 文字用省略号替代超出的部分*/</span>   </span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br></pre></td></tr></table></figure>



<h3 id="1-2-多行文本溢出显示省略号（了解）"><a href="#1-2-多行文本溢出显示省略号（了解）" class="headerlink" title="1.2 多行文本溢出显示省略号（了解）"></a>1.2 多行文本溢出显示省略号（了解）</h3><p><img data-src="../images/Css/1571522334591.png" alt="1571522334591"></p>
<p>多行文本溢出显示省略号，<strong>有较大兼容性问题</strong>，适合于webKit浏览器或移动端（移动端大部分是webkit内核）</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*1. 超出的部分隐藏 */</span></span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="comment">/*2. 文字用省略号替代超出的部分 */</span></span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line"><span class="comment">/* 3. 弹性伸缩盒子模型显示 */</span></span><br><span class="line"><span class="attribute">display</span>: -webkit-box;</span><br><span class="line"><span class="comment">/* 4. 限制在一个块元素显示的文本的行数 */</span></span><br><span class="line">-webkit-line-clamp: <span class="number">2</span>;</span><br><span class="line"><span class="comment">/* 5. 设置或检索伸缩盒对象的子元素的排列方式 */</span></span><br><span class="line">-webkit-box-orient: vertical;</span><br></pre></td></tr></table></figure>

<p><strong>更推荐让后台人员来做这个效果，因为后台人员可以设置显示多少个字，操作更简单。</strong></p>
<h2 id="十七-常见布局技巧"><a href="#十七-常见布局技巧" class="headerlink" title="十七. 常见布局技巧"></a>十七. 常见布局技巧</h2><p><strong>巧妙利用一个技术更快更好的布局：</strong></p>
<ol>
<li>margin负值的运用</li>
<li>文字围绕浮动元素</li>
<li>行内块的巧妙运用</li>
<li>CSS三角强化</li>
</ol>
<h3 id="1-1-margin负值运用"><a href="#1-1-margin负值运用" class="headerlink" title="1.1. margin负值运用"></a>1.1. margin负值运用</h3><p><img data-src="../images/Css/1571522666082.png" alt="1571522666082"></p>
<p><img data-src="../images/Css/1571522683897.png" alt="1571522683897"></p>
<p>1.让每个盒子margin 往左侧移动 -1px 正好压住相邻盒子边框</p>
<p>2.鼠标经过某个盒子的时候，提高当前盒子的层级即可（如果没有有定位，则加相对定位（保留位置），如果有定位，则加z-index）</p>
<h3 id="1-2-文字围绕浮动元素"><a href="#1-2-文字围绕浮动元素" class="headerlink" title="1.2 文字围绕浮动元素"></a>1.2 文字围绕浮动元素</h3><p><strong>效果</strong></p>
<p><img data-src="../images/Css/1571522777745.png" alt="1571522777745"></p>
<p><strong>布局示意图</strong></p>
<p><img data-src="../images/Css/1571522761996.png" alt="1571522761996"></p>
<p><strong>巧妙运用浮动元素不会压住文字的特性</strong></p>
<h3 id="1-3-行内块巧妙运用"><a href="#1-3-行内块巧妙运用" class="headerlink" title="1.3 行内块巧妙运用"></a>1.3 行内块巧妙运用</h3><p><img data-src="../images/Css/1571522898744.png" alt="1571522898744"></p>
<p>页码在页面中间显示:</p>
<ol>
<li>把这些链接盒子转换为行内块， 之后给父级指定  text-align:center;</li>
<li>利用行内块元素中间有缝隙，并且给父级添加 text-align:center; 行内块元素会水平会居中</li>
</ol>
<p><img data-src="../images/Css/1571522910580.png" alt="1571522910580"></p>
<h3 id="1-4-CSS-三角强化-案例"><a href="#1-4-CSS-三角强化-案例" class="headerlink" title="1.4. CSS 三角强化 案例"></a>1.4. CSS 三角强化 案例</h3><h4 id="1-4-1-原理"><a href="#1-4-1-原理" class="headerlink" title="1.4.1 原理"></a><strong>1.4.1 原理</strong></h4><p><img data-src="../images/Css/1571550959181.png" alt="1571550959181"></p>
<p><img data-src="../images/Css/1571551000391.png" alt="1571551000391"></p>
<p><img data-src="../images/Css/1571548058053.png" alt="1571548058053"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    <span class="comment">/* 把上边框宽度调大 */</span></span></span><br><span class="line"><span class="css">    <span class="comment">/* border-top: 100px solid transparent;        border-right: 50px solid skyblue; */</span></span></span><br><span class="line"><span class="css">    <span class="comment">/* 左边和下边的边框宽度设置为0 */</span></span></span><br><span class="line"><span class="css">    <span class="comment">/* border-bottom: 0 solid blue;        border-left: 0 solid green; */</span></span></span><br><span class="line"><span class="css">    <span class="comment">/* 1.只保留右边的边框有颜色 */</span></span></span><br><span class="line"><span class="css">    <span class="attribute">border-color</span>: transparent red transparent transparent;</span></span><br><span class="line"><span class="css">    <span class="comment">/* 2. 样式都是solid */</span></span></span><br><span class="line"><span class="css">    <span class="attribute">border-style</span>: solid;</span></span><br><span class="line"><span class="css">    <span class="comment">/* 3. 上边框宽度要大， 右边框 宽度稍小， 其余的边框该为 0 */</span></span></span><br><span class="line"><span class="css">    <span class="attribute">border-width</span>: <span class="number">100px</span> <span class="number">50px</span> <span class="number">0</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-4-2-案例效果"><a href="#1-4-2-案例效果" class="headerlink" title="1.4.2 案例效果"></a>1.4.2 案例效果</h4><p><img data-src="../images/Css/1571548099631.png" alt="1571548099631"></p>
<h4 id="1-4-3-代码参考"><a href="#1-4-3-代码参考" class="headerlink" title="1**.4.3 代码参考**"></a>1**.4.3 代码参考**</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS三角强化的巧妙运用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.price</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">160px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">line-height</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.miaosha</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">      <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">90px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">      <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">font-weight</span>: <span class="number">700</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin-right</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.miaosha</span> <span class="selector-tag">i</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">      <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">border-color</span>: transparent <span class="number">#fff</span> transparent transparent;</span></span><br><span class="line"><span class="css">      <span class="attribute">border-style</span>: solid;</span></span><br><span class="line"><span class="css">      <span class="attribute">border-width</span>: <span class="number">24px</span> <span class="number">10px</span> <span class="number">0</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.origin</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">color</span>: gray;</span></span><br><span class="line"><span class="css">      <span class="attribute">text-decoration</span>: line-through;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;price&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;miaosha&quot;</span>&gt;</span> ¥1650 <span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> <span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;origin&quot;</span>&gt;</span>¥5650<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="十八-CSS-初始化"><a href="#十八-CSS-初始化" class="headerlink" title="十八. CSS 初始化"></a>十八. CSS 初始化</h2><p>不同浏览器对有些标签的默认值是不同的，为了消除不同浏览器对HTML文本呈现的差异，照顾浏览器的兼容，我们需要对CSS 初始化</p>
<p>简单理解： CSS初始化是指重设浏览器的样式。 (也称为CSS reset）</p>
<p>每个网页都必须首先进行 CSS初始化。</p>
<p>这里我们以 京东CSS初始化代码为例。</p>
<p><strong>Unicode编码字体：</strong></p>
<p>把中文字体的名称用相应的Unicode编码来代替，这样就可以有效的避免浏览器解释CSS代码时候出现乱码的问题。</p>
<p>比如：</p>
<p>黑体 \9ED1\4F53<br>宋体 \5B8B\4F53<br>微软雅黑 \5FAE\8F6F\96C5\9ED1</p>
<h2 id="十九-HTML5新特性"><a href="#十九-HTML5新特性" class="headerlink" title="十九.HTML5新特性"></a>十九.HTML5新特性</h2><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>HTML5 的新增特性主要是针对于以前的不足，增加了一些新的标签、新的表单和新的表单属性等。 </p>
<p>这些新特性都有兼容性问题，基本是 <strong>IE9+ 以上版本的浏览器</strong>才支持，如果不考虑兼容性问题，可以大量使用这些新特性。</p>
<h2 id="语义化标签-（★★）"><a href="#语义化标签-（★★）" class="headerlink" title="语义化标签 （★★）"></a>语义化标签 （★★）</h2><p>以前布局，我们基本用 div 来做。div 对于搜索引擎来说，是没有语义的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">“header”</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">“nav”</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">“content”</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">“footer”</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>发展到了HTML5后，新增了一些语义化标签，这样的话更加有利于浏览器的搜索引擎搜索，也方便了网站的seo（Search Engine Optimization，搜索引擎优化），下面就是新增的一些语义化标签</p>
<ul>
<li><code>&lt;header&gt;</code> 头部标签</li>
<li><code>&lt;nav&gt;</code> 导航标签</li>
<li><code>&lt;article&gt;</code> 内容标签</li>
<li><code>&lt;section&gt;</code> 定义文档某个区域</li>
<li><code>&lt;aside&gt;</code> 侧边栏标签</li>
<li><code>&lt;footer&gt;</code> 尾部标签</li>
</ul>
<p><img data-src="../images/Css/%E8%AF%AD%E4%B9%89%E5%8C%96%E6%A0%87%E7%AD%BE.png"></p>
<h2 id="多媒体标签"><a href="#多媒体标签" class="headerlink" title="多媒体标签"></a>多媒体标签</h2><p>多媒体标签分为 音频 <strong>audio</strong> 和视频 <strong>video</strong> 两个标签 使用它们，我们可以很方便的在页面中嵌入音频和视频，而不再去使用落后的flash和其他浏览器插件了。</p>
<p>因为多媒体标签的 属性、方法、事件比较多，因此我们需要什么功能的时候，就需要去查找相关的文档进行学习使用。</p>
<p><img data-src="../images/Css/%E5%A4%9A%E5%AA%92%E4%BD%93%E6%A0%87%E7%AD%BE.png"></p>
<h3 id="视频标签-video（★★★）"><a href="#视频标签-video（★★★）" class="headerlink" title="视频标签- video（★★★）"></a>视频标签- video（★★★）</h3><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p>当前 <strong><video></strong> 元素支持三种视频格式： 尽量使用 <strong>mp4格式</strong></p>
<p><strong>使用语法：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;media/mi.mp4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="../images/Css/video%E6%94%AF%E6%8C%81%E6%A0%BC%E5%BC%8F.png"></p>
<h4 id="兼容写法"><a href="#兼容写法" class="headerlink" title="兼容写法"></a>兼容写法</h4><p>由于各个浏览器的支持情况不同，所以我们会有一种兼容性的写法，这种写法了解一下即可</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span>  <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span>  <span class="attr">width</span>=<span class="string">&quot;300&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;move.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/ogg&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;move.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span> &gt;</span></span><br><span class="line">    您的浏览器暂不支持 <span class="tag">&lt;<span class="name">video</span>&gt;</span> 标签播放视频</span><br><span class="line">&lt;/ video &gt;</span><br></pre></td></tr></table></figure>

<p><strong>上面这种写法，浏览器会匹配video标签中的source，如果支持就播放，如果不支持往下匹配，直到没有匹配的格式，就提示文本</strong></p>
<h4 id="video-常用属性"><a href="#video-常用属性" class="headerlink" title="video 常用属性"></a>video 常用属性</h4><p><img data-src="../images/Css/video%E5%B8%B8%E7%94%A8%E5%B1%9E%E6%80%A7.png"></p>
<p><strong>属性很多，有一些属性需要大家重点掌握：</strong></p>
<ul>
<li><code>autoplay</code>  自动播放<ul>
<li>注意： 在google浏览器上面，默认禁止了自动播放，如果想要自动播放的效果，需要设置 muted属性</li>
</ul>
</li>
<li><code>width</code>  宽度</li>
<li><code>height</code>  高度</li>
<li><code>loop</code>  循环播放</li>
<li><code>src</code>  播放源</li>
<li><code>muted</code> 静音播放</li>
</ul>
<p><strong>示例代码：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;media/mi.mp4&quot;</span> <span class="attr">autoplay</span>=<span class="string">&quot;autoplay&quot;</span> <span class="attr">muted</span>=<span class="string">&quot;muted&quot;</span>  <span class="attr">loop</span>=<span class="string">&quot;loop&quot;</span> <span class="attr">poster</span>=<span class="string">&quot;media/mi9.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="音频标签-audio"><a href="#音频标签-audio" class="headerlink" title="音频标签- audio"></a>音频标签- audio</h3><h4 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h4><p>当前 <strong><audio></strong> 元素支持三种视频格式： 尽量使用 <strong>mp3格式</strong></p>
<p><strong>使用语法：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;media/music.mp3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="../images/Css/audio%E6%94%AF%E6%8C%81%E6%A0%BC%E5%BC%8F.png"></p>
<h4 id="兼容写法-1"><a href="#兼容写法-1" class="headerlink" title="兼容写法"></a>兼容写法</h4><p>由于各个浏览器的支持情况不同，所以我们会有一种兼容性的写法，这种写法了解一下即可</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt; audio controls=&quot;controls&quot;  &gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;happy.mp3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/mpeg&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;happy.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/ogg&quot;</span> &gt;</span></span><br><span class="line">    您的浏览器暂不支持 <span class="tag">&lt;<span class="name">audio</span>&gt;</span> 标签。</span><br><span class="line">&lt;/ audio&gt;</span><br></pre></td></tr></table></figure>

<p><strong>上面这种写法，浏览器会匹配audio标签中的source，如果支持就播放，如果不支持往下匹配，直到没有匹配的格式，就提示文本</strong></p>
<h4 id="audio-常用属性"><a href="#audio-常用属性" class="headerlink" title="audio 常用属性"></a>audio 常用属性</h4><p><img data-src="../images/Css/audio%E5%B8%B8%E7%94%A8%E5%B1%9E%E6%80%A7.png"></p>
<p><strong>示例代码：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;media/music.mp3&quot;</span> <span class="attr">autoplay</span>=<span class="string">&quot;autoplay&quot;</span> <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul>
<li>音频标签和视频标签使用方式基本一致</li>
<li>浏览器支持情况不同</li>
<li>谷歌浏览器把音频和视频自动播放禁止了</li>
<li>我们可以给视频标签添加 muted 属性来静音播放视频，音频不可以（可以通过JavaScript解决）</li>
<li>视频标签是重点，我们经常设置自动播放，不使用 controls 控件，循环和设置大小属性</li>
</ul>
<h2 id="新增的表单元素-（★★）"><a href="#新增的表单元素-（★★）" class="headerlink" title="新增的表单元素 （★★）"></a>新增的表单元素 （★★）</h2><p>在H5中，帮我们新增加了很多类型的表单，这样方便了程序员的开发</p>
<p><strong>课堂案例：在这个案例中，熟练了新增表单的用法</strong></p>
<p><img data-src="../images/Css/input%E6%A1%88%E4%BE%8B.png"></p>
<p><strong>案例代码：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 我们验证的时候必须添加form表单域 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>邮箱: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>网址: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;url&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>日期: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>时间: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;time&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>数量: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>手机号码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;tel&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>搜索: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>颜色: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;color&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 当我们点击提交按钮就可以验证表单了 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <strong>常见输入类型</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">text password radio checkbox button file hidden submit reset image</span><br></pre></td></tr></table></figure>

<p><strong>新的输入类型</strong></p>
<p><img data-src="../images/Css/%E6%96%B0%E5%A2%9Einput%E8%A1%A8%E5%8D%95.png"></p>
<p>类型很多，我们现阶段<strong>重点记忆三个</strong>： <strong><code>number</code>   <code>tel</code>   <code>search</code></strong></p>
<h2 id="二十-CSS3新特性"><a href="#二十-CSS3新特性" class="headerlink" title="二十.CSS3新特性"></a>二十.CSS3新特性</h2><h3 id="1-1-CSS3-的现状"><a href="#1-1-CSS3-的现状" class="headerlink" title="1.1 CSS3 的现状"></a>1.1 CSS3 的现状</h3><ul>
<li>新增的CSS3特性有兼容性问题，ie9+才支持</li>
<li>移动端支持优于 PC 端 </li>
<li>不断改进中 </li>
<li>应用相对广泛</li>
<li>现阶段主要学习：新增选择器和盒子模型以及其他特性 </li>
</ul>
<h3 id="1-2-CSS3-新增选择器"><a href="#1-2-CSS3-新增选择器" class="headerlink" title="1.2 CSS3  新增选择器"></a>1.2 CSS3  新增选择器</h3><p>CSS3 给我们新增了选择器，可以更加便捷，更加自由的选择目标元素。 </p>
<ul>
<li>属性选择器</li>
<li>结构伪类选择器</li>
<li>伪元素选择器</li>
</ul>
<h4 id="1-2-1-属性选择器（★★）"><a href="#1-2-1-属性选择器（★★）" class="headerlink" title="1.2.1 属性选择器（★★）"></a>1.2.1 属性选择器（★★）</h4><p>属性选择器，按照字面意思，都是根据标签中的属性来选择元素</p>
<p><img data-src="../images/Css/%E5%B1%9E%E6%80%A7%E9%80%89%E6%8B%A9%E5%99%A8.png"></p>
<p><strong>示例代码：</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 只选择 type =text 文本框的input 选取出来 */</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=text]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 选择首先是div 然后 具有class属性 并且属性值 必须是 icon开头的这些元素</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[class^=icon]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 选择首先是section 然后 具有class属性 并且属性值 必须是 data结尾的这些元素 */</span></span><br><span class="line"><span class="selector-tag">section</span><span class="selector-attr">[class$=data]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>:</span><br><span class="line">    blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>属性选择器，按照字面意思，都是根据标签中的属性来选择元素</li>
<li>属性选择器可以根据元素特定属性的来选择元素。 这样就可以不用借助于类或者id选择器</li>
<li>属性选择器也可以选择出来自定义的属性</li>
<li><strong>注意：</strong>类选择器、属性选择器、伪类选择器，权重为 10。</li>
</ul>
<h4 id="1-2-2-结构伪类选择器"><a href="#1-2-2-结构伪类选择器" class="headerlink" title="1.2.2 结构伪类选择器"></a>1.2.2 结构伪类选择器</h4><p>结构伪类选择器主要根据文档结构来选择器元素， 常用于根据父级选择器里面的子元素</p>
<p><img data-src="../images/Css/%E7%BB%93%E6%9E%84%E4%BC%AA%E7%B1%BB%E9%80%89%E6%8B%A9%E5%99%A8-01.png"></p>
<h4 id="1-2-3-E-first-child"><a href="#1-2-3-E-first-child" class="headerlink" title="1.2.3 E:first-child"></a>1.2.3 E:first-child</h4><p>匹配父元素的第一个子元素E</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css">    <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first</span>-child&#123;      <span class="attribute">background-color</span>: red;    &#125;  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span>  <span class="tag">&lt;<span class="name">ul</span>&gt;</span>    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项一<span class="tag">&lt;/<span class="name">li</span>&gt;</span>    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项二<span class="tag">&lt;/<span class="name">li</span>&gt;</span>    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项三<span class="tag">&lt;/<span class="name">li</span>&gt;</span>    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项四<span class="tag">&lt;/<span class="name">li</span>&gt;</span>  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="../images/Css/first-child.png"></p>
<p><strong>E:last-child</strong>  则是选择到了最后一个li标签</p>
<h4 id="E-nth-child-n-（★★★）"><a href="#E-nth-child-n-（★★★）" class="headerlink" title="E:nth-child(n)（★★★）"></a>E:nth-child(n)（★★★）</h4><p>匹配到父元素的第n个元素</p>
<ul>
<li><p>匹配到父元素的第2个子元素  </p>
<p><code>ul li:nth-child(2)&#123;&#125;</code></p>
</li>
<li><p>匹配到父元素的序号为奇数的子元素</p>
<p><code>ul li:nth-child(odd)&#123;&#125;</code>    <strong>odd</strong> 是关键字  奇数的意思（3个字母 ）</p>
</li>
<li><p>匹配到父元素的序号为偶数的子元素</p>
<p><code>ul li:nth-child(even)&#123;&#125;</code>   <strong>even</strong>（4个字母 ）</p>
</li>
<li><p><strong>匹配到父元素的前3个子元素</strong></p>
<p><code>ul li:nth-child(-n+3)&#123;&#125;</code>    </p>
<p>选择器中的  <strong>n</strong> 是怎么变化的呢？</p>
<p>因为 n是从 0 ，1，2，3.. 一直递增</p>
<p>所以 -n+3 就变成了   </p>
<ul>
<li>n=0 时   -0+3=3</li>
<li>n=1时    -1+3=2</li>
<li>n=2时    -2+3=1</li>
<li>n=3时    -3+3=0 </li>
<li>…</li>
</ul>
</li>
</ul>
<p><strong>一些常用的公式： 公式不是死的，在这里列举出来让大家能够找寻到这个模式，能够理解代码，这样才能写出满足自己功能需求的代码</strong></p>
<p><img data-src="../images/Css/nth-child%E5%85%AC%E5%BC%8F.png"></p>
<p><strong>常用的结构伪类选择器是：</strong> <code>nth-child(n) &#123;...&#125;</code></p>
<h4 id="E-nth-child-与-E-nth-of-type-的区别"><a href="#E-nth-child-与-E-nth-of-type-的区别" class="headerlink" title="E:nth-child 与 E:nth-of-type 的区别"></a>E:nth-child 与 E:nth-of-type 的区别</h4><p>这里只讲明  <strong>E:nth-child(n)</strong>  和 <strong>E:nth-of-type(n)</strong>  的区别  剩下的 <strong>E:first-of-type</strong>     <strong>E:last-of-type</strong>  <strong>E:nth-last-of-type(n)</strong>   同理做推导即可</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="css">      <span class="comment">/* 字体变成红色 */</span></span></span><br><span class="line"><span class="css">      <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="css">      <span class="comment">/* 背景变成绿色 */</span></span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项一<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>乱来的p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项二<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项三<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项四<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="../images/Css/nth-child%E4%B8%8Enth-of-type%E5%8C%BA%E5%88%AB.png"></p>
<p>也就是说：</p>
<ul>
<li><code>E:nth-child(n)</code>     匹配父元素的第n个子元素E，也就是说，nth-child 对父元素里面所有孩子排序选择（序号是固定的）  先找到第n个孩子，然后看看是否和E匹配</li>
<li><code>E:nth-of-type(n)</code> 匹配同类型中的第n个同级兄弟元素E，也就是说，对父元素里面指定子元素进行排序选择。 先去匹配E ，然后再根据E 找第n个孩子</li>
</ul>
<h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><ul>
<li>结构伪类选择器一般用于选择父级里面的第几个孩子</li>
<li>nth-child 对父元素里面所有孩子排序选择（序号是固定的）  先找到第n个孩子，然后看看是否和E匹配</li>
<li>nth-of-type 对父元素里面指定子元素进行排序选择。 先去匹配E ，然后再根据E 找第n个孩子</li>
<li>关于 nth-child（n） 我们要知道 n 是从 0 开始计算的，要记住常用的公式</li>
<li>如果是无序列表，我们肯定用 nth-child 更多</li>
<li>类选择器、属性选择器、伪类选择器，权重为 10</li>
</ul>
<h4 id="1-2-4-伪元素选择器（★★★）"><a href="#1-2-4-伪元素选择器（★★★）" class="headerlink" title="1.2.4 伪元素选择器（★★★）"></a>1.2.4 伪元素选择器（★★★）</h4><p>伪元素选择器可以帮助我们利用CSS创建新标签元素，而不需要HTML标签，从而简化HTML结构</p>
<p><img data-src="../images/Css/%E4%BC%AA%E5%85%83%E7%B4%A0.png"></p>
<p><strong>示例demo</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  <span class="comment">/* div::before 权重是2 */</span></span></span><br><span class="line"><span class="css">  <span class="selector-tag">div</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="comment">/* 这个content是必须要写的 */</span></span></span><br><span class="line"><span class="css">    <span class="attribute">content</span>: <span class="string">&#x27;我&#x27;</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">content</span>: <span class="string">&#x27;小猪佩奇&#x27;</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span> 是 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>before 和 after 创建一个元素，但是属于行内元素</li>
<li>新创建的这个元素在文档树中是找不到的，所以我们称为伪元素</li>
<li>语法：  element::before {}   </li>
<li>before 和 after 必须有 content 属性 </li>
<li>before 在父元素内容的前面创建元素，after 在父元素内容的后面插入元素<br>伪元素选择器和标签选择器一样，权重为 1</li>
</ul>
<h4 id="应用场景一：-字体图标"><a href="#应用场景一：-字体图标" class="headerlink" title="应用场景一： 字体图标"></a>应用场景一： 字体图标</h4><p>在实际工作中，字体图标基本上都是用伪元素来实现的，好处在于我们不需要在结构中额外去定义字体图标的标签，通过content属性来设置字体图标的 编码</p>
<p><strong>步骤：</strong></p>
<ul>
<li>结构中定义div盒子</li>
<li>在style中先申明字体  @font-face</li>
<li>在style中定义after伪元素 div::after{…}</li>
<li>在after伪元素中 设置content属性，属性的值就是字体编码</li>
<li>在after伪元素中 设置font-family的属性</li>
<li>利用定位的方式，让伪元素定位到相应的位置；记住定位口诀：子绝父相</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> ... <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="keyword">@font-face</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">font-family</span>: <span class="string">&#x27;icomoon&#x27;</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.eot?1lv3na&#x27;</span>);</span></span><br><span class="line"><span class="css">      <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.eot?1lv3na#iefix&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;embedded-opentype&#x27;</span>), <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.ttf?1lv3na&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;truetype&#x27;</span>), <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.woff?1lv3na&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>), <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.svg?1lv3na#icomoon&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;svg&#x27;</span>);</span></span><br><span class="line"><span class="css">      <span class="attribute">font-weight</span>: normal;</span></span><br><span class="line"><span class="css">      <span class="attribute">font-style</span>: normal;</span></span><br><span class="line"><span class="css">      <span class="attribute">font-display</span>: block;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">      <span class="attribute">top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">font-family</span>: <span class="string">&#x27;icomoon&#x27;</span>;</span></span><br><span class="line"><span class="css">      <span class="comment">/* content: &#x27;&#x27;; */</span></span></span><br><span class="line"><span class="css">      <span class="attribute">content</span>: <span class="string">&#x27;\e91e&#x27;</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">      <span class="attribute">font-size</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="应用场景二：-仿土豆效果"><a href="#应用场景二：-仿土豆效果" class="headerlink" title="应用场景二： 仿土豆效果"></a>应用场景二： 仿土豆效果</h4><p>把之前的代码进行了改善</p>
<p><strong>步骤：</strong></p>
<ul>
<li>找到之前写过的仿土豆的结构和样式，拷贝到自己的页面中</li>
<li>删除之前的mask遮罩</li>
<li>在style中，给大的div盒子（类名叫tudou的），设置 before伪元素</li>
<li>这个伪元素充当的是遮罩的角色，所以我们不用设置内容，但是需要设置content属性，属性的值为空字符串</li>
<li>给这个遮罩设置宽高，背景颜色，默认是隐藏的</li>
<li>当鼠标移入到 div盒子时候，让遮罩显示，利用 hover 来实现</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> ... <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.tudou</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">444px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">320px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin</span>: <span class="number">30px</span> auto;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.tudou</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.tudou</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="css">      <span class="comment">/* 隐藏遮罩层 */</span></span></span><br><span class="line"><span class="css">      <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">      <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">4</span>) <span class="built_in">url</span>(<span class="string">images/arr.png</span>) no-repeat center;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="comment">/* 当我们鼠标经过了 土豆这个盒子，就让里面before遮罩层显示出来 */</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.tudou</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="comment">/* 而是显示元素 */</span></span></span><br><span class="line"><span class="css">      <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tudou&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/tudou.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tudou&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/tudou.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tudou&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/tudou.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tudou&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/tudou.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="应用场景三：-清除浮动"><a href="#应用场景三：-清除浮动" class="headerlink" title="应用场景三： 清除浮动"></a>应用场景三： 清除浮动</h4><p>回忆一下清除浮动的方式：</p>
<ul>
<li>额外标签法也称为隔墙法，是 W3C 推荐的做法。</li>
<li>父级添加 overflow 属性</li>
<li>父级添加after伪元素</li>
<li>父级添加双伪元素</li>
</ul>
<p><strong>额外标签法</strong>也称为隔墙法，是 W3C 推荐的做法</p>
<p><img data-src="../images/Css/%E9%A2%9D%E5%A4%96%E6%A0%87%E7%AD%BE%E6%B3%95.png"></p>
<p><strong>注意：</strong> 要求这个新的空标签必须是块级元素</p>
<p>后面两种伪元素清除浮动算是第一种额外标签法的一个<strong>升级</strong>和<strong>优化</strong></p>
<p><img data-src="../images/Css/%E5%8D%95%E4%BC%AA%E5%85%83%E7%B4%A0.png"></p>
<p><img data-src="../images/Css/%E5%8F%8C%E4%BC%AA%E5%85%83%E7%B4%A0.png"></p>
<h3 id="1-3-盒子模型（★★★）"><a href="#1-3-盒子模型（★★★）" class="headerlink" title="1.3 盒子模型（★★★）"></a>1.3 盒子模型（★★★）</h3><p>CSS3 中可以通过 box-sizing 来指定盒模型，有2个值：即可指定为 content-box、border-box，这样我们计算盒子大小的方式就发生了改变</p>
<p>可以分成两种情况：</p>
<ul>
<li>box-sizing: content-box  盒子大小为 width + padding + border  （以前默认的）</li>
<li>box-sizing: border-box  盒子大小为 width</li>
</ul>
<p>如果盒子模型我们改为了box-sizing: border-box  ， 那padding和border就不会撑大盒子了（前提padding和border不会超过width宽度）</p>
<h3 id="1-4-其他特性（★）"><a href="#1-4-其他特性（★）" class="headerlink" title="1.4 其他特性（★）"></a>1.4 其他特性（★）</h3><h4 id="1-1-图标变模糊-–-CSS3滤镜filter"><a href="#1-1-图标变模糊-–-CSS3滤镜filter" class="headerlink" title="1.1 图标变模糊  – CSS3滤镜filter"></a>1.1 图标变模糊  – CSS3滤镜filter</h4><p>filter CSS属性将模糊或颜色偏移等图形效果应用于元素</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">filter</span>:   函数(); --&gt;  例如： <span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">5px</span>);  --&gt;  blur模糊处理  数值越大越模糊</span><br></pre></td></tr></table></figure>

<p><img data-src="../images/Css/filter.png"></p>
<h4 id="1-2-计算盒子宽度-–-calc-函数"><a href="#1-2-计算盒子宽度-–-calc-函数" class="headerlink" title="1.2 计算盒子宽度 – calc 函数"></a>1.2 计算盒子宽度 – calc 函数</h4><p>calc() 此CSS函数让你在声明CSS属性值时执行一些计算</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">80px</span>);</span><br></pre></td></tr></table></figure>

<p>括号里面可以使用 + - *  / 来进行计算</p>
<p><font color='red'>注意：中间要有空格</font></p>
<h4 id="1-3-CSS3-过渡（★★★）"><a href="#1-3-CSS3-过渡（★★★）" class="headerlink" title="1.3 CSS3 过渡（★★★）"></a>1.3 CSS3 过渡（★★★）</h4><p>过渡（transition)是CSS3中具有颠覆性的特征之一，我们可以在不使用 Flash 动画或 JavaScript 的情况下，当元素从一种样式变换为另一种样式时为元素添加效果。</p>
<p><strong>过渡动画：</strong> 是从一个状态 渐渐的过渡到另外一个状态</p>
<p>可以让我们页面更好看，更动感十足，虽然 低版本浏览器不支持（ie9以下版本） 但是不会影响页面布局。</p>
<p>我们现在经常和 :hover 一起 搭配使用。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transition</span>: 要过渡的属性  花费时间  运动曲线  何时开始;</span><br></pre></td></tr></table></figure>

<ul>
<li>属性 ： 想要变化的 css 属性， 宽度高度 背景颜色 内外边距都可以 。如果想要所有的属性都变化过渡， 写一个all 就可以</li>
<li>花费时间： 单位是 秒（必须写单位） 比如 0.5s </li>
<li>运动曲线： 默认是 ease （可以省略）</li>
<li>何时开始：单位是 秒（必须写单位）可以设置延迟触发时间  默认是 0s  （可以省略）</li>
<li><strong>后面两个属性可以省略</strong></li>
<li><strong>记住过渡的使用口诀： 谁做过渡给谁加</strong></li>
</ul>
<p><img data-src="../images/Css/%E8%BF%90%E5%8A%A8%E6%9B%B2%E7%BA%BF.png"></p>
<h4 id="过渡练习"><a href="#过渡练习" class="headerlink" title="过渡练习"></a>过渡练习</h4><p><img data-src="../images/Css/%E8%BF%9B%E5%BA%A6%E6%9D%A1.png"></p>
<p>步骤：</p>
<ul>
<li>创建两个div的盒子，属于的嵌套关系，外层类名叫 bar，里层类名叫 bar_in</li>
<li>给外层的bar 这个盒子设置边框，宽高，圆角边框</li>
<li>给里层的bar_in  设置 初试的宽度，背景颜色，过渡效果</li>
<li>给外层的 bar 添加 hover事件，当触发了hover事件 让里层的bar_in 来进行宽度的变化</li>
</ul>
<p>代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> ... <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.bar</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="css">      <span class="attribute">border-radius</span>: <span class="number">7px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">padding</span>: <span class="number">1px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.bar_in</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css">      <span class="comment">/* 谁做过渡给谁加 */</span></span></span><br><span class="line"><span class="css">      <span class="attribute">transition</span>: all .<span class="number">7s</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.bar</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.bar_in</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bar&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bar_in&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="广义H5说法-了解"><a href="#广义H5说法-了解" class="headerlink" title="广义H5说法 了解"></a>广义H5说法 了解</h3><h4 id="狭隘H5"><a href="#狭隘H5" class="headerlink" title="狭隘H5"></a>狭隘H5</h4><p><img data-src="../images/Css/%E5%B9%BF%E4%B9%89H5.png"></p>
<h4 id="广义H5"><a href="#广义H5" class="headerlink" title="广义H5"></a>广义H5</h4><ul>
<li>广义的 HTML5 是 HTML5 本身 + CSS3 + JavaScript 。</li>
<li>这个集合有时称为 HTML5 和朋友，通常缩写为 HTML5 。</li>
<li>虽然 HTML5 的一些特性仍然不被某些浏览器支持，但是它是一种发展趋势。</li>
<li>HTML5 MDN 介绍：<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/HTML/HTML">https://developer.mozilla.org/zh-CN/docs/Web/Guide/HTML/HTML</a></li>
</ul>
<h3 id="1-5-2D转换"><a href="#1-5-2D转换" class="headerlink" title="1.5 2D转换"></a>1.5 2D转换</h3><h4 id="1-5-1-2D-转换之移动-translate"><a href="#1-5-1-2D-转换之移动-translate" class="headerlink" title="1.5.1 2D 转换之移动 translate"></a>1.5.1 2D 转换之移动 translate</h4><p><strong>转换（transform）</strong>是CSS3中具有颠覆性的特征之一，可以实现元素的位移、旋转、缩放等效果 （transform）你可以简单理解为变形</p>
<ul>
<li>移动：translate</li>
<li>旋转：rotate</li>
<li>缩放：scale</li>
</ul>
<p>2D移动是2D转换里面的一种功能，可以改变元素在页面中的位置，类似定位。</p>
<p><img data-src="images/2d-1.png"></p>
<p>1.5.1.1 语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(x,y); 或者分开写</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateX</span>(n);</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateY</span>(n)</span><br></pre></td></tr></table></figure>

<p>1.5.1.2 重点</p>
<ul>
<li>定义 2D 转换中的移动，沿着 X 和 Y 轴移动元素</li>
<li>translate最大的优点：不会影响到其他元素的位置</li>
<li>translate中的百分比单位是相对于自身元素的 translate:(50%,50%)</li>
<li>对行内标签没有效果</li>
</ul>
<h4 id="1-5-2-2D-转换之旋转-rotate"><a href="#1-5-2-2D-转换之旋转-rotate" class="headerlink" title="1.5.2 2D 转换之旋转 rotate"></a>1.5.2 2D 转换之旋转 rotate</h4><p>1.5.2.1 语法</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform</span>:<span class="built_in">rotate</span>(度数）</span><br></pre></td></tr></table></figure>

<p>1.5.2.2 重点</p>
<ul>
<li>rotate里面跟度数， 单位是 <strong>deg</strong> 比如 rotate(45deg)</li>
<li>角度为正时，顺时针，负时，为逆时针</li>
<li>默认旋转的中心点是元素的中心点</li>
</ul>
<p>1.5.2.3 demo</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="1-5-3-2D-转换中心点-transform-origin"><a href="#1-5-3-2D-转换中心点-transform-origin" class="headerlink" title="1.5.3 2D 转换中心点 transform-origin"></a>1.5.3 2D 转换中心点 transform-origin</h4><p>1.5.3.1 语法</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform-origin</span>: x y;</span><br></pre></td></tr></table></figure>

<p>1.5.3.2 重点</p>
<ul>
<li>注意后面的参数 x 和 y 用空格隔开</li>
<li>x y 默认转换的中心点是元素的中心点 (50% 50%)</li>
<li>还可以给x y 设置 像素 或者 方位名词 （top bottom left right center</li>
</ul>
<h4 id="1-5-4-2D-转换之缩放scale"><a href="#1-5-4-2D-转换之缩放scale" class="headerlink" title="1.5.4 2D 转换之缩放scale"></a>1.5.4 2D 转换之缩放scale</h4><p>1.5.4.1 语法</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform</span>:<span class="built_in">scale</span>(x,y);</span><br></pre></td></tr></table></figure>

<p>1.5.4.2 重点</p>
<ul>
<li>注意其中的x和y用逗号分隔</li>
<li>transform:scale(1,1) ：宽和高都放大一倍，相对于没有放大</li>
<li>transform:scale(2,2) ：宽和高都放大了2倍</li>
<li>transform:scale(2) ：只写一个参数，第二个参数则和第一个参数一样，相当于 scale(2,2)</li>
<li>transform:scale(0.5,0.5)：缩小一倍</li>
<li>sacle缩放最大的优势：可以设置转换中心点缩放，默认以中心点缩放的，而且不影响其他盒子</li>
</ul>
<h4 id="1-5-5-2D-转换综合写法"><a href="#1-5-5-2D-转换综合写法" class="headerlink" title="1.5.5 2D 转换综合写法"></a>1.5.5 2D 转换综合写法</h4><ol>
<li><p>同时使用多个转换，其格式为：transform: translate() rotate() scale() …等， </p>
</li>
<li><p>其顺序会影转换的效果。（先旋转会改变坐标轴方向）</p>
</li>
<li><p><strong>当我们同时有位移和其他属性的时候，记得要将位移放到最前面</strong></p>
</li>
</ol>
<h4 id="1-5-6-总结"><a href="#1-5-6-总结" class="headerlink" title="1.5.6 总结"></a>1.5.6 总结</h4><ul>
<li>转换transform 我们简单理解就是变形 有2D 和 3D 之分</li>
<li>我们暂且学了三个 分别是 位移 旋转 和 缩放</li>
<li>2D 移动 translate(x, y) 最大的优势是不影响其他盒子， 里面参数用%，是相对于自身宽度和高度来计算的</li>
<li>可以分开写比如 translateX(x) 和 translateY(y)</li>
<li>2D 旋转 rotate(度数) 可以实现旋转元素 度数的单位是deg</li>
<li>2D 缩放 sacle(x,y) 里面参数是数字 不跟单位 可以是小数 最大的优势 不影响其他盒子</li>
<li>设置转换中心点 transform-origin : x y; 参数可以百分比、像素或者是方位名词</li>
<li><strong>当我们进行综合写法，同时有位移和其他属性的时候，记得要将位移放到最前</strong></li>
</ul>
<h3 id="1-6-动画"><a href="#1-6-动画" class="headerlink" title="1.6 动画"></a>1.6 动画</h3><h4 id="1-6-1-动画的基本使用"><a href="#1-6-1-动画的基本使用" class="headerlink" title="1.6.1  动画的基本使用"></a>1.6.1  动画的基本使用</h4><p>制作动画分为两步： 1.先定义动画     2.再使用（调用）动画</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 用keyframes 定义动画（类似定义类选择器） */</span></span><br><span class="line"><span class="keyword">@keyframes</span> 动画名称 &#123;</span><br><span class="line"> <span class="number">0%</span>&#123;</span><br><span class="line"> <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line"> &#125; </span><br><span class="line"> <span class="number">100%</span>&#123;</span><br><span class="line"> <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-6-2-动画序列"><a href="#1-6-2-动画序列" class="headerlink" title="1.6.2 动画序列"></a>1.6.2 <strong><font color='red'>动画序列</font></strong></h4><ul>
<li>0% 是动画的开始，100% 是动画的完成。这样的规则就是动画序列。</li>
<li>在 @keyframes 中规定某项 CSS 样式，就能创建由当前样式逐渐改为新样式的动画效果。</li>
<li>动画是使元素从一种样式逐渐变化为另一种样式的效果。您可以改变任意多的样式任意多的次数。</li>
<li>请用百分比来规定变化发生的时间，或用关键词 “from” 和 “to”，等同于 0% 和 100%</li>
</ul>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>@keyframes</strong></td>
<td align="left"><strong>规定动画</strong></td>
</tr>
<tr>
<td align="left">animation</td>
<td align="left">所有动画属性的简写属性，除了animation-play-state属性</td>
</tr>
<tr>
<td align="left"><strong>animation-name</strong></td>
<td align="left"><strong>规定@keyframes动画的名称。（必须的）</strong></td>
</tr>
<tr>
<td align="left"><strong>animation-duration</strong></td>
<td align="left"><strong>规定动画完成一个周期所花费的秒或毫秒，默认是0。（必须的）</strong></td>
</tr>
<tr>
<td align="left">animation-timing-function</td>
<td align="left">规定动画的速度曲线，默认是“ease”</td>
</tr>
<tr>
<td align="left">animation-delay</td>
<td align="left">规定动画何时开始，默认是0</td>
</tr>
<tr>
<td align="left">animation-iteration-count</td>
<td align="left">规定动画被播放的次数，默认是1，还有infinite</td>
</tr>
<tr>
<td align="left">animation-direction</td>
<td align="left">规定动画是否在下一周期逆向播放，默认是“normal“,alternate逆播放</td>
</tr>
<tr>
<td align="left">animation-play-state</td>
<td align="left">规定动画是否正在运行或暂停。默认是”running”,还有”paused”</td>
</tr>
<tr>
<td align="left">animation-fill-mode</td>
<td align="left">规定动画结束后状态，保持forwards回到起始backward</td>
</tr>
</tbody></table>
<h4 id="1-6-3-动画简写属性"><a href="#1-6-3-动画简写属性" class="headerlink" title="1.6.3 动画简写属性"></a>1.6.3 动画简写属性</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">animation</span>：动画名称 持续时间 运动曲线 何时开始 播放次数 是否反方向 动画起始或者结束的状</span><br><span class="line"><span class="attribute">animation</span>: myfirst <span class="number">5s</span> linear <span class="number">2s</span> infinite alternate</span><br></pre></td></tr></table></figure>

<h4 id="1-6-4-速度曲线细节"><a href="#1-6-4-速度曲线细节" class="headerlink" title="1.6.4 速度曲线细节"></a>1.6.4 速度曲线细节</h4><table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>linear</td>
<td>动画从头到尾的速度是相同的。匀速</td>
</tr>
<tr>
<td>ease</td>
<td>默认。动画以低速开始，然后加快，在结束前变慢。</td>
</tr>
<tr>
<td>ease-in</td>
<td>动画以低速开始。</td>
</tr>
<tr>
<td>ease-out</td>
<td>动画以低速结束。</td>
</tr>
<tr>
<td>ease-in-out</td>
<td>动画以低速开始和结束。</td>
</tr>
<tr>
<td>steps()</td>
<td>指定了时间函数中的间隔数量（步长）</td>
</tr>
</tbody></table>
<h3 id="1-7-3D-转换"><a href="#1-7-3D-转换" class="headerlink" title="1.7 3D 转换"></a>1.7 3D 转换</h3><ul>
<li>3D位移: translate3d(x,y,z)</li>
<li>3D旋转: rotate3d(x,y,z)</li>
<li>透视: perspective</li>
<li>3D呈现 transfrom-style</li>
</ul>
<h4 id="1-7-1-特点"><a href="#1-7-1-特点" class="headerlink" title="1.7.1 特点"></a>1.7.1 特点</h4><ul>
<li>近大远小。</li>
<li>物体后面遮挡不可见</li>
</ul>
<p><img data-src="images/3d-1.png"></p>
<h4 id="1-7-2-三维坐标系"><a href="#1-7-2-三维坐标系" class="headerlink" title="1.7.2 三维坐标系"></a>1.7.2 三维坐标系</h4><ul>
<li>x轴：水平向右 注意： x 右边是正值，左边是负值</li>
<li>y轴：垂直向下 注意： y 下面是正值，上面是负值</li>
<li>z轴：垂直屏幕 注意： 往外面是正值，往里面是负</li>
</ul>
<p><img data-src="images/3d-2.png"></p>
<h4 id="1-7-3-3D移动-translate3d"><a href="#1-7-3-3D移动-translate3d" class="headerlink" title="1.7.3 3D移动 translate3d"></a>1.7.3 3D移动 translate3d</h4><p>3D移动在2D移动的基础上多加了一个可以移动的方向，就是z轴方向。</p>
<ul>
<li>translform:translateX(100px)：仅仅是在x轴上移动</li>
<li>translform:translateY(100px)：仅仅是在Y轴上移动</li>
<li>translform:translateZ(100px)：仅仅是在Z轴上移动（注意：translateZ一般用px单位）</li>
<li>transform:translate3d(x,y,z)：其中 x、y、z 分别指要移动的轴的方向的距离 </li>
</ul>
<p>因为z轴是垂直屏幕，由里指向外面，所以默认是看不到元素在z轴的方向上移动</p>
<h4 id="1-7-4-透视-perspective"><a href="#1-7-4-透视-perspective" class="headerlink" title="1.7.4 透视 perspective"></a>1.7.4 透视 perspective</h4><p>在2D平面产生近大远小视觉立体，但是只是效果二维的</p>
<ul>
<li>如果想要在网页产生3D效果需要透视（理解成3D物体投影在2D平面内）。</li>
<li>模拟人类的视觉位置，可认为安排一只眼睛去看 - 透视我们也称为视距：视距就是人的眼睛到屏幕的距离</li>
<li>距离视觉点越近的在电脑平面成像越大，越远成像越小 - 透视的单位是像素</li>
</ul>
<p><font color='red'><strong>透视写在被观察元素的父盒子上面的</strong><br></font></p>
<p>d：就是视距，视距就是一个距离人的眼睛到屏幕的距离。 </p>
<p>z：就是 z轴，物体距离屏幕的距离，z轴越大（正值） 我们看到的物体就越大。</p>
<p><img data-src="images/3d-3.png"></p>
<h4 id="1-7-5-translateZ"><a href="#1-7-5-translateZ" class="headerlink" title="1.7.5 translateZ"></a>1.7.5 translateZ</h4><p>translform:translateZ(100px)：仅仅是在Z轴上移动。 有了透视，就能看到translateZ 引起的变化了 </p>
<ul>
<li>translateZ：近大远小</li>
<li>translateZ：往外是正值</li>
<li>translateZ：往里是负值</li>
</ul>
<h4 id="1-7-6-3D旋转-rotate3d"><a href="#1-7-6-3D旋转-rotate3d" class="headerlink" title="1.7.6 3D旋转 rotate3d"></a>1.7.6 3D旋转 rotate3d</h4><p>3D旋转指可以让元素在三维平面内沿着 x轴，y轴，z轴或者自定义轴进行旋转</p>
<ul>
<li>transform:rotateX(45deg)：沿着x轴正方向旋转 45度</li>
<li>transform:rotateY(45deg) ：沿着y轴正方向旋转 45deg</li>
<li>transform:rotateZ(45deg) ：沿着Z轴正方向旋转 45deg</li>
<li>transform:rotate3d(x,y,z,deg)： 沿着自定义轴旋转 deg为角度（了解即可）</li>
</ul>
<p><img data-src="images/3d-4.png"></p>
<h4 id="1-7-7-3D旋转-rotate3d"><a href="#1-7-7-3D旋转-rotate3d" class="headerlink" title="1.7.7 3D旋转 rotate3d"></a>1.7.7 3D旋转 rotate3d</h4><p>对于元素旋转的方向的判断 我们需要先学习一个左手准则</p>
<ul>
<li>左手的手拇指指向 x轴的正方向</li>
<li>其余手指的弯曲方向就是该元素沿着x轴旋转的方向</li>
</ul>
<p><img data-src="images/3d-5.png"></p>
<h4 id="1-7-8-3D旋转-rotate3d"><a href="#1-7-8-3D旋转-rotate3d" class="headerlink" title="1.7.8 3D旋转 rotate3d"></a>1.7.8 3D旋转 rotate3d</h4><p>transform:rotate3d(x,y,z,deg)： 沿着自定义轴旋转 deg为角度</p>
<p>xyz是表示旋转轴的矢量，是标示你是否希望沿着该轴旋转，最后一个标示旋转的角度</p>
<ul>
<li>transform:rotate3d(1,0,0,45deg) 就是沿着x轴旋转 45deg</li>
<li>transform:rotate3d(1,1,0,45deg) 就是沿着对角线旋转 45de</li>
</ul>
<h4 id="1-7-9-3D呈现-transfrom-style"><a href="#1-7-9-3D呈现-transfrom-style" class="headerlink" title="1.7.9 3D呈现 transfrom-style"></a>1.7.9 3D呈现 transfrom-style</h4><ul>
<li>控制子元素是否开启三维立体环境。。</li>
<li>transform-style: flat 子元素不开启3d立体空间 默认的</li>
<li>transform-style: preserve-3d; 子元素开启立体空间</li>
<li>代码写给父级，但是影响的是子盒子</li>
<li>这个属性很重要，后面必用</li>
</ul>
<p><img data-src="images/3d-6.png"></p>
<h4 id="1-8-浏览器私有前缀"><a href="#1-8-浏览器私有前缀" class="headerlink" title="1.8 浏览器私有前缀"></a>1.8 浏览器私有前缀</h4><p>浏览器私有前缀是为了兼容老版本的写法，比较新版本的浏览器无须添加</p>
<ol>
<li>私有前缀</li>
</ol>
<ul>
<li>-moz-：代表 firefox 浏览器私有属性</li>
<li>-ms-：代表 ie 浏览器私有属性</li>
<li>-webkit-：代表 safari、chrome 私有属性</li>
<li>-o-：代表 Opera 私有</li>
</ul>
<ol start="2">
<li>提倡的写法</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">-moz-<span class="attribute">border-radius</span>: <span class="number">10px</span>; </span><br><span class="line">-webkit-<span class="attribute">border-radius</span>: <span class="number">10px</span>; </span><br><span class="line">-o-<span class="attribute">border-radius</span>: <span class="number">10px</span>; </span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br></pre></td></tr></table></figure>





<h2 id="二十一-移动WEB开发之流式布局"><a href="#二十一-移动WEB开发之流式布局" class="headerlink" title="二十一.移动WEB开发之流式布局"></a>二十一.移动WEB开发之流式布局</h2><h3 id="1-视口"><a href="#1-视口" class="headerlink" title="1.视口"></a>1.视口</h3><p>视口（viewport）就是浏览器显示页面内容的屏幕区域。 视口可以分为布局视口、视觉视口和理想视口</p>
<h4 id="1-1-布局视口-layout-viewport"><a href="#1-1-布局视口-layout-viewport" class="headerlink" title="1.1 布局视口 layout viewport"></a>1.1 布局视口 layout viewport</h4><ul>
<li>一般移动设备的浏览器都默认设置了一个布局视口，用于解决早期的PC端页面在手机上显示的问题。</li>
<li>iOS, Android基本都将这个视口分辨率设置为 980px，所以PC上的网页大多都能在手机上呈现，只不过元<br>素看上去很小，一般默认可以通过手动缩放网页</li>
</ul>
<p><img data-src="images/mobile1.png"></p>
<h4 id="1-2-视觉视口-visual-viewpor"><a href="#1-2-视觉视口-visual-viewpor" class="headerlink" title="1.2 视觉视口 visual viewpor"></a>1.2 视觉视口 visual viewpor</h4><ul>
<li>字面意思，它是用户正在看到的网站的区域。注意：是网站的区域。</li>
<li>我们可以通过缩放去操作视觉视口，但不会影响布局视口，布局视口仍保持原来的宽度</li>
</ul>
<p><img data-src="images/mobile2.png"></p>
<h4 id="1-3-理想视口-ideal-viewpor"><a href="#1-3-理想视口-ideal-viewpor" class="headerlink" title="1.3  理想视口 ideal viewpor"></a>1.3  理想视口 ideal viewpor</h4><ul>
<li>为了使网站在移动端有最理想的浏览和阅读宽度而设定</li>
<li>理想视口，对设备来讲，是最理想的视口尺寸</li>
<li>需要手动添写meta视口标签通知浏览器操作</li>
<li>meta视口标签的主要目的：布局视口的宽度应该与理想视口的宽度一致，简单理解就是设备有多宽，我们布<br>局的视口就多宽</li>
</ul>
<h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><ul>
<li>视口就是浏览器显示页面内容的屏幕区域</li>
<li>视口分为布局视口、视觉视口和理想视口</li>
<li>我们移动端布局想要的是理想视口就是手机屏幕有多宽，我们的布局视口就有多宽</li>
<li>想要理想视口，我们需要给我们的移动端页面添加 meta视口标签</li>
</ul>
<h4 id="1-4-meta视口标签"><a href="#1-4-meta视口标签" class="headerlink" title="1.4 meta视口标签"></a>1.4 meta视口标签</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 视口宽度和设备保持一致</span></span><br><span class="line"><span class="comment">视口的默认缩放比例1.0</span></span><br><span class="line"><span class="comment">不允许用户自行缩放</span></span><br><span class="line"><span class="comment">最大允许的缩放比例1.0</span></span><br><span class="line"><span class="comment">最小允许的缩放比例1.0 */</span></span><br><span class="line">&lt;meta name=&quot;viewport&quot; <span class="attribute">content</span>=&quot;<span class="attribute">width</span>=device-<span class="attribute">width</span>, user-scalable=no, <span class="attribute">initial</span>-scale=<span class="number">1.0</span>, maximum-scale=<span class="number">1.0</span>, minimum-scale=<span class="number">1.0</span>&quot;&gt;</span><br></pre></td></tr></table></figure>

<p><img data-src="images/mobile3.png"></p>
<h3 id="2-二倍图"><a href="#2-二倍图" class="headerlink" title="2.二倍图"></a>2.二倍图</h3><h4 id="1-物理像素-amp-物理像素比"><a href="#1-物理像素-amp-物理像素比" class="headerlink" title="1.物理像素&amp;物理像素比"></a>1.物理像素&amp;物理像素比</h4><ul>
<li>物理像素点指的是屏幕显示的最小颗粒，是物理真实存在的。这是厂商在出厂时就设置好了,比如苹果6\7\8 是 750* 1334</li>
<li>我们开发时候的1px 不是一定等于1个物理像素的</li>
<li>PC端页面，1个px 等于1个物理像素的，但是移动端就不尽相同</li>
<li>一个px的能显示的物理像素点的个数，称为物理像素比或屏幕像素比</li>
</ul>
<p><img data-src="images/mobile4.png"></p>
<ul>
<li>PC端 和 早前的手机屏幕 / 普通手机屏幕: 1CSS像素 = 1 物理像素的</li>
<li>Retina（视网膜屏幕）是一种显示技术，可以将把更多的物理像素点压缩至一块屏幕里，从<br>而达到更高的分辨率，并提高屏幕显示的细腻程度。</li>
</ul>
<p><img data-src="images/mobile5.png"></p>
<h3 id="2-背景缩放-background-size"><a href="#2-背景缩放-background-size" class="headerlink" title="2.背景缩放 background-size"></a>2.背景缩放 background-size</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-size</span>: 背景图片宽度 背景图片高度</span><br></pre></td></tr></table></figure>

<ul>
<li>单位： 长度|百分比|cover|contain;</li>
<li>cover把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。</li>
<li>contain把图像图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域</li>
</ul>
<p>3.移动端浏览器</p>
<p>移动端浏览器基本以 webkit 内核为主，因此我们就考虑webkit兼容性问题。 我们可以放心使用 H5 标签和 CSS3 样式。</p>
<p> 同时我们浏览器的私有前缀我们只需要考虑添加 webkit 即可</p>
<h3 id="4-CSS初始化-normalize-css"><a href="#4-CSS初始化-normalize-css" class="headerlink" title="4.CSS初始化 normalize.css"></a>4.CSS初始化 normalize.css</h3><p><a href="http://necolas.github.io/normalize.css/">http://necolas.github.io/normalize.css/</a></p>
<h3 id="5-特殊样式"><a href="#5-特殊样式" class="headerlink" title="5.特殊样式"></a>5.特殊样式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*CSS3盒子模型*/</span></span><br><span class="line"><span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">-webkit-<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line"><span class="comment">/*点击高亮我们需要清除清除 设置为transparent 完成透明*/</span></span><br><span class="line">-webkit-tap-highlight-<span class="attribute">color</span>: transparent;</span><br><span class="line"><span class="comment">/*在移动端浏览器默认的外观在iOS上加上这个属性才能给按钮和输入框自定义样式*/</span></span><br><span class="line">-webkit-appearance: none;</span><br><span class="line"><span class="comment">/*禁用长按页面时的弹出菜单*/</span></span><br><span class="line"><span class="selector-tag">img</span>,<span class="selector-tag">a</span> &#123; -webkit-touch-callout: none; &#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-流式布局"><a href="#6-流式布局" class="headerlink" title="6.流式布局"></a>6.流式布局</h3><ul>
<li>流式布局，就是百分比布局，也称非固定像素布局。</li>
<li>通过盒子的宽度设置成百分比来根据屏幕的宽度来进行伸缩，不受固定像素的限制，内容向两侧填充。</li>
<li>流式布局方式是移动web开发使用的比较常见的布局方式。</li>
</ul>
<p><img data-src="images/mobile6.png"></p>
<h2 id="二十二-flex布局"><a href="#二十二-flex布局" class="headerlink" title="二十二.flex布局"></a>二十二.flex布局</h2><h3 id="1-布局原理"><a href="#1-布局原理" class="headerlink" title="1.布局原理"></a>1.布局原理</h3><p>flex 是 flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性，任何一个容器都可以 指定为 flex 布局</p>
<ul>
<li>当我们为父盒子设为 flex 布局以后，子元素的 float、clear 和 vertical-align 属性将失效。</li>
<li>伸缩布局 = 弹性布局 = 伸缩盒布局 = 弹性盒布局 =flex布局</li>
</ul>
<p>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成 员，称为 Flex 项目（flex item），简称”项目”。</p>
<p><img data-src="images/flex1.png"></p>
<p>总结：就是通过给父盒子添加flex属性，来控制子盒 子的位置和排列方式</p>
<p>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做<code>main start</code>，结束位置叫做<code>main end</code>；交叉轴的开始位置叫做<code>cross start</code>，结束位置叫做<code>cross end</code>。</p>
<p>项目默认沿主轴排列。单个项目占据的主轴空间叫做<code>main size</code>，占据的交叉轴空间叫做<code>cross size</code>。</p>
<p><img data-src="images/flex2.png"></p>
<h3 id="2-flex布局父项常见属性（★★★）"><a href="#2-flex布局父项常见属性（★★★）" class="headerlink" title="2.flex布局父项常见属性（★★★）"></a>2.flex布局父项常见属性（★★★）</h3><ul>
<li>flex-direction：设置主轴的方向</li>
<li>justify-content：设置主轴上的子元素排列方式</li>
<li>flex-wrap：设置子元素是否换行</li>
<li>align-content：设置侧轴上的子元素的排列方式（多行）</li>
<li>align-items：设置侧轴上的子元素排列方式（单行）</li>
<li>flex-flow：复合属性，相当于同时设置了 flex-direction 和 flex-wrap</li>
</ul>
<h4 id="2-1-flex-direction-设置主轴的方向"><a href="#2-1-flex-direction-设置主轴的方向" class="headerlink" title="2.1 flex-direction 设置主轴的方向"></a>2.1 flex-direction 设置主轴的方向</h4><h5 id="主轴与侧轴"><a href="#主轴与侧轴" class="headerlink" title="主轴与侧轴"></a>主轴与侧轴</h5><p>在 flex 布局中，是分为主轴和侧轴两个方向，同样的叫法有 ： 行和列、x 轴和y 轴</p>
<ul>
<li>默认主轴方向就是 x 轴方向，水平向右</li>
<li>默认侧轴方向就是 y 轴方向，水平向下</li>
</ul>
<h4 id="2-2-flex-direction-设置主轴的方向"><a href="#2-2-flex-direction-设置主轴的方向" class="headerlink" title="2.2 flex-direction 设置主轴的方向"></a>2.2 flex-direction 设置主轴的方向</h4><p>flex-direction 属性决定主轴的方向（即项目的排列方向） </p>
<p>注意： 主轴和侧轴是会变化的，就看 flex-direction 设置谁为主轴，剩下的就是侧轴。而我们的子元素是跟着主轴来排列的</p>
<table>
<thead>
<tr>
<th align="center">属性值</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">row</td>
<td align="center">默认值从左</td>
</tr>
<tr>
<td align="center">row-reverse</td>
<td align="center">从右到左</td>
</tr>
<tr>
<td align="center">column</td>
<td align="center">从上到下</td>
</tr>
<tr>
<td align="center">column-reverse</td>
<td align="center">从下到上</td>
</tr>
</tbody></table>
<p><img data-src="images/flex3.png"></p>
<h4 id="2-3-justify-content-设置主轴上的子元素排列方式"><a href="#2-3-justify-content-设置主轴上的子元素排列方式" class="headerlink" title="2.3 justify-content 设置主轴上的子元素排列方式"></a>2.3 justify-content 设置主轴上的子元素排列方式</h4><p>justify-content 属性定义了项目在主轴上的对齐方式 </p>
<p><font color='red'>注意： 使用这个属性之前一定要确定好主轴是哪个</font></p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>flex-start</td>
<td>从头部开始 如果主轴是x轴，则从左到右（默认值）</td>
</tr>
<tr>
<td>flex-end</td>
<td>从尾部开始排列</td>
</tr>
<tr>
<td>center</td>
<td>在主轴居中对齐（如果主轴是x轴则 水平居中)</td>
</tr>
<tr>
<td>space-around</td>
<td>平分剩余空间（只有 flex 元素之间的空间是相等的）</td>
</tr>
<tr>
<td>space-between</td>
<td>先两边贴边 再平分剩余空间</td>
</tr>
<tr>
<td>space-evenly</td>
<td>平分剩余空间</td>
</tr>
</tbody></table>
<p><img data-src="images/flex4.png"></p>
<h5 id="space-around-和-space-evenly-的区别"><a href="#space-around-和-space-evenly-的区别" class="headerlink" title="space-around 和 space-evenly 的区别"></a>space-around 和 space-evenly 的区别</h5><p><img data-src="images/flex13.png"></p>
<h4 id="2-4-flex-wrap-设置子元素是否换行"><a href="#2-4-flex-wrap-设置子元素是否换行" class="headerlink" title="2.4  flex-wrap 设置子元素是否换行"></a>2.4  flex-wrap 设置子元素是否换行</h4><p>默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，flex布局中默认是不换行的</p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>nowrap</td>
<td>默认值，不换行</td>
</tr>
<tr>
<td>wrap</td>
<td>换行</td>
</tr>
<tr>
<td>wrap-reverse</td>
<td>换行，第一行在下方。</td>
</tr>
</tbody></table>
<p><img data-src="images/flex5.png"></p>
<p><img data-src="images/flex6.png"></p>
<h4 id="2-5-align-items-设置侧轴上的子元素排列方式（单行-）"><a href="#2-5-align-items-设置侧轴上的子元素排列方式（单行-）" class="headerlink" title="2.5 align-items 设置侧轴上的子元素排列方式（单行 ）"></a>2.5 align-items 设置侧轴上的子元素排列方式（单行 ）</h4><p>设置子项在侧轴上的排列方式 并且只能用于子项出现 换行 的情况（多行），在单行下是没有效果的</p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>flex-start</td>
<td>从上到下</td>
</tr>
<tr>
<td>flex-end</td>
<td>从下到上</td>
</tr>
<tr>
<td>center</td>
<td>挤在一起居中（垂直居中)</td>
</tr>
<tr>
<td>stretch</td>
<td>拉伸 （默认值 ）</td>
</tr>
<tr>
<td>baseline</td>
<td>项目的第一行文字的基线对齐</td>
</tr>
</tbody></table>
<p><img data-src="images/flex7.png"></p>
<h4 id="2-6-align-content-设置侧轴上的子元素的排列方式（多行）"><a href="#2-6-align-content-设置侧轴上的子元素的排列方式（多行）" class="headerlink" title="2.6 align-content 设置侧轴上的子元素的排列方式（多行）"></a>2.6 align-content 设置侧轴上的子元素的排列方式（多行）</h4><p>设置子项在侧轴上的排列方式 并且只能用于子项出现 换行 的情况（多行），在单行下是没有效果的</p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>flex-start</td>
<td>默认值在侧轴的头部开始排列</td>
</tr>
<tr>
<td>flex-end</td>
<td>在侧轴的尾部开始排列</td>
</tr>
<tr>
<td>center</td>
<td>在侧轴中间显示</td>
</tr>
<tr>
<td>space-around</td>
<td>子项在侧轴平分剩余空间</td>
</tr>
<tr>
<td>space-between</td>
<td>子项在侧轴先分布在两头，再平分剩余空间</td>
</tr>
<tr>
<td>stretch</td>
<td>设置子项元素高度平分父元素高度（默认值）</td>
</tr>
</tbody></table>
<p><img data-src="images/flex8.png"></p>
<h4 id="2-7-align-content-和-align-items-区别"><a href="#2-7-align-content-和-align-items-区别" class="headerlink" title="2.7 align-content 和 align-items 区别"></a>2.7 align-content 和 align-items 区别</h4><ul>
<li>align-items 适用于单行情况下， 只有上对齐、下对齐、居中和 拉伸</li>
<li>align-content 适应于换行（多行）的情况下（单行情况下无效）， 可以设置 上对齐、 下对齐、居中、拉伸以及平均分<br>配剩余空间等属性值。</li>
<li>总结就是单行找 align-items 多行找 align-content</li>
</ul>
<h4 id="2-8-flex-flow"><a href="#2-8-flex-flow" class="headerlink" title="2.8 flex-flow"></a>2.8 flex-flow</h4><p>flex-flow 属性是 flex-direction 和 flex-wrap 属性的复合属性</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">flex-flow</span>:row wrap;</span><br></pre></td></tr></table></figure>

<h4 id="2-9-总结"><a href="#2-9-总结" class="headerlink" title="2.9 总结"></a>2.9 总结</h4><ul>
<li>flex-direction：设置主轴的方向</li>
<li>justify-content：设置主轴上的子元素排列方式</li>
<li>flex-wrap：设置子元素是否换行 - align-content：设置侧轴上的子元素的排列方式（多行）</li>
<li>align-items：设置侧轴上的子元素排列方式（单行）</li>
<li>flex-flow：复合属性，相当于同时设置了 flex-direction 和 flex-w</li>
</ul>
<h3 id="3-flex布局子项常见属性（★★★）"><a href="#3-flex布局子项常见属性（★★★）" class="headerlink" title="3.flex布局子项常见属性（★★★）"></a>3.flex布局子项常见属性（★★★）</h3><ul>
<li>flex 子项目占的份数</li>
<li>align-self 控制子项自己在侧轴的排列方式</li>
<li>order属性定义子项的排列顺序（前后顺序）</li>
<li>flex-grow</li>
<li>flex-shrink</li>
<li>flex-basis</li>
</ul>
<h4 id="3-1-flex-属性"><a href="#3-1-flex-属性" class="headerlink" title="3.1  flex 属性"></a>3.1  flex 属性</h4><p><code>flex</code>属性是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。后两个属性可选。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line"> <span class="attribute">flex</span>: &lt;number&gt;; <span class="comment">/* default 0 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该属性有两个快捷值：<code>auto</code> (<code>1 1 auto</code>) 和 none (<code>0 0 auto</code>)。</p>
<p>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p>
<h4 id="3-2-align-self-控制子项自己在侧轴上的排列方式"><a href="#3-2-align-self-控制子项自己在侧轴上的排列方式" class="headerlink" title="3.2 align-self 控制子项自己在侧轴上的排列方式"></a>3.2 align-self 控制子项自己在侧轴上的排列方式</h4><p>align-self 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖 align-items 属性。 </p>
<p>默认值为 auto，表示继承父元素的 align-items 属性，如果没有父元素，则等同于 stretch</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">span</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line"> <span class="comment">/* 设置自己在侧轴上的排列方式 */</span></span><br><span class="line"> <span class="attribute">align-self</span>: flex-end;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="images/flex9.png"></p>
<h4 id="3-3-order-属性定义项目的排列顺序"><a href="#3-3-order-属性定义项目的排列顺序" class="headerlink" title="3.3 order 属性定义项目的排列顺序"></a>3.3 order 属性定义项目的排列顺序</h4><p>数值越小，排列越靠前，默认为0。 注意：和 z-index 不一样</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line"> <span class="attribute">order</span>: &lt;number&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="images/flex10.png"></p>
<h4 id="3-4-flex-grow"><a href="#3-4-flex-grow" class="headerlink" title="3.4 flex-grow"></a>3.4 flex-grow</h4><p><code>flex-grow</code>属性定义项目的放大比例，默认为<code>0</code>，即如果存在剩余空间，也不放大。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: &lt;number&gt;; <span class="comment">/* default 0 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="images/flex11.png"></p>
<p>如果所有项目的<code>flex-grow</code>属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的<code>flex-grow</code>属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p>
<h4 id="3-5-flex-shrink"><a href="#3-5-flex-shrink" class="headerlink" title="3.5 flex-shrink"></a>3.5 flex-shrink</h4><p><code>flex-shrink</code>属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: &lt;number&gt;; <span class="comment">/* default 1 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="images/flex12.png"></p>
<p>如果所有项目的<code>flex-shrink</code>属性都为1，当空间不足时，都将等比例缩小。如果一个项目的<code>flex-shrink</code>属性为0，其他项目都为1，则空间不足时，前者不缩小。负值对该属性无效。</p>
<h4 id="3-6-flex-basis"><a href="#3-6-flex-basis" class="headerlink" title="3.6 flex-basis"></a>3.6 flex-basis</h4><p><code>flex-basis</code>属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code>auto</code>，即项目的本来大小。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-basis</span>: &lt;length&gt; | auto; <span class="comment">/* default auto */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>它可以设为跟<code>width</code>或<code>height</code>属性一样的值（比如350px），则项目将占据固定空间。</p>
<h2 id="二十三-rem适配布局"><a href="#二十三-rem适配布局" class="headerlink" title="二十三 rem适配布局"></a>二十三 rem适配布局</h2><h3 id="1-rem-基础"><a href="#1-rem-基础" class="headerlink" title="1.rem 基础"></a>1.rem 基础</h3><p>rem 单位 1. rem 基础 rem (root em)是一个相对单位，类似于em，em是父元素字体大小。 </p>
<p>不同的是rem的基准是相对于html元素的字体大小。 </p>
<p>比如，根元素（html）设置font-size=12px; 非根元素设置width:2rem; 则换成px表示就是24px。 </p>
<p>rem的优势：父元素文字大小可能不一致， 但是整个页面只有一个html，可以很好来控制整个页面的元素大小</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 根html 为 12px */</span></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line"> <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 此时 div 的字体大小就是 24px */</span> </span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"> <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-媒体查询"><a href="#2-媒体查询" class="headerlink" title="2.媒体查询"></a>2.媒体查询</h3><h4 id="2-1-媒体查询（Media-Query）是CSS3新语法。"><a href="#2-1-媒体查询（Media-Query）是CSS3新语法。" class="headerlink" title="2.1 媒体查询（Media Query）是CSS3新语法。"></a>2.1 媒体查询（Media Query）是CSS3新语法。</h4><ul>
<li>使用 @media 查询，可以针对不同的媒体类型定义不同的样式</li>
<li>@media 可以针对不同的屏幕尺寸设置不同的样式</li>
<li>当你重置浏览器大小的过程中，页面也会根据浏览器的宽度和高度重新渲染页面</li>
<li>目前针对很多苹果手机、Android手机，平板等设备都用得到多媒体查询</li>
</ul>
<h4 id="2-2-语法规范"><a href="#2-2-语法规范" class="headerlink" title="2.2 语法规范"></a>2.2 语法规范</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> mediatype <span class="keyword">and</span>|<span class="keyword">not</span>|<span class="keyword">only</span> (media feature) &#123;</span><br><span class="line"> CSS-<span class="selector-tag">Code</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>用 @media 开头 注意@符号</li>
<li>mediatype 媒体类型</li>
<li>关键字 and not only</li>
<li>media feature 媒体特性 必须有小括号包含</li>
</ul>
<h5 id="2-2-1-mediatype-查询类型"><a href="#2-2-1-mediatype-查询类型" class="headerlink" title="2.2.1 mediatype 查询类型"></a>2.2.1 mediatype 查询类型</h5><p>将不同的终端设备划分成不同的类型，称为媒体类型</p>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>all</td>
<td>用于所有设备</td>
</tr>
<tr>
<td>print</td>
<td>用于打印机和打印预览</td>
</tr>
<tr>
<td>scree</td>
<td>用于电脑屏幕，平板电脑，智能手机等</td>
</tr>
</tbody></table>
<h5 id="2-2-2-关键字"><a href="#2-2-2-关键字" class="headerlink" title="2.2.2  关键字"></a>2.2.2  关键字</h5><p>关键字将媒体类型或多个媒体特性连接到一起做为媒体查询的条件</p>
<ul>
<li>and：可以将多个媒体特性连接到一起，相当于“且”的意思。</li>
<li>not：排除某个媒体类型，相当于“非”的意思，可以省略。</li>
<li>only：指定某个特定的媒体类型，可以省略。 </li>
</ul>
<h5 id="2-2-3-媒体特性"><a href="#2-2-3-媒体特性" class="headerlink" title="2.2.3  媒体特性"></a>2.2.3  媒体特性</h5><p>每种媒体类型都具体各自不同的特性，根据不同媒体类型的媒体特性设置不同的展示风格</p>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>width</td>
<td>定义输出设备中页面可见区域的宽度</td>
</tr>
<tr>
<td>min-width</td>
<td>定义输出设备中页面最小可见区域宽度</td>
</tr>
<tr>
<td>max-width</td>
<td>定义输出设备中页面最大可见区域宽度</td>
</tr>
</tbody></table>
<h2 id="二十四-Less-基础"><a href="#二十四-Less-基础" class="headerlink" title="二十四 Less 基础"></a>二十四 Less 基础</h2><h3 id="1-Less-介绍"><a href="#1-Less-介绍" class="headerlink" title="1. Less 介绍"></a>1. Less 介绍</h3><p>Less （Leaner Style Sheets 的缩写） 是一门 CSS 扩展语言，也成为CSS预处理器。 </p>
<p>做为 CSS 的一种形式的扩展，它并没有减少 CSS 的功能，而是在现有的 CSS 语法上，为CSS加入程序式语言的 特性。 </p>
<p>它在 CSS 的语法基础之上，引入了变量，Mixin（混入），运算以及函数等功能，大大简化了 CSS 的编写，并且 降低了 CSS 的维护成本，就像它的名称所说的那样，Less 可以让我们用更少的代码做更多的事情。</p>
<p>Less中文网址： <a href="http://lesscss.cn/">http://lesscss.cn</a></p>
<h4 id="2-Less-安装"><a href="#2-Less-安装" class="headerlink" title="2. Less 安装"></a>2. Less 安装</h4><p>① 安装nodejs，可选择版本(8.0)，网址：<a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a><br>② 检查是否安装成功，使用cmd命令（win10 是 window +r 打开 运行输入cmd） — 输入“ node –v ”查看版本即可<br>③ 基于nodejs在线安装Less，使用cmd命令“ npm install -g less ”即可<br>④ 检查是否安装成功，使用cmd命令“ lessc -v ”查看版本即可</p>
<h4 id="3-Less-变量"><a href="#3-Less-变量" class="headerlink" title="3. Less 变量"></a>3. Less 变量</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">@变量名:值;</span><br><span class="line"><span class="keyword">@color</span>: pink</span><br><span class="line"></span><br><span class="line">//直接使用</span><br><span class="line">body&#123;</span><br><span class="line"> <span class="attribute">color</span>:@color;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line"> <span class="attribute">color</span>:@color;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>

<ul>
<li>必须有@为前缀</li>
<li>不能包含特殊字符</li>
<li>不能以数字开头</li>
<li>大小写敏感</li>
</ul>
<h4 id="4-Less-嵌套"><a href="#4-Less-嵌套" class="headerlink" title="4. Less 嵌套"></a>4. Less 嵌套</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#header</span> <span class="selector-class">.logo</span> &#123;</span><br><span class="line"> <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line">Less 嵌套写法</span><br><span class="line"><span class="selector-id">#header</span> &#123;</span><br><span class="line"> <span class="selector-class">.logo</span> &#123;</span><br><span class="line"> <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果遇见 （交集|伪类|伪元素选择器） </p>
<ul>
<li>内层选择器的前面没有 &amp; 符号，则它被解析为父选择器的后代； </li>
<li>如果有 &amp; 符号，它就被解析为父元素自身或父元素的伪类。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line"> <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line">Less 嵌套写法</span><br><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line"> &amp;<span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line"> <span class="attribute">color</span>:red;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-Less-运算"><a href="#5-Less-运算" class="headerlink" title="5.Less 运算"></a>5.Less 运算</h4><p>任何数字、颜色或者变量都可以参与运算。就是Less提供了加（+）、减（-）、乘（*）、除（/）算术运算</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*Less 里面写*/</span></span><br><span class="line"><span class="keyword">@witdh</span>: <span class="number">10px</span> + <span class="number">5</span>;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"> <span class="attribute">border</span>: @witdh solid red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*生成的css*/</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"> <span class="attribute">border</span>: <span class="number">15px</span> solid red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Less 甚至还可以这样 */</span></span><br><span class="line"><span class="attribute">width</span>: (@width + <span class="number">5</span>) * <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p><font color='red'><strong>注意：</strong></font></p>
<ul>
<li>乘号（*）和除号（/）的写法</li>
<li>运算符中间左右有个空格隔开 1px + 5</li>
<li>对于两个不同的单位的值之间的运算，运算结果的值取第一个值的单位</li>
<li>如果两个值之间只有一个值有单位，则运算结果就取该单位</li>
</ul>
<h2 id="常用命名推荐"><a href="#常用命名推荐" class="headerlink" title="常用命名推荐"></a>常用命名推荐</h2><table>
<thead>
<tr>
<th>ClassName</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>about</td>
<td>关于</td>
</tr>
<tr>
<td>account</td>
<td>账户</td>
</tr>
<tr>
<td>arrow</td>
<td>箭头图标</td>
</tr>
<tr>
<td>article</td>
<td>文章</td>
</tr>
<tr>
<td>aside</td>
<td>边栏</td>
</tr>
<tr>
<td>audio</td>
<td>音频</td>
</tr>
<tr>
<td>avatar</td>
<td>头像</td>
</tr>
<tr>
<td>bg,background</td>
<td>背景</td>
</tr>
<tr>
<td>bar</td>
<td>栏（工具类）</td>
</tr>
<tr>
<td>branding</td>
<td>品牌化</td>
</tr>
<tr>
<td>crumb,breadcrumbs</td>
<td>面包屑</td>
</tr>
<tr>
<td>btn,button</td>
<td>按钮</td>
</tr>
<tr>
<td>caption</td>
<td>标题，说明</td>
</tr>
<tr>
<td>category</td>
<td>分类</td>
</tr>
<tr>
<td>chart</td>
<td>图表</td>
</tr>
<tr>
<td>clearfix</td>
<td>清除浮动</td>
</tr>
<tr>
<td>close</td>
<td>关闭</td>
</tr>
<tr>
<td>col,column</td>
<td>列</td>
</tr>
<tr>
<td>comment</td>
<td>评论</td>
</tr>
<tr>
<td>community</td>
<td>社区</td>
</tr>
<tr>
<td>container</td>
<td>容器</td>
</tr>
<tr>
<td>content</td>
<td>内容</td>
</tr>
<tr>
<td>copyright</td>
<td>版权</td>
</tr>
<tr>
<td>current</td>
<td>当前态，选中态</td>
</tr>
<tr>
<td>default</td>
<td>默认</td>
</tr>
<tr>
<td>description</td>
<td>描述</td>
</tr>
<tr>
<td>details</td>
<td>细节</td>
</tr>
<tr>
<td>disabled</td>
<td>不可用</td>
</tr>
<tr>
<td>entry</td>
<td>文章，博文</td>
</tr>
<tr>
<td>error</td>
<td>错误</td>
</tr>
<tr>
<td>even</td>
<td>偶数，常用于多行列表或表格中</td>
</tr>
<tr>
<td>fail</td>
<td>失败（提示）</td>
</tr>
<tr>
<td>feature</td>
<td>专题</td>
</tr>
<tr>
<td>fewer</td>
<td>收起</td>
</tr>
<tr>
<td>field</td>
<td>用于表单的输入区域</td>
</tr>
<tr>
<td>figure</td>
<td>图</td>
</tr>
<tr>
<td>filter</td>
<td>筛选</td>
</tr>
<tr>
<td>first</td>
<td>第一个，常用于列表中</td>
</tr>
<tr>
<td>footer</td>
<td>页脚</td>
</tr>
<tr>
<td>forum</td>
<td>论坛</td>
</tr>
<tr>
<td>gallery</td>
<td>画廊</td>
</tr>
<tr>
<td>group</td>
<td>模块，清除浮动</td>
</tr>
<tr>
<td>header</td>
<td>页头</td>
</tr>
<tr>
<td>help</td>
<td>帮助</td>
</tr>
<tr>
<td>hide</td>
<td>隐藏</td>
</tr>
<tr>
<td>hightlight</td>
<td>高亮</td>
</tr>
<tr>
<td>home</td>
<td>主页</td>
</tr>
<tr>
<td>icon</td>
<td>图标</td>
</tr>
<tr>
<td>info,information</td>
<td>信息</td>
</tr>
<tr>
<td>last</td>
<td>最后一个，常用于列表中</td>
</tr>
<tr>
<td>links</td>
<td>链接</td>
</tr>
<tr>
<td>login</td>
<td>登录</td>
</tr>
<tr>
<td>logout</td>
<td>退出</td>
</tr>
<tr>
<td>logo</td>
<td>标志</td>
</tr>
<tr>
<td>main</td>
<td>主体</td>
</tr>
<tr>
<td>menu</td>
<td>菜单</td>
</tr>
<tr>
<td>meta</td>
<td>作者、更新时间等信息栏，一般位于标题之下</td>
</tr>
<tr>
<td>module</td>
<td>模块</td>
</tr>
<tr>
<td>more</td>
<td>更多（展开）</td>
</tr>
<tr>
<td>msg,message</td>
<td>消息</td>
</tr>
<tr>
<td>nav,navigation</td>
<td>导航</td>
</tr>
<tr>
<td>next</td>
<td>下一页</td>
</tr>
<tr>
<td>nub</td>
<td>小块</td>
</tr>
<tr>
<td>odd</td>
<td>奇数，常用于多行列表或表格中</td>
</tr>
<tr>
<td>off</td>
<td>鼠标离开</td>
</tr>
<tr>
<td>on</td>
<td>鼠标移过</td>
</tr>
<tr>
<td>output</td>
<td>输出</td>
</tr>
<tr>
<td>pagination</td>
<td>分页</td>
</tr>
<tr>
<td>pop,popup</td>
<td>弹窗</td>
</tr>
<tr>
<td>preview</td>
<td>预览</td>
</tr>
<tr>
<td>previous</td>
<td>上一页</td>
</tr>
<tr>
<td>primary</td>
<td>主要</td>
</tr>
<tr>
<td>progress</td>
<td>进度条</td>
</tr>
<tr>
<td>promotion</td>
<td>促销</td>
</tr>
<tr>
<td>rcommd,recommendations</td>
<td>推荐</td>
</tr>
<tr>
<td>reg,register</td>
<td>注册</td>
</tr>
<tr>
<td>save</td>
<td>保存</td>
</tr>
<tr>
<td>search</td>
<td>搜索</td>
</tr>
<tr>
<td>secondary</td>
<td>次要</td>
</tr>
<tr>
<td>section</td>
<td>区块</td>
</tr>
<tr>
<td>selected</td>
<td>已选</td>
</tr>
<tr>
<td>share</td>
<td>分享</td>
</tr>
<tr>
<td>show</td>
<td>显示</td>
</tr>
<tr>
<td>sidebar</td>
<td>边栏，侧栏</td>
</tr>
<tr>
<td>slide</td>
<td>幻灯片，图片切换</td>
</tr>
<tr>
<td>sort</td>
<td>排序</td>
</tr>
<tr>
<td>sub</td>
<td>次级的，子级的</td>
</tr>
<tr>
<td>submit</td>
<td>提交</td>
</tr>
<tr>
<td>subscribe</td>
<td>订阅</td>
</tr>
<tr>
<td>subtitle</td>
<td>副标题</td>
</tr>
<tr>
<td>success</td>
<td>成功（提示）</td>
</tr>
<tr>
<td>summary</td>
<td>摘要</td>
</tr>
<tr>
<td>tab</td>
<td>标签页</td>
</tr>
<tr>
<td>table</td>
<td>表格</td>
</tr>
<tr>
<td>txt,text</td>
<td>文本</td>
</tr>
<tr>
<td>thumbnail</td>
<td>缩略图</td>
</tr>
<tr>
<td>time</td>
<td>时间</td>
</tr>
<tr>
<td>tips</td>
<td>提示</td>
</tr>
<tr>
<td>title</td>
<td>标题</td>
</tr>
<tr>
<td>video</td>
<td>视频</td>
</tr>
<tr>
<td>wrap</td>
<td>容器，包，一般用于最外层</td>
</tr>
<tr>
<td>wrapper</td>
<td>容器，包，一般用于最外层</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>css</tag>
      </tags>
  </entry>
</search>
