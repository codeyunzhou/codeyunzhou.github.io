<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>RocketMQ</title>
    <url>/post/8/</url>
    <content><![CDATA[<h1 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h1><h2 id="一-MQ概述"><a href="#一-MQ概述" class="headerlink" title="一.MQ概述"></a>一.MQ概述</h2><h3 id="1-MQ简介"><a href="#1-MQ简介" class="headerlink" title="1.MQ简介"></a>1.MQ简介</h3><p> MQ(Message Queue)，是一种提供消息队列服务的中间件，也称为消息中间件，是一套提供了消息生 产、存储、消费全过程API的软件系统。消息即数据。一般消息的体量不会很大。 </p>
<h3 id="2-MQ用途"><a href="#2-MQ用途" class="headerlink" title="2.MQ用途"></a>2.MQ用途</h3><p>从网上可以查看到很多的关于MQ用途的叙述，但总结起来其实就以下三点。 </p>
<ul>
<li><strong>限流削峰</strong> </li>
</ul>
<p>​        MQ可以将系统的超量请求暂存其中，以便系统后期可以慢慢进行处理，从而避免了请求的丢失或系统 被压垮。</p>
<ul>
<li><p><strong>异步解耦</strong></p>
<p>上游系统对下游系统的调用若为同步调用，则会大大降低系统的吞吐量与并发度，且系统耦合度太高。 而异步调用则会解决这些问题。所以两层之间若要实现由同步到异步的转化，一般性做法就是，在这两 层间添加一个MQ层。</p>
</li>
<li><p><strong>数据收集</strong></p>
<p>分布式系统会产生海量级数据流，如：业务日志、监控数据、用户行为等。针对这些数据流进行实时或 批量采集汇总，然后对这些数据流进行大数据分析，这是当前互联网平台的必备技术。通过MQ完成此 类数据收集是最好的选择。</p>
<span id="more"></span></li>
</ul>
<h3 id="3-MQ常见协议"><a href="#3-MQ常见协议" class="headerlink" title="3.MQ常见协议"></a>3.MQ常见协议</h3><ul>
<li><p><strong>JMS</strong></p>
<p>JMS，Java Messaging Service（Java消息服务）。是Java平台上有关MOM（Message Oriented Middleware，面向消息的中间件 PO/OO/AO）的技术规范，它便于消息系统中的Java应用程序进行消 息交换，并且通过提供标准的产生、发送、接收消息的接口，简化企业应用的开发。ActiveMQ是该协 议的典型实现。</p>
</li>
<li><p><strong>STOMP</strong></p>
<p>STOMP，Streaming Text Orientated Message Protocol（面向流文本的消息协议），是一种MOM设计 的简单文本协议。STOMP提供一个可互操作的连接格式，允许客户端与任意STOMP消息代理 （Broker）进行交互。ActiveMQ是该协议的典型实现，RabbitMQ通过插件可以支持该协议。</p>
</li>
<li><p><strong>AMQP</strong></p>
<p>AMQP，Advanced Message Queuing Protocol（高级消息队列协议），一个提供统一消息服务的应用 层标准，是应用层协议的一个开放标准，是一种MOM设计。基于此协议的客户端与消息中间件可传递 消息，并不受客户端/中间件不同产品，不同开发语言等条件的限制。 RabbitMQ是该协议的典型实 现。</p>
</li>
<li><p><strong>MQTT</strong></p>
<p>MQTT，Message Queuing Telemetry Transport（消息队列遥测传输），是IBM开发的一个即时通讯协 议，是一种二进制协议，主要用于服务器和低功耗IoT（物联网）设备间的通信。该协议支持所有平 台，几乎可以把所有联网物品和外部连接起来，被用来当做传感器和致动器的通信协议。 RabbitMQ通 过插件可以支持该协议。</p>
</li>
</ul>
<h2 id="二-RocketMQ基本概念"><a href="#二-RocketMQ基本概念" class="headerlink" title="二.RocketMQ基本概念"></a>二.RocketMQ基本概念</h2><h3 id="1-消息（Message）"><a href="#1-消息（Message）" class="headerlink" title="1 消息（Message）"></a>1 消息（Message）</h3><p>消息是指，消息系统所传输信息的物理载体，生产和消费数据的最小单位，每条消息必须属于一个主 题。</p>
<h3 id="2-主题（Topic）"><a href="#2-主题（Topic）" class="headerlink" title="2 主题（Topic）"></a>2 主题（Topic）</h3><p>Topic表示一类消息的集合，每个主题包含若干条消息，每条消息只能属于一个主题，是RocketMQ进行 消息订阅的基本单位。 topic:message 1:n message:topic 1:</p>
<p>1 一个生产者可以同时发送多种Topic的消息；而一个消费者只对某种特定的Topic感兴趣，即只可以订阅 和消费一种Topic的消息。 producer:topic 1:n consumer:topic 1:1</p>
<h3 id="3-标签（Tag）"><a href="#3-标签（Tag）" class="headerlink" title="3 标签（Tag）"></a>3 标签（Tag）</h3><p>为消息设置的标签，用于同一主题下区分不同类型的消息。来自同一业务单元的消息，可以根据不同业 务目的在同一主题下设置不同标签。标签能够有效地保持代码的清晰度和连贯性，并优化RocketMQ提 供的查询系统。消费者可以根据Tag实现对不同子主题的不同消费逻辑，实现更好的扩展性。 </p>
<p>Topic是消息的一级分类，Tag是消息的二级分类。</p>
<h3 id="4-队列（Queue）"><a href="#4-队列（Queue）" class="headerlink" title="4 队列（Queue）"></a>4 队列（Queue）</h3><p>存储消息的物理实体。一个Topic中可以包含多个Queue，每个Queue中存放的就是该Topic的消息。一 个Topic的Queue也被称为一个Topic中消息的分区（Partition）。 </p>
<p>一个Topic的Queue中的消息只能被一个消费者组中的一个消费者消费。一个Queue中的消息不允许同 一个消费者组中的多个消费者同时消费。</p>
<h5 id="分片（Sharding）"><a href="#分片（Sharding）" class="headerlink" title="分片（Sharding）"></a>分片（Sharding）</h5><p>分片不同于分区。在RocketMQ 中，分片指的是存放相应Topic的Broker。每个分片中会创建出相应数量的分区，即Queue，每个 Queue的大小都是相同的。</p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/RocketMQ/1.png"></p>
<h3 id="5-消息标识（MessageId-Key）"><a href="#5-消息标识（MessageId-Key）" class="headerlink" title="5 消息标识（MessageId/Key）"></a>5 消息标识（MessageId/Key）</h3><p>RocketMQ中每个消息拥有唯一的MessageId，且可以携带具有业务标识的Key，以方便对消息的查询。 不过需要注意的是，MessageId有两个：在生产者send()消息时会自动生成一个MessageId（msgId)， 当消息到达Broker后，Broker也会自动生成一个MessageId(offsetMsgId)。msgId、offsetMsgId与key都 称为消息标识。</p>
<ul>
<li><p>msgId：由producer端生成，其生成规则为： </p>
<p>producerIp + 进程pid + MessageClientIDSetter类的ClassLoader的hashCode + 当前时间 + AutomicInteger自增计数器 </p>
</li>
<li><p>offsetMsgId：由broker端生成，其生成规则为：</p>
<p>brokerIp + 物理分区的offset（Queue中的 偏移量） </p>
</li>
<li><p>key：由用户指定的业务相关的唯一标识</p>
</li>
</ul>
<h2 id="三-系统架构"><a href="#三-系统架构" class="headerlink" title="三.系统架构"></a>三.系统架构</h2><p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/RocketMQ/2.png"></p>
<h3 id="1-Producer"><a href="#1-Producer" class="headerlink" title="1 Producer"></a>1 Producer</h3><p>消息生产者，负责生产消息。Producer通过MQ的负载均衡模块选择相应的Broker集群队列进行消息投 递，投递的过程支持快速失败并且低延迟。</p>
<p>RocketMQ中的消息生产者都是以生产者组（Producer Group）的形式出现的。生产者组是同一类生产 者的集合，这类Producer发送相同Topic类型的消息。一个生产者组可以同时发送多个主题的消息。</p>
<h3 id="2-Consumer"><a href="#2-Consumer" class="headerlink" title="2 Consumer"></a>2 Consumer</h3><p>消息消费者，负责消费消息。一个消息消费者会从Broker服务器中获取到消息，并对消息进行相关业务 处理。</p>
<p>RocketMQ中的消息消费者都是以消费者组（Consumer Group）的形式出现的。消费者组是同一类消 费者的集合，这类Consumer消费的是同一个Topic类型的消息。消费者组使得在消息消费方面，实现 负载均衡（将一个Topic中的不同的Queue平均分配给同一个Consumer Group的不同的Consumer，注 意，并不是将消息负载均衡）和容错（一个Consmer挂了，该Consumer Group中的其它Consumer可 以接着消费原Consumer消费的Queue）的目标变得非常容易</p>
<img data-src="https://gitee.com/codeyunzhou/images/raw/master/RocketMQ/3.jpg" style="zoom: 50%;" />

<p>消费者组中Consumer的数量应该小于等于订阅Topic的Queue数量。如果超出Queue数量，则多出的 Consumer将不能消费消息。</p>
<p>不过，一个Topic类型的消息可以被多个消费者组同时消费。</p>
<img data-src="https://gitee.com/codeyunzhou/images/raw/master/RocketMQ/4.jpg" style="zoom: 50%;" />

<h3 id="3-Name-Server"><a href="#3-Name-Server" class="headerlink" title="3 Name Server"></a>3 Name Server</h3><p>NameServer是一个Broker与Topic路由的注册中心，支持Broker的动态注册与发现。</p>
<p>RocketMQ的思想来自于Kafka，而Kafka是依赖了Zookeeper的。所以，在RocketMQ的早期版本，即在 MetaQ v1.0与v2.0版本中，也是依赖于Zookeeper的。从MetaQ v3.0，即RocketMQ开始去掉了 Zookeeper依赖，使用了自己的NameServer。</p>
<p>主要包括两个功能：</p>
<ul>
<li>Broker管理：接受Broker集群的注册信息并且保存下来作为路由信息的基本数据；提供心跳检测 机制，检查Broker是否还存活。</li>
<li>路由信息管理：每个NameServer中都保存着Broker集群的整个路由信息和用于客户端查询的队列 信息。Producer和Conumser通过NameServer可以获取整个Broker集群的路由信息，从而进行消 息的投递和消费。</li>
</ul>
<h4 id="3-1-路由注册"><a href="#3-1-路由注册" class="headerlink" title="3.1 路由注册"></a>3.1 路由注册</h4><p>NameServer通常也是以集群的方式部署，不过，NameServer是无状态的，即NameServer集群中的各 个节点间是无差异的，各节点间相互不进行信息通讯。</p>
<p><strong>那各节点中的数据是如何进行数据同步的呢？</strong></p>
<p>在 Broker节点启动时，轮询NameServer列表，与每个NameServer节点建立长连接，发起注册请求。在 NameServer内部维护着⼀个Broker列表，用来动态存储Broker的信息。</p>
<p>Broker节点为了证明自己是活着的，为了维护与NameServer间的长连接，会将最新的信息以心跳包的 方式上报给NameServer，每30秒发送一次心跳。心跳包中包含 BrokerId、Broker地址(IP+Port)、 Broker名称、Broker所属集群名称等等。NameServer在接收到心跳包后，会更新心跳时间戳，记录这 个Broker的最新存活时间。</p>
<h4 id="2-路由剔除"><a href="#2-路由剔除" class="headerlink" title="2. 路由剔除"></a>2. 路由剔除</h4><p>由于Broker关机、宕机或网络抖动等原因，NameServer没有收到Broker的心跳，NameServer可能会将 其从Broker列表中剔除。</p>
<p>NameServer中有⼀个定时任务，每隔10秒就会扫描⼀次Broker表，查看每一个Broker的最新心跳时间戳距离当前时间是否超过120秒，如果超过，则会判定Broker失效，然后将其从Broker列表中剔除。</p>
<h4 id="2-路由发现"><a href="#2-路由发现" class="headerlink" title="2. 路由发现"></a>2. 路由发现</h4><p>RocketMQ的路由发现采用的是Pull模型。当Topic路由信息出现变化时，NameServer不会主动推送给 客户端，而是客户端定时拉取主题最新的路由。默认客户端每30秒会拉取一次最新的路由。</p>
<h4 id="3-客户端NameServer选择策略"><a href="#3-客户端NameServer选择策略" class="headerlink" title="3. 客户端NameServer选择策略"></a>3. 客户端NameServer选择策略</h4><p>客户端在配置时必须要写上NameServer集群的地址，那么客户端到底连接的是哪个NameServer节点 呢？客户端首先会生产一个随机数，然后再与NameServer节点数量取模，此时得到的就是所要连接的 节点索引，然后就会进行连接。如果连接失败，则会采用round-robin策略，逐个尝试着去连接其它节点。</p>
<p>首先采用的是<strong>随机策略</strong>进行的选择，失败后采用的是<strong>轮询策略</strong>。</p>
<h3 id="4-Broker"><a href="#4-Broker" class="headerlink" title="4 Broker"></a>4 Broker</h3><p>Broker充当着消息中转角色，负责存储消息、转发消息。Broker在RocketMQ系统中负责接收并存储从 生产者发送来的消息，同时为消费者的拉取请求作准备。Broker同时也存储着消息相关的元数据，包括 消费者组消费进度偏移offset、主题、队列等。</p>
<img data-src="https://gitee.com/codeyunzhou/images/raw/master/RocketMQ/5.jpg" style="zoom:80%;" />

<p><strong>Remoting Module</strong>：整个Broker的实体，负责处理来自clients端的请求。而这个Broker实体则由以下模<br>块构成。<br><strong>Client Manager</strong>：客户端管理器。负责接收、解析客户端(Producer/Consumer)请求，管理客户端。例<br>如，维护Consumer的Topic订阅信息<br><strong>Store Service</strong>：存储服务。提供方便简单的API接口，处理消息存储到物理硬盘和消息查询功能。<br><strong>HA Service</strong>：高可用服务，提供Master Broker 和 Slave Broker之间的数据同步功能。<br><strong>Index Service</strong>：索引服务。根据特定的Message key，对投递到Broker的消息进行索引服务，同时也提<br>供根据Message Key对消息进行快速查询的功能。</p>
<h4 id="1-集群部署"><a href="#1-集群部署" class="headerlink" title="1 集群部署"></a>1 集群部署</h4><img data-src="https://gitee.com/codeyunzhou/images/raw/master/RocketMQ/6.jpg" style="zoom:80%;" />

<p>为了增强Broker性能与吞吐量，Broker一般都是以集群形式出现的。各集群节点中可能存放着相同 Topic的不同Queue。</p>
<p><strong>如果某Broker节点宕机，如何保证数据不丢失呢？</strong></p>
<p>其解决方案是，将每个Broker集群节点进行横向扩展，即将Broker节点再建为一个HA集群，解决单点问题。</p>
<p>Broker节点集群是一个主从集群，即集群中具有Master与Slave两种角色。Master负责处理读写操作请 求，Slave负责对Master中的数据进行备份。当Master挂掉了，Slave则会自动切换为Master去工作。所 以这个Broker集群是主备集群。一个Master可以包含多个Slave，但一个Slave只能隶属于一个Master。 Master与Slave 的对应关系是通过指定相同的BrokerName、不同的BrokerId 来确定的。BrokerId为0表 示Master，非0表示Slave。每个Broker与NameServer集群中的所有节点建立长连接，定时注册Topic信 息到所有NameServer。</p>
<h3 id="5-工作流程"><a href="#5-工作流程" class="headerlink" title="5 工作流程"></a>5 工作流程</h3><h4 id="1-流程"><a href="#1-流程" class="headerlink" title="1 流程"></a>1 流程</h4><ul>
<li>启动NameServer，NameServer启动后开始监听端口，等待Broker、Producer、Consumer连接</li>
<li>启动Broker时，Broker会与所有的NameServer建立并保持长连接，然后每30秒向NameServer定时<br>发送心跳包。</li>
<li>发送消息前，可以先创建Topic，创建Topic时需要指定该Topic要存储在哪些Broker上，当然，在创<br>建Topic时也会将Topic与Broker的关系写入到NameServer中。不过，这步是可选的，也可以在发送消<br>息时自动创建Topic。</li>
<li>Producer发送消息，启动时先跟NameServer集群中的其中一台建立长连接，并从NameServer中获<br>取路由信息，即当前发送的Topic消息的Queue与Broker的地址（IP+Port）的映射关系。然后根据算法<br>策略从队选择一个Queue，与队列所在的Broker建立长连接从而向Broker发消息。当然，在获取到路由<br>信息后，Producer会首先将路由信息缓存到本地，再每30秒从NameServer更新一次路由信息。</li>
<li>Consumer跟Producer类似，跟其中一台NameServer建立长连接，获取其所订阅Topic的路由信息，<br>然后根据算法策略从路由信息中获取到其所要消费的Queue，然后直接跟Broker建立长连接，开始消费<br>其中的消息。Consumer在获取到路由信息后，同样也会每30秒从NameServer更新一次路由信息。不过<br>不同于Producer的是，Consumer还会向Broker发送心跳，以确保Broker的存活状态。</li>
</ul>
<h4 id="2-Topic的创建模式"><a href="#2-Topic的创建模式" class="headerlink" title="2 Topic的创建模式"></a>2 Topic的创建模式</h4><p>手动创建Topic时，有两种模式：</p>
<ul>
<li><p>集群模式：该模式下创建的Topic在该集群中，所有Broker中的Queue数量是相同的。</p>
</li>
<li><p>Broker模式：该模式下创建的Topic在该集群中，每个Broker中的Queue数量可以不同。</p>
<p>自动创建Topic时，默认采用的是Broker模式，会为每个Broker默认创建4个Queue。</p>
</li>
</ul>
<h2 id="四-RocketMQ-Quick-Start"><a href="#四-RocketMQ-Quick-Start" class="headerlink" title="四.RocketMQ Quick Start"></a>四.RocketMQ Quick Start</h2><p><a href="https://rocketmq.apache.org/docs/quick-start/">Quick Start - Apache RocketMQ</a></p>
<h3 id="1-启动RocketMQ"><a href="#1-启动RocketMQ" class="headerlink" title="1 启动RocketMQ"></a>1 启动RocketMQ</h3><ol start="0">
<li>RocketMQ默认的虚拟机内存较大，启动Broker如果因为内存不足失败，需要编辑如下两个配置文件，修改JVM内存大小</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编辑runbroker.sh和runserver.sh修改默认JVM大小</span></span><br><span class="line">vi runbroker.sh</span><br><span class="line">vi runserver.sh</span><br></pre></td></tr></table></figure>

<p><code>JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms256m -Xmx256m -Xmn128m -XX:MetaspaceSize=128m  -XX:MaxMetaspaceSize=320m&quot;</code></p>
<ol>
<li>启动NameServer</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.启动NameServer</span></span><br><span class="line">nohup sh bin/mqnamesrv &amp;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.查看启动日志</span></span><br><span class="line">tail -f ~/logs/rocketmqlogs/namesrv.log</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>启动Broker</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.启动Broker</span></span><br><span class="line">nohup sh bin/mqbroker -n localhost:9876 &amp;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.查看启动日志</span></span><br><span class="line">tail -f ~/logs/rocketmqlogs/broker.log </span><br></pre></td></tr></table></figure>

<h3 id="2-测试RocketMQ"><a href="#2-测试RocketMQ" class="headerlink" title="2 测试RocketMQ"></a>2 测试RocketMQ</h3><h4 id="1-发送消息"><a href="#1-发送消息" class="headerlink" title="1 发送消息"></a>1 发送消息</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.设置环境变量</span></span><br><span class="line">export NAMESRV_ADDR=localhost:9876</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.使用安装包的Demo发送消息</span></span><br><span class="line">sh bin/tools.sh org.apache.rocketmq.example.quickstart.Producer</span><br></pre></td></tr></table></figure>

<h4 id="2-接收消息"><a href="#2-接收消息" class="headerlink" title="2 接收消息"></a>2 接收消息</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.设置环境变量</span></span><br><span class="line">export NAMESRV_ADDR=localhost:9876</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.接收消息</span></span><br><span class="line">sh bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer</span><br></pre></td></tr></table></figure>

<h3 id="3-关闭RocketMQ"><a href="#3-关闭RocketMQ" class="headerlink" title="3 关闭RocketMQ"></a>3 关闭RocketMQ</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.关闭NameServer</span></span><br><span class="line">sh bin/mqshutdown namesrv</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.关闭Broker</span></span><br><span class="line">sh bin/mqshutdown broker</span><br></pre></td></tr></table></figure>

<h2 id="五-RocketMQ集群搭建"><a href="#五-RocketMQ集群搭建" class="headerlink" title="五 RocketMQ集群搭建"></a>五 RocketMQ集群搭建</h2><h3 id="1-各角色介绍"><a href="#1-各角色介绍" class="headerlink" title="1 各角色介绍"></a>1 各角色介绍</h3><ul>
<li>Producer：消息的发送者；举例：发信者</li>
<li>Consumer：消息接收者；举例：收信者</li>
<li>Broker：暂存和传输消息；举例：邮局</li>
<li>NameServer：管理Broker；举例：各个邮局的管理机构</li>
<li>Topic：区分消息的种类；一个发送者可以发送消息给一个或者多个Topic；一个消息的接收者可以订阅一个或者多个Topic消息</li>
<li>Message Queue：相当于是Topic的分区；用于并行发送和接收消息</li>
</ul>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/RocketMQ/RocketMQ%E8%A7%92%E8%89%B2.jpg"></p>
<h3 id="2-集群搭建方式"><a href="#2-集群搭建方式" class="headerlink" title="2 集群搭建方式"></a>2 集群搭建方式</h3><h4 id="2-1-集群特点"><a href="#2-1-集群特点" class="headerlink" title="2.1 集群特点"></a>2.1 集群特点</h4><ul>
<li><p>NameServer是一个几乎无状态节点，可集群部署，节点之间无任何信息同步。</p>
</li>
<li><p>Broker部署相对复杂，Broker分为Master与Slave，一个Master可以对应多个Slave，但是一个Slave只能对应一个Master，Master与Slave的对应关系通过指定相同的BrokerName，不同的BrokerId来定义，BrokerId为0表示Master，非0表示Slave。Master也可以部署多个。每个Broker与NameServer集群中的所有节点建立长连接，定时注册Topic信息到所有NameServer。</p>
</li>
<li><p>Producer与NameServer集群中的其中一个节点（随机选择）建立长连接，定期从NameServer取Topic路由信息，并向提供Topic服务的Master建立长连接，且定时向Master发送心跳。Producer完全无状态，可集群部署。</p>
</li>
<li><p>Consumer与NameServer集群中的其中一个节点（随机选择）建立长连接，定期从NameServer取Topic路由信息，并向提供Topic服务的Master、Slave建立长连接，且定时向Master、Slave发送心跳。Consumer既可以从Master订阅消息，也可以从Slave订阅消息，订阅规则由Broker配置决定。</p>
</li>
</ul>
<h4 id="2-2-集群模式"><a href="#2-2-集群模式" class="headerlink" title="2.2 集群模式"></a>2.2 集群模式</h4><h5 id="1）单Master模式"><a href="#1）单Master模式" class="headerlink" title="1）单Master模式"></a>1）单Master模式</h5><p>这种方式风险较大，一旦Broker重启或者宕机时，会导致整个服务不可用。不建议线上环境使用,可以用于本地测试。</p>
<h5 id="2）多Master模式"><a href="#2）多Master模式" class="headerlink" title="2）多Master模式"></a>2）多Master模式</h5><p>一个集群无Slave，全是Master，例如2个Master或者3个Master，这种模式的优缺点如下：</p>
<ul>
<li>优点：配置简单，单个Master宕机或重启维护对应用无影响，在磁盘配置为RAID10时，即使机器宕机不可恢复情况下，由于RAID10磁盘非常可靠，消息也不会丢（异步刷盘丢失少量消息，同步刷盘一条不丢），性能最高；</li>
<li>缺点：单台机器宕机期间，这台机器上未被消费的消息在机器恢复之前不可订阅，消息实时性会受到影响。</li>
</ul>
<h5 id="3）多Master多Slave模式（异步）"><a href="#3）多Master多Slave模式（异步）" class="headerlink" title="3）多Master多Slave模式（异步）"></a>3）多Master多Slave模式（异步）</h5><p>每个Master配置一个Slave，有多对Master-Slave，HA采用异步复制方式，主备有短暂消息延迟（毫秒级），这种模式的优缺点如下：</p>
<ul>
<li>优点：即使磁盘损坏，消息丢失的非常少，且消息实时性不会受影响，同时Master宕机后，消费者仍然可以从Slave消费，而且此过程对应用透明，不需要人工干预，性能同多Master模式几乎一样；</li>
<li>缺点：Master宕机，磁盘损坏情况下会丢失少量消息。</li>
</ul>
<h5 id="4）多Master多Slave模式（同步）"><a href="#4）多Master多Slave模式（同步）" class="headerlink" title="4）多Master多Slave模式（同步）"></a>4）多Master多Slave模式（同步）</h5><p>每个Master配置一个Slave，有多对Master-Slave，HA采用同步双写方式，即只有主备都写成功，才向应用返回成功，这种模式的优缺点如下：</p>
<ul>
<li>优点：数据与服务都无单点故障，Master宕机情况下，消息无延迟，服务可用性与数据可用性都非常高；</li>
<li>缺点：性能比异步复制模式略低（大约低10%左右），发送单个消息的RT会略高，且目前版本在主节点宕机后，备机不能自动切换为主机。</li>
</ul>
<h3 id="3-双主双从集群搭建"><a href="#3-双主双从集群搭建" class="headerlink" title="3 双主双从集群搭建"></a>3 双主双从集群搭建</h3><h4 id="3-1-总体架构"><a href="#3-1-总体架构" class="headerlink" title="3.1 总体架构"></a>3.1 总体架构</h4><p>消息高可用采用2m-2s（同步双写）方式</p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/RocketMQ/RocketMQ%E9%9B%86%E7%BE%A4.png"></p>
<h4 id="3-2-集群工作流程"><a href="#3-2-集群工作流程" class="headerlink" title="3.2. 集群工作流程"></a>3.2. 集群工作流程</h4><ol>
<li>启动NameServer，NameServer起来后监听端口，等待Broker、Producer、Consumer连上来，相当于一个路由控制中心。</li>
<li>Broker启动，跟所有的NameServer保持长连接，定时发送心跳包。心跳包中包含当前Broker信息(IP+端口等)以及存储所有Topic信息。注册成功后，NameServer集群中就有Topic跟Broker的映射关系。</li>
<li>收发消息前，先创建Topic，创建Topic时需要指定该Topic要存储在哪些Broker上，也可以在发送消息时自动创建Topic。</li>
<li>Producer发送消息，启动时先跟NameServer集群中的其中一台建立长连接，并从NameServer中获取当前发送的Topic存在哪些Broker上，轮询从队列列表中选择一个队列，然后与队列所在的Broker建立长连接从而向Broker发消息。</li>
<li>Consumer跟Producer类似，跟其中一台NameServer建立长连接，获取当前订阅Topic存在哪些Broker上，然后直接跟Broker建立连接通道，开始消费消息。</li>
</ol>
<h4 id="3-3-服务器环境"><a href="#3-3-服务器环境" class="headerlink" title="3.3 服务器环境"></a>3.3 服务器环境</h4><table>
<thead>
<tr>
<th><strong>序号</strong></th>
<th><strong>IP</strong></th>
<th><strong>角色</strong></th>
<th><strong>架构模式</strong></th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>192.168.25.135</td>
<td>nameserver、brokerserver</td>
<td>Master1、Slave2</td>
</tr>
<tr>
<td>2</td>
<td>192.168.25.138</td>
<td>nameserver、brokerserver</td>
<td>Master2、Slave1</td>
</tr>
</tbody></table>
<h4 id="3-4-Host添加信息"><a href="#3-4-Host添加信息" class="headerlink" title="3.4 Host添加信息"></a>3.4 Host添加信息</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure>

<p>配置如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nameserver</span></span><br><span class="line">192.168.25.135 rocketmq-nameserver1</span><br><span class="line">192.168.25.138 rocketmq-nameserver2</span><br><span class="line"><span class="comment"># broker</span></span><br><span class="line">192.168.25.135 rocketmq-master1</span><br><span class="line">192.168.25.135 rocketmq-slave2</span><br><span class="line">192.168.25.138 rocketmq-master2</span><br><span class="line">192.168.25.138 rocketmq-slave1</span><br></pre></td></tr></table></figure>

<p>配置完成后, 重启网卡</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure>

<h4 id="3-5-防火墙配置"><a href="#3-5-防火墙配置" class="headerlink" title="3.5 防火墙配置"></a>3.5 防火墙配置</h4><p>宿主机需要远程访问虚拟机的rocketmq服务和web服务，需要开放相关的端口号，简单粗暴的方式是直接关闭防火墙</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询指定端口是否已开</span></span><br><span class="line">firewall-cmd --query-port=666/tcp</span><br><span class="line"><span class="comment">#添加指定需要开放的端口</span></span><br><span class="line">firewall-cmd --add-port=123/tcp --permanent</span><br><span class="line"><span class="comment">#移除指定端口</span></span><br><span class="line">firewall-cmd --permanent --remove-port=123/tcp</span><br><span class="line"><span class="comment">#重载入添加的端口</span></span><br><span class="line">firewall-cmd --reload</span><br><span class="line"><span class="comment">#查看防火墙状态</span></span><br><span class="line">systemctl status firewalld</span><br><span class="line"><span class="comment">#开启防火墙 </span></span><br><span class="line">systemctl start firewalld  </span><br><span class="line"><span class="comment">#关闭防火墙 </span></span><br><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure>

<p>或者为了安全，只开放特定的端口号，RocketMQ默认使用3个端口：9876 、10911 、11011 。如果防火墙没有关闭的话，那么防火墙就必须开放这些端口：</p>
<ul>
<li><code>nameserver</code> 默认使用 9876 端口</li>
<li><code>master</code> 默认使用 10911 端口</li>
<li><code>slave</code> 默认使用11011 端口</li>
</ul>
<p>执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开放name server默认端口</span></span><br><span class="line">firewall-cmd --add-port=9876/tcp --permanent</span><br><span class="line"><span class="comment"># 开放master默认端口</span></span><br><span class="line">firewall-cmd --add-port=10911/tcp --permanent</span><br><span class="line"><span class="comment"># 开放slave默认端口 (当前集群模式可不开启)</span></span><br><span class="line">firewall-cmd --a-port=11011/tcp --permanent </span><br><span class="line"><span class="comment"># 重启防火墙</span></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<h4 id="3-6-环境变量配置"><a href="#3-6-环境变量配置" class="headerlink" title="3.6 环境变量配置"></a>3.6 环境变量配置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure>

<p>在profile文件的末尾加入如下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#set rocketmq</span></span><br><span class="line">ROCKETMQ_HOME=/usr/<span class="built_in">local</span>/rocketmq/rocketmq-all-4.4.0-bin-release</span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$ROCKETMQ_HOME</span>/bin</span><br><span class="line"><span class="built_in">export</span> ROCKETMQ_HOME PATH</span><br></pre></td></tr></table></figure>

<p>输入:wq! 保存并退出， 并使得配置立刻生效：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>

<h4 id="3-7-创建消息存储路径"><a href="#3-7-创建消息存储路径" class="headerlink" title="3.7 创建消息存储路径"></a>3.7 创建消息存储路径</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /usr/<span class="built_in">local</span>/rocketmq/store</span><br><span class="line">mkdir /usr/<span class="built_in">local</span>/rocketmq/store/commitlog</span><br><span class="line">mkdir /usr/<span class="built_in">local</span>/rocketmq/store/consumequeue</span><br><span class="line">mkdir /usr/<span class="built_in">local</span>/rocketmq/store/index</span><br></pre></td></tr></table></figure>

<h4 id="3-8-broker配置文件"><a href="#3-8-broker配置文件" class="headerlink" title="3.8 broker配置文件"></a>3.8 broker配置文件</h4><h5 id="1）master1"><a href="#1）master1" class="headerlink" title="1）master1"></a>1）master1</h5><p>服务器：192.168.25.135</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi /usr/soft/rocketmq/conf/2m-2s-sync/broker-a.properties</span><br></pre></td></tr></table></figure>

<p>修改配置如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#所属集群名字</span></span><br><span class="line">brokerClusterName=rocketmq-cluster</span><br><span class="line"><span class="comment">#broker名字，注意此处不同的配置文件填写的不一样</span></span><br><span class="line">brokerName=broker-a</span><br><span class="line"><span class="comment">#0 表示 Master，&gt;0 表示 Slave</span></span><br><span class="line">brokerId=0</span><br><span class="line"><span class="comment">#nameServer地址，分号分割</span></span><br><span class="line">namesrvAddr=rocketmq-nameserver1:9876;rocketmq-nameserver2:9876</span><br><span class="line"><span class="comment">#在发送消息时，自动创建服务器不存在的topic，默认创建的队列数</span></span><br><span class="line">defaultTopicQueueNums=4</span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭</span></span><br><span class="line">autoCreateTopicEnable=<span class="literal">true</span></span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭</span></span><br><span class="line">autoCreateSubscriptionGroup=<span class="literal">true</span></span><br><span class="line"><span class="comment">#Broker 对外服务的监听端口</span></span><br><span class="line">listenPort=10911</span><br><span class="line"><span class="comment">#删除文件时间点，默认凌晨 4点</span></span><br><span class="line">deleteWhen=04</span><br><span class="line"><span class="comment">#文件保留时间，默认 48 小时</span></span><br><span class="line">fileReservedTime=120</span><br><span class="line"><span class="comment">#commitLog每个文件的大小默认1G</span></span><br><span class="line">mapedFileSizeCommitLog=1073741824</span><br><span class="line"><span class="comment">#ConsumeQueue每个文件默认存30W条，根据业务情况调整</span></span><br><span class="line">mapedFileSizeConsumeQueue=300000</span><br><span class="line"><span class="comment">#destroyMapedFileIntervalForcibly=120000</span></span><br><span class="line"><span class="comment">#redeleteHangedFileInterval=120000</span></span><br><span class="line"><span class="comment">#检测物理文件磁盘空间</span></span><br><span class="line">diskMaxUsedSpaceRatio=88</span><br><span class="line"><span class="comment">#存储路径</span></span><br><span class="line">storePathRootDir=/usr/<span class="built_in">local</span>/rocketmq/store</span><br><span class="line"><span class="comment">#commitLog 存储路径</span></span><br><span class="line">storePathCommitLog=/usr/<span class="built_in">local</span>/rocketmq/store/commitlog</span><br><span class="line"><span class="comment">#消费队列存储路径存储路径</span></span><br><span class="line">storePathConsumeQueue=/usr/<span class="built_in">local</span>/rocketmq/store/consumequeue</span><br><span class="line"><span class="comment">#消息索引存储路径</span></span><br><span class="line">storePathIndex=/usr/<span class="built_in">local</span>/rocketmq/store/index</span><br><span class="line"><span class="comment">#checkpoint 文件存储路径</span></span><br><span class="line">storeCheckpoint=/usr/<span class="built_in">local</span>/rocketmq/store/checkpoint</span><br><span class="line"><span class="comment">#abort 文件存储路径</span></span><br><span class="line">abortFile=/usr/<span class="built_in">local</span>/rocketmq/store/abort</span><br><span class="line"><span class="comment">#限制的消息大小</span></span><br><span class="line">maxMessageSize=65536</span><br><span class="line"><span class="comment">#flushCommitLogLeastPages=4</span></span><br><span class="line"><span class="comment">#flushConsumeQueueLeastPages=2</span></span><br><span class="line"><span class="comment">#flushCommitLogThoroughInterval=10000</span></span><br><span class="line"><span class="comment">#flushConsumeQueueThoroughInterval=60000</span></span><br><span class="line"><span class="comment">#Broker 的角色</span></span><br><span class="line"><span class="comment">#- ASYNC_MASTER 异步复制Master</span></span><br><span class="line"><span class="comment">#- SYNC_MASTER 同步双写Master</span></span><br><span class="line"><span class="comment">#- SLAVE</span></span><br><span class="line">brokerRole=SYNC_MASTER</span><br><span class="line"><span class="comment">#刷盘方式</span></span><br><span class="line"><span class="comment">#- ASYNC_FLUSH 异步刷盘</span></span><br><span class="line"><span class="comment">#- SYNC_FLUSH 同步刷盘</span></span><br><span class="line">flushDiskType=SYNC_FLUSH</span><br><span class="line"><span class="comment">#启用TAP SQL过滤</span></span><br><span class="line">enablePropertyFilter=<span class="literal">true</span></span><br><span class="line"><span class="comment">#checkTransactionMessageEnable=false</span></span><br><span class="line"><span class="comment">#发消息线程池数量</span></span><br><span class="line"><span class="comment">#sendMessageThreadPoolNums=128</span></span><br><span class="line"><span class="comment">#拉消息线程池数量</span></span><br><span class="line"><span class="comment">#pullMessageThreadPoolNums=128</span></span><br></pre></td></tr></table></figure>

<h5 id="2）slave2"><a href="#2）slave2" class="headerlink" title="2）slave2"></a>2）slave2</h5><p>服务器：192.168.25.135</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi /usr/soft/rocketmq/conf/2m-2s-sync/broker-b-s.properties</span><br></pre></td></tr></table></figure>

<p>修改配置如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#所属集群名字</span></span><br><span class="line">brokerClusterName=rocketmq-cluster</span><br><span class="line"><span class="comment">#broker名字，注意此处不同的配置文件填写的不一样</span></span><br><span class="line">brokerName=broker-b</span><br><span class="line"><span class="comment">#0 表示 Master，&gt;0 表示 Slave</span></span><br><span class="line">brokerId=1</span><br><span class="line"><span class="comment">#nameServer地址，分号分割</span></span><br><span class="line">namesrvAddr=rocketmq-nameserver1:9876;rocketmq-nameserver2:9876</span><br><span class="line"><span class="comment">#在发送消息时，自动创建服务器不存在的topic，默认创建的队列数</span></span><br><span class="line">defaultTopicQueueNums=4</span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭</span></span><br><span class="line">autoCreateTopicEnable=<span class="literal">true</span></span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭</span></span><br><span class="line">autoCreateSubscriptionGroup=<span class="literal">true</span></span><br><span class="line"><span class="comment">#Broker 对外服务的监听端口</span></span><br><span class="line">listenPort=11011</span><br><span class="line"><span class="comment">#删除文件时间点，默认凌晨 4点</span></span><br><span class="line">deleteWhen=04</span><br><span class="line"><span class="comment">#文件保留时间，默认 48 小时</span></span><br><span class="line">fileReservedTime=120</span><br><span class="line"><span class="comment">#commitLog每个文件的大小默认1G</span></span><br><span class="line">mapedFileSizeCommitLog=1073741824</span><br><span class="line"><span class="comment">#ConsumeQueue每个文件默认存30W条，根据业务情况调整</span></span><br><span class="line">mapedFileSizeConsumeQueue=300000</span><br><span class="line"><span class="comment">#destroyMapedFileIntervalForcibly=120000</span></span><br><span class="line"><span class="comment">#redeleteHangedFileInterval=120000</span></span><br><span class="line"><span class="comment">#检测物理文件磁盘空间</span></span><br><span class="line">diskMaxUsedSpaceRatio=88</span><br><span class="line"><span class="comment">#存储路径</span></span><br><span class="line">storePathRootDir=/usr/<span class="built_in">local</span>/rocketmq/store</span><br><span class="line"><span class="comment">#commitLog 存储路径</span></span><br><span class="line">storePathCommitLog=/usr/<span class="built_in">local</span>/rocketmq/store/commitlog</span><br><span class="line"><span class="comment">#消费队列存储路径存储路径</span></span><br><span class="line">storePathConsumeQueue=/usr/<span class="built_in">local</span>/rocketmq/store/consumequeue</span><br><span class="line"><span class="comment">#消息索引存储路径</span></span><br><span class="line">storePathIndex=/usr/<span class="built_in">local</span>/rocketmq/store/index</span><br><span class="line"><span class="comment">#checkpoint 文件存储路径</span></span><br><span class="line">storeCheckpoint=/usr/<span class="built_in">local</span>/rocketmq/store/checkpoint</span><br><span class="line"><span class="comment">#abort 文件存储路径</span></span><br><span class="line">abortFile=/usr/<span class="built_in">local</span>/rocketmq/store/abort</span><br><span class="line"><span class="comment">#限制的消息大小</span></span><br><span class="line">maxMessageSize=65536</span><br><span class="line"><span class="comment">#flushCommitLogLeastPages=4</span></span><br><span class="line"><span class="comment">#flushConsumeQueueLeastPages=2</span></span><br><span class="line"><span class="comment">#flushCommitLogThoroughInterval=10000</span></span><br><span class="line"><span class="comment">#flushConsumeQueueThoroughInterval=60000</span></span><br><span class="line"><span class="comment">#Broker 的角色</span></span><br><span class="line"><span class="comment">#- ASYNC_MASTER 异步复制Master</span></span><br><span class="line"><span class="comment">#- SYNC_MASTER 同步双写Master</span></span><br><span class="line"><span class="comment">#- SLAVE</span></span><br><span class="line">brokerRole=SLAVE</span><br><span class="line"><span class="comment">#刷盘方式</span></span><br><span class="line"><span class="comment">#- ASYNC_FLUSH 异步刷盘</span></span><br><span class="line"><span class="comment">#- SYNC_FLUSH 同步刷盘</span></span><br><span class="line">flushDiskType=ASYNC_FLUSH</span><br><span class="line"><span class="comment">#启用TAP SQL过滤</span></span><br><span class="line">enablePropertyFilter=<span class="literal">true</span></span><br><span class="line"><span class="comment">#checkTransactionMessageEnable=false</span></span><br><span class="line"><span class="comment">#发消息线程池数量</span></span><br><span class="line"><span class="comment">#sendMessageThreadPoolNums=128</span></span><br><span class="line"><span class="comment">#拉消息线程池数量</span></span><br><span class="line"><span class="comment">#pullMessageThreadPoolNums=128</span></span><br></pre></td></tr></table></figure>

<h5 id="3）master2"><a href="#3）master2" class="headerlink" title="3）master2"></a>3）master2</h5><p>服务器：192.168.25.138</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi /usr/soft/rocketmq/conf/2m-2s-sync/broker-b.properties</span><br></pre></td></tr></table></figure>

<p>修改配置如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#所属集群名字</span></span><br><span class="line">brokerClusterName=rocketmq-cluster</span><br><span class="line"><span class="comment">#broker名字，注意此处不同的配置文件填写的不一样</span></span><br><span class="line">brokerName=broker-b</span><br><span class="line"><span class="comment">#0 表示 Master，&gt;0 表示 Slave</span></span><br><span class="line">brokerId=0</span><br><span class="line"><span class="comment">#nameServer地址，分号分割</span></span><br><span class="line">namesrvAddr=rocketmq-nameserver1:9876;rocketmq-nameserver2:9876</span><br><span class="line"><span class="comment">#在发送消息时，自动创建服务器不存在的topic，默认创建的队列数</span></span><br><span class="line">defaultTopicQueueNums=4</span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭</span></span><br><span class="line">autoCreateTopicEnable=<span class="literal">true</span></span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭</span></span><br><span class="line">autoCreateSubscriptionGroup=<span class="literal">true</span></span><br><span class="line"><span class="comment">#Broker 对外服务的监听端口</span></span><br><span class="line">listenPort=10911</span><br><span class="line"><span class="comment">#删除文件时间点，默认凌晨 4点</span></span><br><span class="line">deleteWhen=04</span><br><span class="line"><span class="comment">#文件保留时间，默认 48 小时</span></span><br><span class="line">fileReservedTime=120</span><br><span class="line"><span class="comment">#commitLog每个文件的大小默认1G</span></span><br><span class="line">mapedFileSizeCommitLog=1073741824</span><br><span class="line"><span class="comment">#ConsumeQueue每个文件默认存30W条，根据业务情况调整</span></span><br><span class="line">mapedFileSizeConsumeQueue=300000</span><br><span class="line"><span class="comment">#destroyMapedFileIntervalForcibly=120000</span></span><br><span class="line"><span class="comment">#redeleteHangedFileInterval=120000</span></span><br><span class="line"><span class="comment">#检测物理文件磁盘空间</span></span><br><span class="line">diskMaxUsedSpaceRatio=88</span><br><span class="line"><span class="comment">#存储路径</span></span><br><span class="line">storePathRootDir=/usr/<span class="built_in">local</span>/rocketmq/store</span><br><span class="line"><span class="comment">#commitLog 存储路径</span></span><br><span class="line">storePathCommitLog=/usr/<span class="built_in">local</span>/rocketmq/store/commitlog</span><br><span class="line"><span class="comment">#消费队列存储路径存储路径</span></span><br><span class="line">storePathConsumeQueue=/usr/<span class="built_in">local</span>/rocketmq/store/consumequeue</span><br><span class="line"><span class="comment">#消息索引存储路径</span></span><br><span class="line">storePathIndex=/usr/<span class="built_in">local</span>/rocketmq/store/index</span><br><span class="line"><span class="comment">#checkpoint 文件存储路径</span></span><br><span class="line">storeCheckpoint=/usr/<span class="built_in">local</span>/rocketmq/store/checkpoint</span><br><span class="line"><span class="comment">#abort 文件存储路径</span></span><br><span class="line">abortFile=/usr/<span class="built_in">local</span>/rocketmq/store/abort</span><br><span class="line"><span class="comment">#限制的消息大小</span></span><br><span class="line">maxMessageSize=65536</span><br><span class="line"><span class="comment">#flushCommitLogLeastPages=4</span></span><br><span class="line"><span class="comment">#flushConsumeQueueLeastPages=2</span></span><br><span class="line"><span class="comment">#flushCommitLogThoroughInterval=10000</span></span><br><span class="line"><span class="comment">#flushConsumeQueueThoroughInterval=60000</span></span><br><span class="line"><span class="comment">#Broker 的角色</span></span><br><span class="line"><span class="comment">#- ASYNC_MASTER 异步复制Master</span></span><br><span class="line"><span class="comment">#- SYNC_MASTER 同步双写Master</span></span><br><span class="line"><span class="comment">#- SLAVE</span></span><br><span class="line">brokerRole=SYNC_MASTER</span><br><span class="line"><span class="comment">#刷盘方式</span></span><br><span class="line"><span class="comment">#- ASYNC_FLUSH 异步刷盘</span></span><br><span class="line"><span class="comment">#- SYNC_FLUSH 同步刷盘</span></span><br><span class="line">flushDiskType=SYNC_FLUSH</span><br><span class="line"><span class="comment">#启用TAP SQL过滤</span></span><br><span class="line">enablePropertyFilter=<span class="literal">true</span></span><br><span class="line"><span class="comment">#checkTransactionMessageEnable=false</span></span><br><span class="line"><span class="comment">#发消息线程池数量</span></span><br><span class="line"><span class="comment">#sendMessageThreadPoolNums=128</span></span><br><span class="line"><span class="comment">#拉消息线程池数量</span></span><br><span class="line"><span class="comment">#pullMessageThreadPoolNums=128</span></span><br></pre></td></tr></table></figure>

<h5 id="4）slave1"><a href="#4）slave1" class="headerlink" title="4）slave1"></a>4）slave1</h5><p>服务器：192.168.25.138</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi /usr/soft/rocketmq/conf/2m-2s-sync/broker-a-s.properties</span><br></pre></td></tr></table></figure>

<p>修改配置如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#所属集群名字</span></span><br><span class="line"><span class="attr">brokerClusterName</span>=<span class="string">rocketmq-cluster</span></span><br><span class="line"><span class="comment">#broker名字，注意此处不同的配置文件填写的不一样</span></span><br><span class="line"><span class="attr">brokerName</span>=<span class="string">broker-a</span></span><br><span class="line"><span class="comment">#0 表示 Master，&gt;0 表示 Slave</span></span><br><span class="line"><span class="attr">brokerId</span>=<span class="string">1</span></span><br><span class="line"><span class="comment">#nameServer地址，分号分割</span></span><br><span class="line"><span class="attr">namesrvAddr</span>=<span class="string">rocketmq-nameserver1:9876;rocketmq-nameserver2:9876</span></span><br><span class="line"><span class="comment">#在发送消息时，自动创建服务器不存在的topic，默认创建的队列数</span></span><br><span class="line"><span class="attr">defaultTopicQueueNums</span>=<span class="string">4</span></span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭</span></span><br><span class="line"><span class="attr">autoCreateTopicEnable</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭</span></span><br><span class="line"><span class="attr">autoCreateSubscriptionGroup</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#Broker 对外服务的监听端口</span></span><br><span class="line"><span class="attr">listenPort</span>=<span class="string">11011</span></span><br><span class="line"><span class="comment">#删除文件时间点，默认凌晨 4点</span></span><br><span class="line"><span class="attr">deleteWhen</span>=<span class="string">04</span></span><br><span class="line"><span class="comment">#文件保留时间，默认 48 小时</span></span><br><span class="line"><span class="attr">fileReservedTime</span>=<span class="string">120</span></span><br><span class="line"><span class="comment">#commitLog每个文件的大小默认1G</span></span><br><span class="line"><span class="attr">mapedFileSizeCommitLog</span>=<span class="string">1073741824</span></span><br><span class="line"><span class="comment">#ConsumeQueue每个文件默认存30W条，根据业务情况调整</span></span><br><span class="line"><span class="attr">mapedFileSizeConsumeQueue</span>=<span class="string">300000</span></span><br><span class="line"><span class="comment">#destroyMapedFileIntervalForcibly=120000</span></span><br><span class="line"><span class="comment">#redeleteHangedFileInterval=120000</span></span><br><span class="line"><span class="comment">#检测物理文件磁盘空间</span></span><br><span class="line"><span class="attr">diskMaxUsedSpaceRatio</span>=<span class="string">88</span></span><br><span class="line"><span class="comment">#存储路径</span></span><br><span class="line"><span class="attr">storePathRootDir</span>=<span class="string">/usr/local/rocketmq/store</span></span><br><span class="line"><span class="comment">#commitLog 存储路径</span></span><br><span class="line"><span class="attr">storePathCommitLog</span>=<span class="string">/usr/local/rocketmq/store/commitlog</span></span><br><span class="line"><span class="comment">#消费队列存储路径存储路径</span></span><br><span class="line"><span class="attr">storePathConsumeQueue</span>=<span class="string">/usr/local/rocketmq/store/consumequeue</span></span><br><span class="line"><span class="comment">#消息索引存储路径</span></span><br><span class="line"><span class="attr">storePathIndex</span>=<span class="string">/usr/local/rocketmq/store/index</span></span><br><span class="line"><span class="comment">#checkpoint 文件存储路径</span></span><br><span class="line"><span class="attr">storeCheckpoint</span>=<span class="string">/usr/local/rocketmq/store/checkpoint</span></span><br><span class="line"><span class="comment">#abort 文件存储路径</span></span><br><span class="line"><span class="attr">abortFile</span>=<span class="string">/usr/local/rocketmq/store/abort</span></span><br><span class="line"><span class="comment">#限制的消息大小</span></span><br><span class="line"><span class="attr">maxMessageSize</span>=<span class="string">65536</span></span><br><span class="line"><span class="comment">#flushCommitLogLeastPages=4</span></span><br><span class="line"><span class="comment">#flushConsumeQueueLeastPages=2</span></span><br><span class="line"><span class="comment">#flushCommitLogThoroughInterval=10000</span></span><br><span class="line"><span class="comment">#flushConsumeQueueThoroughInterval=60000</span></span><br><span class="line"><span class="comment">#Broker 的角色</span></span><br><span class="line"><span class="comment">#- ASYNC_MASTER 异步复制Master</span></span><br><span class="line"><span class="comment">#- SYNC_MASTER 同步双写Master</span></span><br><span class="line"><span class="comment">#- SLAVE</span></span><br><span class="line"><span class="attr">brokerRole</span>=<span class="string">SLAVE</span></span><br><span class="line"><span class="comment">#刷盘方式</span></span><br><span class="line"><span class="comment">#- ASYNC_FLUSH 异步刷盘</span></span><br><span class="line"><span class="comment">#- SYNC_FLUSH 同步刷盘</span></span><br><span class="line"><span class="attr">flushDiskType</span>=<span class="string">ASYNC_FLUSH</span></span><br><span class="line"><span class="comment">#启用TAP SQL过滤</span></span><br><span class="line"><span class="attr">enablePropertyFilter</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#checkTransactionMessageEnable=false</span></span><br><span class="line"><span class="comment">#发消息线程池数量</span></span><br><span class="line"><span class="comment">#sendMessageThreadPoolNums=128</span></span><br><span class="line"><span class="comment">#拉消息线程池数量</span></span><br><span class="line"><span class="comment">#pullMessageThreadPoolNums=128</span></span><br></pre></td></tr></table></figure>

<h4 id="3-9-修改启动脚本文件"><a href="#3-9-修改启动脚本文件" class="headerlink" title="3.9 修改启动脚本文件"></a>3.9 修改启动脚本文件</h4><h5 id="1）runbroker-sh"><a href="#1）runbroker-sh" class="headerlink" title="1）runbroker.sh"></a>1）runbroker.sh</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /usr/local/rocketmq/rocket-all-4.4.0-bin-release/bin/runbroker.sh</span><br></pre></td></tr></table></figure>

<p>需要根据内存大小进行适当的对JVM参数进行调整：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#===================================================</span></span><br><span class="line"><span class="comment"># 开发环境配置 JVM Configuration</span></span><br><span class="line">JAVA_OPT=<span class="string">&quot;<span class="variable">$&#123;JAVA_OPT&#125;</span> -server -Xms256m -Xmx256m -Xmn128m&quot;</span></span><br></pre></td></tr></table></figure>

<p>####2）runserver.sh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /usr/local/rocketmq/rocket-all-4.4.0-bin-release/bin/runserver.sh</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">JAVA_OPT=<span class="string">&quot;<span class="variable">$&#123;JAVA_OPT&#125;</span> -server -Xms256m -Xmx256m -Xmn128m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-10-服务启动"><a href="#3-10-服务启动" class="headerlink" title="3.10 服务启动"></a>3.10 服务启动</h4><h5 id="1）启动NameServe集群"><a href="#1）启动NameServe集群" class="headerlink" title="1）启动NameServe集群"></a>1）启动NameServe集群</h5><p>分别在192.168.25.135和192.168.25.138启动NameServer</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/rocketmq/bin</span><br><span class="line">nohup sh mqnamesrv &amp;</span><br></pre></td></tr></table></figure>

<h5 id="2）启动Broker集群"><a href="#2）启动Broker集群" class="headerlink" title="2）启动Broker集群"></a>2）启动Broker集群</h5><ul>
<li>在192.168.25.135上启动master1和slave2</li>
</ul>
<p>master1：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/rocketmq/bin</span><br><span class="line">nohup sh mqbroker -c /usr/<span class="built_in">local</span>/rocketmq/rocketmq-all-4.4.0-bin-release/conf/2m-2s-sync/broker-a.properties &amp;</span><br></pre></td></tr></table></figure>

<p>slave2：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/rocketmq/bin</span><br><span class="line">nohup sh mqbroker -c /usr/<span class="built_in">local</span>/rocketmq/rocketmq-all-4.4.0-bin-release/conf/2m-2s-sync/broker-b-s.properties &amp;</span><br></pre></td></tr></table></figure>

<ul>
<li>在192.168.25.138上启动master2和slave2</li>
</ul>
<p>master2</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/rocketmq/bin</span><br><span class="line">nohup sh mqbroker -c /usr/<span class="built_in">local</span>/rocketmq/rocketmq-all-4.4.0-bin-release/conf/2m-2s-sync/broker-b.properties &amp;</span><br></pre></td></tr></table></figure>

<p>slave1</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/rocketmq/bin</span><br><span class="line">nohup sh mqbroker -c /usr/<span class="built_in">local</span>/rocketmq/conf/2m-2s-sync/broker-a-s.properties &amp;</span><br></pre></td></tr></table></figure>

<h4 id="3-11-查看进程状态"><a href="#3-11-查看进程状态" class="headerlink" title="3.11 查看进程状态"></a>3.11 查看进程状态</h4><p>启动后通过JPS查看启动进程</p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/RocketMQ/jps1.png"></p>
<h4 id="3-12-查看日志"><a href="#3-12-查看日志" class="headerlink" title="3.12 查看日志"></a>3.12 查看日志</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看nameServer日志</span></span><br><span class="line">tail -500f ~/logs/rocketmqlogs/namesrv.log</span><br><span class="line"><span class="comment"># 查看broker日志</span></span><br><span class="line">tail -500f ~/logs/rocketmqlogs/broker.log</span><br></pre></td></tr></table></figure>

<h4 id="3-13-mqadmin管理工具"><a href="#3-13-mqadmin管理工具" class="headerlink" title="3.13 mqadmin管理工具"></a>3.13 mqadmin管理工具</h4><h5 id="3-13-1-使用方式"><a href="#3-13-1-使用方式" class="headerlink" title="3.13.1 使用方式"></a>3.13.1 使用方式</h5><p>进入RocketMQ安装位置，在bin目录下执行<code>./mqadmin &#123;command&#125; &#123;args&#125;</code> </p>
<h5 id="3-13-2-命令介绍"><a href="#3-13-2-命令介绍" class="headerlink" title="3.13.2 命令介绍"></a>3.13.2 命令介绍</h5><h6 id="1）Topic相关"><a href="#1）Topic相关" class="headerlink" title="1）Topic相关"></a>1）Topic相关</h6><table border=0 cellpadding=0 cellspacing=0 width=714>
 <col width=177>
 <col width=175>
 <col width=177>
 <col width=185>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl63 width=177 style='height:17.0pt;width:133pt'>名称</td>
  <td class=xl64 width=175 style='width:131pt'>含义</td>
  <td class=xl64 width=177 style='width:133pt'>命令选项</td>
  <td class=xl64 width=185 style='width:139pt'>说明</td>
 </tr>
 <tr height=132 style='height:99.0pt'>
  <td rowspan=8 height=593 class=xl68 width=163 style='border-bottom:1.0pt;
  height:444.0pt;border-top:none;width:122pt'>updateTopic</td>
  <td rowspan=8 class=xl70 width=135 style='border-bottom:1.0pt;
  border-top:none;width:101pt'>创建更新Topic配置</td>
  <td class=xl65 width=149 style='width:112pt'>-b</td>
  <td class=xl66 width=159 style='width:119pt'>Broker 地址，表示 topic 所在
  Broker，只支持单台Broker，地址为ip:port</td>
 </tr>
 <tr height=132 style='height:99.0pt'>
  <td height=132 class=xl65 width=149 style='height:99.0pt;width:112pt'>-c</td>
  <td class=xl66 width=159 style='width:119pt'>cluster 名称，表示 topic 所在集群（集群可通过
  clusterList 查询）</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl65 width=149 style='height:17.0pt;width:112pt'>-h-</td>
  <td class=xl66 width=159 style='width:119pt'>打印帮助</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td height=57 class=xl65 width=149 style='height:43.0pt;width:112pt'>-n</td>
  <td class=xl66 width=159 style='width:119pt'>NameServer服务地址，格式 ip:port</td>
 </tr>
 <tr height=76 style='height:57.0pt'>
  <td height=76 class=xl65 width=149 style='height:57.0pt;width:112pt'>-p</td>
  <td class=xl66 width=159 style='width:119pt'>指定新topic的读写权限( W=2|R=4|WR=6 )</td>
 </tr>
 <tr height=39 style='height:29.0pt'>
  <td height=39 class=xl65 width=149 style='height:29.0pt;width:112pt'>-r</td>
  <td class=xl66 width=159 style='width:119pt'>可读队列数（默认为 8）</td>
 </tr>
 <tr height=39 style='height:29.0pt'>
  <td height=39 class=xl65 width=149 style='height:29.0pt;width:112pt'>-w</td>
  <td class=xl66 width=159 style='width:119pt'>可写队列数（默认为 8）</td>
 </tr>
 <tr height=95 style='height:71.0pt'>
  <td height=95 class=xl65 width=149 style='height:71.0pt;width:112pt'>-t</td>
  <td class=xl66 width=159 style='width:119pt'>topic 名称（名称只能使用字符
  ^[a-zA-Z0-9_-]+$ ）</td>
 </tr>
 <tr height=132 style='height:99.0pt'>
  <td rowspan=4 height=307 class=xl68 width=163 style='border-bottom:1.0pt;
  height:230.0pt;border-top:none;width:122pt'>deleteTopic</td>
  <td rowspan=4 class=xl70 width=135 style='border-bottom:1.0pt;
  border-top:none;width:101pt'>删除Topic</td>
  <td class=xl65 width=149 style='width:112pt'>-c</td>
  <td class=xl66 width=159 style='width:119pt'>cluster 名称，表示删除某集群下的某个 topic （集群
  可通过 clusterList 查询）</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl65 width=149 style='height:17.0pt;width:112pt'>-h</td>
  <td class=xl66 width=159 style='width:119pt'>打印帮助</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td height=57 class=xl65 width=149 style='height:43.0pt;width:112pt'>-n</td>
  <td class=xl66 width=159 style='width:119pt'>NameServer 服务地址，格式 ip:port</td>
 </tr>
 <tr height=95 style='height:71.0pt'>
  <td height=95 class=xl65 width=149 style='height:71.0pt;width:112pt'>-t</td>
  <td class=xl66 width=159 style='width:119pt'>topic 名称（名称只能使用字符
  ^[a-zA-Z0-9_-]+$ ）</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td rowspan=3 height=287 class=xl68 width=163 style='border-bottom:1.0pt;
  height:215.0pt;border-top:none;width:122pt'>topicList</td>
  <td rowspan=3 class=xl70 width=135 style='border-bottom:1.0pt;
  border-top:none;width:101pt'>查看 Topic 列表信息</td>
  <td class=xl65 width=149 style='width:112pt'>-h</td>
  <td class=xl66 width=159 style='width:119pt'>打印帮助</td>
 </tr>
 <tr height=207 style='height:155.0pt'>
  <td height=207 class=xl65 width=149 style='height:155.0pt;width:112pt'>-c</td>
  <td class=xl66 width=159 style='width:119pt'>不配置-c只返回topic列表，增加-c返回clusterName,
  topic, consumerGroup信息，即topic的所属集群和订阅关系，没有参数</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td height=57 class=xl65 width=149 style='height:43.0pt;width:112pt'>-n</td>
  <td class=xl66 width=159 style='width:119pt'>NameServer 服务地址，格式 ip:port</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td rowspan=3 height=103 class=xl68 width=163 style='border-bottom:1.0pt;
  height:77.0pt;border-top:none;width:122pt'>topicRoute</td>
  <td rowspan=3 class=xl70 width=135 style='border-bottom:1.0pt;
  border-top:none;width:101pt'>查看 Topic 路由信息</td>
  <td class=xl65 width=149 style='width:112pt'>-t</td>
  <td class=xl66 width=159 style='width:119pt'>topic 名称</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl65 width=149 style='height:17.0pt;width:112pt'>-h</td>
  <td class=xl66 width=159 style='width:119pt'>打印帮助</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td height=57 class=xl65 width=149 style='height:43.0pt;width:112pt'>-n</td>
  <td class=xl66 width=159 style='width:119pt'>NameServer 服务地址，格式 ip:port</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td rowspan=3 height=103 class=xl68 width=163 style='border-bottom:1.0pt;
  height:77.0pt;border-top:none;width:122pt'>topicStatus</td>
  <td rowspan=3 class=xl70 width=135 style='border-bottom:1.0pt;
  border-top:none;width:101pt'>查看 Topic 消息队列offset</td>
  <td class=xl65 width=149 style='width:112pt'>-t</td>
  <td class=xl66 width=159 style='width:119pt'>topic 名称</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl65 width=149 style='height:17.0pt;width:112pt'>-h</td>
  <td class=xl66 width=159 style='width:119pt'>打印帮助</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td height=57 class=xl65 width=149 style='height:43.0pt;width:112pt'>-n</td>
  <td class=xl66 width=159 style='width:119pt'>NameServer 服务地址，格式 ip:port</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td rowspan=3 height=103 class=xl68 width=163 style='border-bottom:1.0pt;
  height:77.0pt;border-top:none;width:122pt'>topicClusterList</td>
  <td rowspan=3 class=xl70 width=135 style='border-bottom:1.0pt;
  border-top:none;width:101pt'>查看 Topic 所在集群列表</td>
  <td class=xl65 width=149 style='width:112pt'>-t</td>
  <td class=xl66 width=159 style='width:119pt'>topic 名称</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl65 width=149 style='height:17.0pt;width:112pt'>-h</td>
  <td class=xl66 width=159 style='width:119pt'>打印帮助</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td height=57 class=xl65 width=149 style='height:43.0pt;width:112pt'>-n</td>
  <td class=xl66 width=159 style='width:119pt'>NameServer 服务地址，格式 ip:port</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td rowspan=6 height=518 class=xl68 width=163 style='border-bottom:1.0pt;
  height:380pt;border-top:none;width:122pt'>updateTopicPerm</td>
  <td rowspan=6 class=xl70 width=135 style='border-bottom:1.0pt;
  border-top:none;width:101pt'>更新 Topic 读写权限</td>
  <td class=xl65 width=149 style='width:112pt'>-t</td>
  <td class=xl66 width=159 style='width:119pt'>topic 名称</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl65 width=149 style='height:17.0pt;width:112pt'>-h</td>
  <td class=xl66 width=159 style='width:119pt'>打印帮助</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td height=57 class=xl65 width=149 style='height:43.0pt;width:112pt'>-n</td>
  <td class=xl66 width=159 style='width:119pt'>NameServer 服务地址，格式 ip:port</td>
 </tr>
 <tr height=132 style='height:99.0pt'>
  <td height=132 class=xl65 width=149 style='height:99.0pt;width:112pt'>-b</td>
  <td class=xl66 width=159 style='width:119pt'>Broker 地址，表示 topic 所在
  Broker，只支持单台Broker，地址为ip:port</td>
 </tr>
 <tr height=76 style='height:57.0pt'>
  <td height=76 class=xl65 width=149 style='height:57.0pt;width:112pt'>-p</td>
  <td class=xl66 width=159 style='width:119pt'>指定新 topic 的读写权限( W=2|R=4|WR=6 )</td>
 </tr>
 <tr height=207 style='height:155.0pt'>
  <td height=207 class=xl65 width=149 style='height:155.0pt;width:112pt'>-c</td>
  <td class=xl66 width=159 style='width:119pt'>cluster 名称，表示 topic 所在集群（集群可通过
  clusterList 查询），-b优先，如果没有-b，则对集群中所有Broker执行命令</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td rowspan=5 height=199 class=xl68 width=163 style='border-bottom:1.0pt;
  height:149.0pt;border-top:none;width:122pt'>updateOrderConf</td>
  <td rowspan=5 class=xl70 width=135 style='border-bottom:1.0pt;
  border-top:none;width:101pt'>从NameServer上创建、删除、获取特定命名空间的kv配置，目前还未启用</td>
  <td class=xl65 width=149 style='width:112pt'>-h</td>
  <td class=xl66 width=159 style='width:119pt'>打印帮助</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td height=57 class=xl65 width=149 style='height:43.0pt;width:112pt'>-n</td>
  <td class=xl66 width=159 style='width:119pt'>NameServer 服务地址，格式 ip:port</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl65 width=149 style='height:17.0pt;width:112pt'>-t</td>
  <td class=xl66 width=159 style='width:119pt'>topic，键</td>
 </tr>
 <tr height=39 style='height:29.0pt'>
  <td height=39 class=xl65 width=149 style='height:29.0pt;width:112pt'>-v</td>
  <td class=xl66 width=159 style='width:119pt'>orderConf，值</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td height=57 class=xl65 width=149 style='height:43.0pt;width:112pt'>-m</td>
  <td class=xl66 width=159 style='width:119pt'>method，可选get、put、delete</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td rowspan=4 height=198 class=xl68 width=163 style='border-bottom:1.0pt;
  height:140pt;border-top:none;width:122pt'>allocateMQ</td>
  <td rowspan=4 class=xl70 width=135 style='border-bottom:1.0pt;
  border-top:none;width:101pt'>以平均负载算法计算消费者列表负载消息队列的负载结果</td>
  <td class=xl65 width=149 style='width:112pt'>-t</td>
  <td class=xl66 width=159 style='width:119pt'>topic 名称</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl65 width=149 style='height:17.0pt;width:112pt'>-h</td>
  <td class=xl66 width=159 style='width:119pt'>打印帮助</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td height=57 class=xl65 width=149 style='height:43.0pt;width:112pt'>-n</td>
  <td class=xl66 width=159 style='width:119pt'>NameServer 服务地址，格式 ip:port</td>
 </tr>
 <tr height=95 style='height:71.0pt'>
  <td height=95 class=xl65 width=149 style='height:71.0pt;width:112pt'>-i</td>
  <td class=xl66 width=159 style='width:119pt'>ipList，用逗号分隔，计算这些ip去负载Topic的消息队列</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td rowspan=4 height=142 class=xl68 width=163 style='border-bottom:1.0pt solid black;
  height:106.0pt;border-top:1.0pt;width:122pt'>statsAll</td>
  <td rowspan=4 class=xl70 width=135 style='border-bottom:1.0pt;
  border-top:none;width:101pt'>打印Topic订阅关系、TPS、积累量、24h读写总量等信息</td>
  <td class=xl65 width=149 style='width:112pt'>-h</td>
  <td class=xl66 width=159 style='width:119pt'>打印帮助</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td height=57 class=xl65 width=149 style='height:43.0pt;width:112pt'>-n</td>
  <td class=xl66 width=159 style='width:119pt'>NameServer 服务地址，格式 ip:port</td>
 </tr>
 <tr height=39 style='height:29.0pt'>
  <td height=39 class=xl65 width=149 style='height:29.0pt;width:112pt'>-a</td>
  <td class=xl66 width=159 style='width:119pt'>是否只打印活跃topic</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl65 width=149 style='height:17.0pt;width:112pt'>-t</td>
  <td class=xl66 width=159 style='width:119pt'>指定topic</td>
 </tr>
</table>


<h6 id="2）集群相关"><a href="#2）集群相关" class="headerlink" title="2）集群相关"></a>2）集群相关</h6><table border=0 cellpadding=0 cellspacing=0 width=714>
 <col width=177>
 <col width=175>
 <col width=177>
 <col width=185>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl63 width=177 style='height:17.0pt;width:133pt'>名称</td>
  <td class=xl64 width=175 style='width:131pt'>含义</td>
  <td class=xl64 width=177 style='width:133pt'>命令选项</td>
  <td class=xl64 width=185 style='width:139pt'>说明</td>
 </tr>
 <tr height=207 style='height:155.0pt'>
  <td rowspan=4 height=326 class=xl67 width=177 style='border-bottom:1.0pt;
  height:244.0pt;border-top:none;width:133pt'><span
  style='mso-spacerun:yes'> </span>clusterList</td>
  <td rowspan=4 class=xl70 width=175 style='border-bottom:1.0pt;
  border-top:none;width:131pt'>查看集群信息，集群、BrokerName、BrokerId、TPS等信息</td>
  <td class=xl65 width=177 style='width:133pt'>-m</td>
  <td class=xl66 width=185 style='width:139pt'>打印更多信息 (增加打印出如下信息 #InTotalYest,
  #OutTotalYest, #InTotalToday ,#OutTotalToday)</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl65 width=177 style='height:17.0pt;width:133pt'>-h</td>
  <td class=xl66 width=185 style='width:139pt'>打印帮助</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td height=57 class=xl65 width=177 style='height:43.0pt;width:133pt'>-n</td>
  <td class=xl66 width=185 style='width:139pt'>NameServer 服务地址，格式 ip:port</td>
 </tr>
 <tr height=39 style='height:29.0pt'>
  <td height=39 class=xl65 width=177 style='height:29.0pt;width:133pt'>-i</td>
  <td class=xl66 width=185 style='width:139pt'>打印间隔，单位秒</td>
 </tr>
 <tr height=95 style='height:71.0pt'>
  <td rowspan=8 height=391 class=xl67 width=177 style='border-bottom:1.0pt;
  height:292.0pt;border-top:none;width:133pt'>clusterRT</td>
  <td rowspan=8 class=xl70 width=175 style='border-bottom:1.0pt;
  border-top:none;width:131pt'>发送消息检测集群各Broker RT。消息发往${BrokerName} Topic。</td>
  <td class=xl65 width=177 style='width:133pt'>-a</td>
  <td class=xl66 width=185 style='width:139pt'>amount，每次探测的总数，RT = 总时间 /
  amount</td>
 </tr>
 <tr height=39 style='height:29.0pt'>
  <td height=39 class=xl65 width=177 style='height:29.0pt;width:133pt'>-s</td>
  <td class=xl66 width=185 style='width:139pt'>消息大小，单位B</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl65 width=177 style='height:17.0pt;width:133pt'>-c</td>
  <td class=xl66 width=185 style='width:139pt'>探测哪个集群</td>
 </tr>
 <tr height=76 style='height:57.0pt'>
  <td height=76 class=xl65 width=177 style='height:57.0pt;width:133pt'>-p</td>
  <td class=xl66 width=185 style='width:139pt'>是否打印格式化日志，以|分割，默认不打印</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl65 width=177 style='height:17.0pt;width:133pt'>-h</td>
  <td class=xl66 width=185 style='width:139pt'>打印帮助</td>
 </tr>
 <tr height=39 style='height:29.0pt'>
  <td height=39 class=xl65 width=177 style='height:29.0pt;width:133pt'>-m</td>
  <td class=xl66 width=185 style='width:139pt'>所属机房，打印使用</td>
 </tr>
 <tr height=39 style='height:29.0pt'>
  <td height=39 class=xl65 width=177 style='height:29.0pt;width:133pt'>-i</td>
  <td class=xl66 width=185 style='width:139pt'>发送间隔，单位秒</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td height=57 class=xl65 width=177 style='height:43.0pt;width:133pt'>-n</td>
  <td class=xl66 width=185 style='width:139pt'>NameServer 服务地址，格式 ip:port</td>
 </tr>
</table>


<h6 id="3）Broker相关"><a href="#3）Broker相关" class="headerlink" title="3）Broker相关"></a>3）Broker相关</h6><table border=0 cellpadding=0 cellspacing=0 width=714>
 <col width=177>
 <col width=175>
 <col width=177>
 <col width=185>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl63 width=177 style='height:17.0pt;width:133pt'>名称</td>
  <td class=xl64 width=175 style='width:131pt'>含义</td>
  <td class=xl64 width=177 style='width:133pt'>命令选项</td>
  <td class=xl64 width=185 style='width:139pt'>说明</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td rowspan=6 height=206 class=xl69 width=191 style='border-bottom:1.0pt;
  height:154.0pt;border-top:none;width:143pt'>updateBrokerConfig</td>
  <td rowspan=6 class=xl72 width=87 style='border-bottom:1.0pt;
  border-top:none;width:65pt'>更新 Broker 配置文件，会修改Broker.conf</td>
  <td class=xl67 width=87 style='width:65pt'>-b</td>
  <td class=xl68 width=87 style='width:65pt'>Broker 地址，格式为ip:port</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-c</td>
  <td class=xl68 width=87 style='width:65pt'>cluster 名称</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-k</td>
  <td class=xl68 width=87 style='width:65pt'>key 值</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-v</td>
  <td class=xl68 width=87 style='width:65pt'>value 值</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-h</td>
  <td class=xl68 width=87 style='width:65pt'>打印帮助</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-n</td>
  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td rowspan=3 height=137 class=xl69 width=191 style='border-bottom:1.0pt;
  height:103.0pt;border-top:none;width:143pt'>brokerStatus</td>
  <td rowspan=3 class=xl72 width=87 style='border-bottom:1.0pt;
  border-top:none;width:65pt'>查看 Broker 统计信息、运行状态（你想要的信息几乎都在里面）</td>
  <td class=xl67 width=87 style='width:65pt'>-b</td>
  <td class=xl68 width=87 style='width:65pt'>Broker 地址，地址为ip:port</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-h</td>
  <td class=xl68 width=87 style='width:65pt'>打印帮助</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-n</td>
  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td rowspan=6 height=256 class=xl69 width=191 style='border-bottom:1.0pt;
  height:192.0pt;border-top:none;width:143pt'>brokerConsumeStats</td>
  <td rowspan=6 class=xl72 width=87 style='border-bottom:1.0pt;
  border-top:none;width:65pt'>Broker中各个消费者的消费情况，按Message Queue维度返回Consume
  Offset，Broker Offset，Diff，TImestamp等信息</td>
  <td class=xl67 width=87 style='width:65pt'>-b</td>
  <td class=xl68 width=87 style='width:65pt'>Broker 地址，地址为ip:port</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-t</td>
  <td class=xl68 width=87 style='width:65pt'>请求超时时间</td>
 </tr>
 <tr height=39 style='height:29.0pt'>
  <td height=39 class=xl67 width=87 style='height:29.0pt;width:65pt'>-l</td>
  <td class=xl68 width=87 style='width:65pt'>diff阈值，超过阈值才打印</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-o</td>
  <td class=xl68 width=87 style='width:65pt'>是否为顺序topic，一般为false</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-h</td>
  <td class=xl68 width=87 style='width:65pt'>打印帮助</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-n</td>
  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td rowspan=2 height=114 class=xl69 width=191 style='border-bottom:1.0pt;
  height:86.0pt;border-top:none;width:143pt'>getBrokerConfig</td>
  <td rowspan=2 class=xl72 width=87 style='border-bottom:1.0pt
  border-top:none;width:65pt'>获取Broker配置</td>
  <td class=xl67 width=87 style='width:65pt'>-b</td>
  <td class=xl68 width=87 style='width:65pt'>Broker 地址，地址为ip:port</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-n</td>
  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td rowspan=3 height=137 class=xl69 width=191 style='border-bottom:1.0pt;
  height:103.0pt;border-top:none;width:143pt'>wipeWritePerm</td>
  <td rowspan=3 class=xl72 width=87 style='border-bottom:1.0pt
  border-top:none;width:65pt'>从NameServer上清除 Broker写权限</td>
  <td class=xl67 width=87 style='width:65pt'>-b</td>
  <td class=xl68 width=87 style='width:65pt'>Broker 地址，地址为ip:port</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-n</td>
  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-h</td>
  <td class=xl68 width=87 style='width:65pt'>打印帮助</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td rowspan=4 height=160 class=xl69 width=191 style='border-bottom:1.0pt;
  height:120.0pt;border-top:none;width:143pt'>cleanExpiredCQ</td>
  <td rowspan=4 class=xl72 width=87 style='border-bottom:1.0pt
  border-top:none;width:65pt'>清理Broker上过期的Consume Queue，如果手动减少对列数可能产生过期队列</td>
  <td class=xl67 width=87 style='width:65pt'>-n</td>
  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-h</td>
  <td class=xl68 width=87 style='width:65pt'>打印帮助</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-b</td>
  <td class=xl68 width=87 style='width:65pt'>Broker 地址，地址为ip:port</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-c</td>
  <td class=xl68 width=87 style='width:65pt'>集群名称</td>
 </tr>
 <tr height=88 style='mso-height-source:userset;height:66.0pt'>
  <td rowspan=4 height=191 class=xl69 width=191 style='border-bottom:1.0pt;
  height:143.0pt;border-top:none;width:143pt'>cleanUnusedTopic</td>
  <td rowspan=4 class=xl72 width=87 style='border-bottom:1.0pt
  border-top:none;width:65pt'>清理Broker上不使用的Topic，从内存中释放Topic的Consume
  Queue，如果手动删除Topic会产生不使用的Topic</td>
  <td class=xl67 width=87 style='width:65pt'>-n</td>
  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-h</td>
  <td class=xl68 width=87 style='width:65pt'>打印帮助</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-b</td>
  <td class=xl68 width=87 style='width:65pt'>Broker 地址，地址为ip:port</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-c</td>
  <td class=xl68 width=87 style='width:65pt'>集群名称</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td rowspan=5 height=199 class=xl69 width=191 style='border-bottom:1.0pt;
  height:149.0pt;border-top:none;width:143pt'>sendMsgStatus</td>
  <td rowspan=5 class=xl72 width=87 style='border-bottom:1.0pt
  border-top:none;width:65pt'>向Broker发消息，返回发送状态和RT</td>
  <td class=xl67 width=87 style='width:65pt'>-n</td>
  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-h</td>
  <td class=xl68 width=87 style='width:65pt'>打印帮助</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-b</td>
  <td class=xl68 width=87 style='width:65pt'>BrokerName，注意不同于Broker地址</td>
 </tr>
 <tr height=39 style='height:29.0pt'>
  <td height=39 class=xl67 width=87 style='height:29.0pt;width:65pt'>-s</td>
  <td class=xl68 width=87 style='width:65pt'>消息大小，单位B</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-c</td>
  <td class=xl68 width=87 style='width:65pt'>发送次数</td>
 </tr>
</table>


<h6 id="4）消息相关"><a href="#4）消息相关" class="headerlink" title="4）消息相关"></a>4）消息相关</h6><table border=0 cellpadding=0 cellspacing=0 width=714>
 <col width=177>
 <col width=175>
 <col width=177>
 <col width=185>
<tr height=23 style='height:17.0pt'>
  <td height=23 class=xl63 width=177 style='height:17.0pt;width:133pt'>名称</td>
  <td class=xl64 width=175 style='width:131pt'>含义</td>
  <td class=xl64 width=177 style='width:133pt'>命令选项</td>
  <td class=xl64 width=185 style='width:139pt'>说明</td>
 </tr>
 <tr height=128 style='height:96.0pt'>
  <td rowspan=3 height=208 class=xl69 width=87 style='border-bottom:1.0pt;
  height:156.0pt;border-top:none;width:65pt'>queryMsgById</td>
  <td rowspan=3 class=xl72 width=87 style='border-bottom:1.0pt;
  border-top:none;width:65pt'>根据offsetMsgId查询msg，如果使用开源控制台，应使用offsetMsgId，此命令还有其他参数，具体作用请阅读QueryMsgByIdSubCommand。</td>
  <td class=xl67 width=87 style='width:65pt'>-i</td>
  <td class=xl67 width=87 style='width:65pt'>msgId</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-h</td>
  <td class=xl68 width=87 style='width:65pt'>打印帮助</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-n</td>
  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td rowspan=4 height=126 class=xl69 width=87 style='border-bottom:1.0pt;
  height:94.0pt;border-top:none;width:65pt'>queryMsgByKey</td>
  <td rowspan=4 class=xl72 width=87 style='border-bottom:1.0pt;
  border-top:none;width:65pt'>根据消息 Key 查询消息</td>
  <td class=xl67 width=87 style='width:65pt'>-k</td>
  <td class=xl67 width=87 style='width:65pt'>msgKey</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-t</td>
  <td class=xl68 width=87 style='width:65pt'>Topic 名称</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-h</td>
  <td class=xl68 width=87 style='width:65pt'>打印帮助</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-n</td>
  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td>
 </tr>
 <tr height=225 style='height:169.0pt'>
  <td rowspan=6 height=390 class=xl69 width=87 style='border-bottom:1.0pt;
  height:292.0pt;border-top:none;width:65pt'>queryMsgByOffset</td>
  <td rowspan=6 class=xl72 width=87 style='border-bottom:1.0pt;
  border-top:none;width:65pt'>根据 Offset 查询消息</td>
  <td class=xl67 width=87 style='width:65pt'>-b</td>
  <td class=xl68 width=87 style='width:65pt'>Broker 名称，（这里需要注意
  填写的是 Broker 的名称，不是 Broker 的地址，Broker 名称可以在 clusterList 查到）</td>
 </tr>
 <tr height=39 style='height:29.0pt'>
  <td height=39 class=xl67 width=87 style='height:29.0pt;width:65pt'>-i</td>
  <td class=xl68 width=87 style='width:65pt'>query 队列 id</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-o</td>
  <td class=xl68 width=87 style='width:65pt'>offset 值</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-t</td>
  <td class=xl68 width=87 style='width:65pt'>topic 名称</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-h</td>
  <td class=xl68 width=87 style='width:65pt'>打印帮助</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-n</td>
  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td>
 </tr>
 <tr height=47>
  <td rowspan=6 height=209 class=xl69 width=87 style='border-bottom:1.0pt;
  height:156.0pt;border-top:none;width:65pt'>queryMsgByUniqueKey</td>
  <td rowspan=6 class=xl72 width=87 style='border-bottom:1.0pt;
  border-top:none;width:65pt'>根据msgId查询，msgId不同于offsetMsgId，区别详见常见运维问题。-g，-d配合使用，查到消息后尝试让特定的消费者消费消息并返回消费结果</td>
  <td class=xl67 width=87 style='width:65pt'>-h</td>
  <td class=xl68 width=87 style='width:65pt'>打印帮助</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-n</td>
  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-i</td>
  <td class=xl67 width=87 style='width:65pt'>uniqe msg id</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl67 width=87 style='height:27.0pt;width:65pt'>-g</td>
  <td class=xl67 width=87 style='width:65pt'>consumerGroup</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-d</td>
  <td class=xl67 width=87 style='width:65pt'>clientId</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-t</td>
  <td class=xl68 width=87 style='width:65pt'>topic名称</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td rowspan=5 height=149 class=xl69 width=87 style='border-bottom:1.0pt
  height:111.0pt;border-top:none;width:65pt'>checkMsgSendRT</td>
  <td rowspan=5 class=xl72 width=87 style='border-bottom:1.0pt;
  border-top:none;width:65pt'>检测向topic发消息的RT，功能类似clusterRT</td>
  <td class=xl67 width=87 style='width:65pt'>-h</td>
  <td class=xl68 width=87 style='width:65pt'>打印帮助</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-n</td>
  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-t</td>
  <td class=xl68 width=87 style='width:65pt'>topic名称</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-a</td>
  <td class=xl68 width=87 style='width:65pt'>探测次数</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-s</td>
  <td class=xl68 width=87 style='width:65pt'>消息大小</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td rowspan=8 height=218 class=xl69 width=87 style='border-bottom:1.0pt;
  height:162.0pt;border-top:none;width:65pt'>sendMessage</td>
  <td rowspan=8 class=xl72 width=87 style='border-bottom:1.0pt;
  border-top:none;width:65pt'>发送一条消息，可以根据配置发往特定Message Queue，或普通发送。</td>
  <td class=xl67 width=87 style='width:65pt'>-h</td>
  <td class=xl68 width=87 style='width:65pt'>打印帮助</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-n</td>
  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-t</td>
  <td class=xl68 width=87 style='width:65pt'>topic名称</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-p</td>
  <td class=xl68 width=87 style='width:65pt'>body，消息体</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-k</td>
  <td class=xl67 width=87 style='width:65pt'>keys</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-c</td>
  <td class=xl67 width=87 style='width:65pt'>tags</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-b</td>
  <td class=xl67 width=87 style='width:65pt'>BrokerName</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-i</td>
  <td class=xl67 width=87 style='width:65pt'>queueId</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td rowspan=10 height=312 class=xl69 width=87 style='border-bottom:1.0pt;
  height:232.0pt;border-top:none;width:65pt'>consumeMessage</td>
  <td rowspan=10 class=xl72 width=87 style='border-bottom:1.0pt;
  border-top:none;width:65pt'>消费消息。可以根据offset、开始&amp;结束时间戳、消息队列消费消息，配置不同执行不同消费逻辑，详见ConsumeMessageCommand。</td>
  <td class=xl67 width=87 style='width:65pt'>-h</td>
  <td class=xl68 width=87 style='width:65pt'>打印帮助</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-n</td>
  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-t</td>
  <td class=xl68 width=87 style='width:65pt'>topic名称</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-b</td>
  <td class=xl67 width=87 style='width:65pt'>BrokerName</td>
 </tr>
 <tr height=39 style='height:29.0pt'>
  <td height=39 class=xl67 width=87 style='height:29.0pt;width:65pt'>-o</td>
  <td class=xl68 width=87 style='width:65pt'>从offset开始消费</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-i</td>
  <td class=xl67 width=87 style='width:65pt'>queueId</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-g</td>
  <td class=xl68 width=87 style='width:65pt'>消费者分组</td>
 </tr>
 <tr height=39 style='height:29.0pt'>
  <td height=39 class=xl67 width=87 style='height:29.0pt;width:65pt'>-s</td>
  <td class=xl68 width=87 style='width:65pt'>开始时间戳，格式详见-h</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-d</td>
  <td class=xl68 width=87 style='width:65pt'>结束时间戳</td>
 </tr>
 <tr height=39 style='height:29.0pt'>
  <td height=39 class=xl67 width=87 style='height:29.0pt;width:65pt'>-c</td>
  <td class=xl68 width=87 style='width:65pt'>消费多少条消息</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td rowspan=8 height=282 class=xl69 width=87 style='border-bottom:1.0pt;
  height:210.0pt;border-top:none;width:65pt'>printMsg</td>
  <td rowspan=8 class=xl72 width=87 style='border-bottom:1.0pt;
  border-top:none;width:65pt'>从Broker消费消息并打印，可选时间段</td>
  <td class=xl67 width=87 style='width:65pt'>-h</td>
  <td class=xl68 width=87 style='width:65pt'>打印帮助</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-n</td>
  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-t</td>
  <td class=xl68 width=87 style='width:65pt'>topic名称</td>
 </tr>
 <tr height=39 style='height:29.0pt'>
  <td height=39 class=xl67 width=87 style='height:29.0pt;width:65pt'>-c</td>
  <td class=xl68 width=87 style='width:65pt'>字符集，例如UTF-8</td>
 </tr>
 <tr height=39 style='height:29.0pt'>
  <td height=39 class=xl67 width=87 style='height:29.0pt;width:65pt'>-s</td>
  <td class=xl68 width=87 style='width:65pt'>subExpress，过滤表达式</td>
 </tr>
 <tr height=39 style='height:29.0pt'>
  <td height=39 class=xl67 width=87 style='height:29.0pt;width:65pt'>-b</td>
  <td class=xl68 width=87 style='width:65pt'>开始时间戳，格式参见-h</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-e</td>
  <td class=xl68 width=87 style='width:65pt'>结束时间戳</td>
 </tr>
 <tr height=39 style='height:29.0pt'>
  <td height=39 class=xl67 width=87 style='height:29.0pt;width:65pt'>-d</td>
  <td class=xl68 width=87 style='width:65pt'>是否打印消息体</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td rowspan=12 height=390 class=xl69 width=87 style='border-bottom:1.0pt;
  height:290.0pt;border-top:none;width:65pt'>printMsgByQueue</td>
  <td rowspan=12 class=xl72 width=87 style='border-bottom:1.0pt;
  border-top:none;width:65pt'>类似printMsg，但指定Message Queue</td>
  <td class=xl67 width=87 style='width:65pt'>-h</td>
  <td class=xl68 width=87 style='width:65pt'>打印帮助</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-n</td>
  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-t</td>
  <td class=xl68 width=87 style='width:65pt'>topic名称</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-i</td>
  <td class=xl67 width=87 style='width:65pt'>queueId</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-a</td>
  <td class=xl67 width=87 style='width:65pt'>BrokerName</td>
 </tr>
 <tr height=39 style='height:29.0pt'>
  <td height=39 class=xl67 width=87 style='height:29.0pt;width:65pt'>-c</td>
  <td class=xl68 width=87 style='width:65pt'>字符集，例如UTF-8</td>
 </tr>
 <tr height=39 style='height:29.0pt'>
  <td height=39 class=xl67 width=87 style='height:29.0pt;width:65pt'>-s</td>
  <td class=xl68 width=87 style='width:65pt'>subExpress，过滤表达式</td>
 </tr>
 <tr height=39 style='height:29.0pt'>
  <td height=39 class=xl67 width=87 style='height:29.0pt;width:65pt'>-b</td>
  <td class=xl68 width=87 style='width:65pt'>开始时间戳，格式参见-h</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-e</td>
  <td class=xl68 width=87 style='width:65pt'>结束时间戳</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-p</td>
  <td class=xl68 width=87 style='width:65pt'>是否打印消息</td>
 </tr>
 <tr height=39 style='height:29.0pt'>
  <td height=39 class=xl67 width=87 style='height:29.0pt;width:65pt'>-d</td>
  <td class=xl68 width=87 style='width:65pt'>是否打印消息体</td>
 </tr>
 <tr height=39 style='height:29.0pt'>
  <td height=39 class=xl67 width=87 style='height:29.0pt;width:65pt'>-f</td>
  <td class=xl68 width=87 style='width:65pt'>是否统计tag数量并打印</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td rowspan=7 height=410 class=xl69 width=87 style='border-bottom:1.0pt;
  height:307.0pt;border-top:none;width:65pt'>resetOffsetByTime</td>
  <td rowspan=7 class=xl72 width=87 style='border-bottom:1.0pt;
  border-top:none;width:65pt'>按时间戳重置offset，Broker和consumer都会重置</td>
  <td class=xl67 width=87 style='width:65pt'>-h</td>
  <td class=xl68 width=87 style='width:65pt'>打印帮助</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-n</td>
  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-g</td>
  <td class=xl68 width=87 style='width:65pt'>消费者分组</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-t</td>
  <td class=xl68 width=87 style='width:65pt'>topic名称</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-s</td>
  <td class=xl68 width=87 style='width:65pt'>重置为此时间戳对应的offset</td>
 </tr>
 <tr height=188 style='height:141.0pt'>
  <td height=188 class=xl67 width=87 style='height:141.0pt;width:65pt'>-f</td>
  <td class=xl68 width=87 style='width:65pt'>是否强制重置，如果false，只支持回溯offset，如果true，不管时间戳对应offset与consumeOffset关系</td>
 </tr>
 <tr height=39 style='height:29.0pt'>
  <td height=39 class=xl67 width=87 style='height:29.0pt;width:65pt'>-c</td>
  <td class=xl68 width=87 style='width:65pt'>是否重置c++客户端offset</td>
 </tr>
</table>



<h6 id="5）消费者、消费组相关"><a href="#5）消费者、消费组相关" class="headerlink" title="5）消费者、消费组相关"></a>5）消费者、消费组相关</h6><table border=0 cellpadding=0 cellspacing=0 width=714>
 <col width=177>
 <col width=175>
 <col width=177>
 <col width=185>
<tr height=23 style='height:17.0pt'>
  <td height=23 class=xl63 width=177 style='height:17.0pt;width:133pt'>名称</td>
  <td class=xl64 width=175 style='width:131pt'>含义</td>
  <td class=xl64 width=177 style='width:133pt'>命令选项</td>
  <td class=xl64 width=185 style='width:139pt'>说明</td>
 </tr>
 <tr height=39 style='height:29.0pt'>
  <td rowspan=4 height=158 class=xl69 width=87 style='border-bottom:1.0pt;
  height:110pt;border-top:none;width:65pt'>consumerProgress</td>
  <td rowspan=4 class=xl72 width=87 style='border-bottom:1.0pt;
  border-top:none;width:65pt'>查看订阅组消费状态，可以查看具体的client IP的消息积累量</td>
  <td class=xl67 width=87 style='width:65pt'>-g</td>
  <td class=xl68 width=87 style='width:65pt'>消费者所属组名</td>
 </tr>
 <tr height=39 style='height:29.0pt'>
  <td height=39 class=xl67 width=87 style='height:29.0pt;width:65pt'>-s</td>
  <td class=xl68 width=87 style='width:65pt'>是否打印client IP</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-h</td>
  <td class=xl68 width=87 style='width:65pt'>打印帮助</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-n</td>
  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td>
 </tr>
 <tr height=105 style='mso-height-source:userset;height:79.0pt'>
  <td rowspan=5 height=260 class=xl69 width=87 style='border-bottom:1.0pt;
  height:195.0pt;border-top:none;width:65pt'>consumerStatus</td>
  <td rowspan=5 class=xl72 width=87 style='border-bottom:1.0pt
  border-top:none;width:65pt'>查看消费者状态，包括同一个分组中是否都是相同的订阅，分析Process
  Queue是否堆积，返回消费者jstack结果，内容较多，使用者参见ConsumerStatusSubCommand</td>
  <td class=xl67 width=87 style='width:65pt'>-h</td>
  <td class=xl68 width=87 style='width:65pt'>打印帮助</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-n</td>
  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl67 width=87 style='height:27.0pt;width:65pt'>-g</td>
  <td class=xl67 width=87 style='width:65pt'>consumer group</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-i</td>
  <td class=xl67 width=87 style='width:65pt'>clientId</td>
 </tr>
 <tr height=39 style='height:29.0pt'>
  <td height=39 class=xl67 width=87 style='height:29.0pt;width:65pt'>-s</td>
  <td class=xl68 width=87 style='width:65pt'>是否执行jstack</td>
 </tr>
 <tr height=39 style='height:29.0pt'>
  <td rowspan=5 height=181 class=xl69 width=87 style='border-bottom:1.0pt
  height:135.0pt;border-top:none;width:65pt'>getConsumerStatus</td>
  <td rowspan=5 class=xl72 width=87 style='border-bottom:1.0pt
  border-top:none;width:65pt'>获取 Consumer 消费进度</td>
  <td class=xl67 width=87 style='width:65pt'>-g</td>
  <td class=xl68 width=87 style='width:65pt'>消费者所属组名</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-t</td>
  <td class=xl68 width=87 style='width:65pt'>查询主题</td>
 </tr>
 <tr height=39 style='height:29.0pt'>
  <td height=39 class=xl67 width=87 style='height:29.0pt;width:65pt'>-i</td>
  <td class=xl68 width=87 style='width:65pt'>Consumer 客户端 ip</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-n</td>
  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-h</td>
  <td class=xl68 width=87 style='width:65pt'>打印帮助</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td rowspan=13 height=761 class=xl69 width=87 style='border-bottom:1.0pt
  height:569.0pt;border-top:none;width:65pt'>updateSubGroup</td>
  <td rowspan=13 class=xl72 width=87 style='border-bottom:1.0pt
  border-top:none;width:65pt'>更新或创建订阅关系</td>
  <td class=xl67 width=87 style='width:65pt'>-n</td>
  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-h</td>
  <td class=xl68 width=87 style='width:65pt'>打印帮助</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-b</td>
  <td class=xl68 width=87 style='width:65pt'>Broker地址</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-c</td>
  <td class=xl68 width=87 style='width:65pt'>集群名称</td>
 </tr>
 <tr height=39 style='height:29.0pt'>
  <td height=39 class=xl67 width=87 style='height:29.0pt;width:65pt'>-g</td>
  <td class=xl68 width=87 style='width:65pt'>消费者分组名称</td>
 </tr>
 <tr height=39 style='height:29.0pt'>
  <td height=39 class=xl67 width=87 style='height:29.0pt;width:65pt'>-s</td>
  <td class=xl68 width=87 style='width:65pt'>分组是否允许消费</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-m</td>
  <td class=xl68 width=87 style='width:65pt'>是否从最小offset开始消费</td>
 </tr>
 <tr height=39 style='height:29.0pt'>
  <td height=39 class=xl67 width=87 style='height:29.0pt;width:65pt'>-d</td>
  <td class=xl68 width=87 style='width:65pt'>是否是广播模式</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-q</td>
  <td class=xl68 width=87 style='width:65pt'>重试队列数量</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-r</td>
  <td class=xl68 width=87 style='width:65pt'>最大重试次数</td>
 </tr>
 <tr height=207 style='height:155.0pt'>
  <td height=207 class=xl67 width=87 style='height:155.0pt;width:65pt'>-i</td>
  <td class=xl68 width=87 style='width:65pt'>当slaveReadEnable开启时有效，且还未达到从slave消费时建议从哪个BrokerId消费，可以配置备机id，主动从备机消费</td>
 </tr>
 <tr height=132 style='height:99.0pt'>
  <td height=132 class=xl67 width=87 style='height:99.0pt;width:65pt'>-w</td>
  <td class=xl68 width=87 style='width:65pt'>如果Broker建议从slave消费，配置决定从哪个slave消费，配置BrokerId，例如1</td>
 </tr>
 <tr height=76 style='height:57.0pt'>
  <td height=76 class=xl67 width=87 style='height:57.0pt;width:65pt'>-a</td>
  <td class=xl68 width=87 style='width:65pt'>当消费者数量变化时是否通知其他消费者负载均衡</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td rowspan=5 height=165 class=xl69 width=87 style='border-bottom:1.0pt
  height:123.0pt;border-top:none;width:65pt'>deleteSubGroup</td>
  <td rowspan=5 class=xl72 width=87 style='border-bottom:1.0pt
  border-top:none;width:65pt'>从Broker删除订阅关系</td>
  <td class=xl67 width=87 style='width:65pt'>-n</td>
  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-h</td>
  <td class=xl68 width=87 style='width:65pt'>打印帮助</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-b</td>
  <td class=xl68 width=87 style='width:65pt'>Broker地址</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-c</td>
  <td class=xl68 width=87 style='width:65pt'>集群名称</td>
 </tr>
 <tr height=39 style='height:29.0pt'>
  <td height=39 class=xl67 width=87 style='height:29.0pt;width:65pt'>-g</td>
  <td class=xl68 width=87 style='width:65pt'>消费者分组名称</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td rowspan=6 height=172 class=xl69 width=87 style='border-bottom:1.0pt
  height:120pt;border-top:none;width:65pt'>cloneGroupOffset</td>
  <td rowspan=6 class=xl72 width=87 style='border-bottom:1.0pt
  border-top:none;width:65pt'>在目标群组中使用源群组的offset</td>
  <td class=xl67 width=87 style='width:65pt'>-n</td>
  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-h</td>
  <td class=xl68 width=87 style='width:65pt'>打印帮助</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-s</td>
  <td class=xl68 width=87 style='width:65pt'>源消费者组</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-d</td>
  <td class=xl68 width=87 style='width:65pt'>目标消费者组</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-t</td>
  <td class=xl68 width=87 style='width:65pt'>topic名称</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-o</td>
  <td class=xl68 width=87 style='width:65pt'>暂未使用</td>
 </tr>
</table>



<h6 id="6）连接相关"><a href="#6）连接相关" class="headerlink" title="6）连接相关"></a>6）连接相关</h6><table border=0 cellpadding=0 cellspacing=0 width=714>
 <col width=177>
 <col width=175>
 <col width=177>
 <col width=185>
<tr height=23 style='height:17.0pt'>
  <td height=23 class=xl63 width=177 style='height:17.0pt;width:133pt'>名称</td>
  <td class=xl64 width=175 style='width:131pt'>含义</td>
  <td class=xl64 width=177 style='width:133pt'>命令选项</td>
  <td class=xl64 width=185 style='width:139pt'>说明</td>
 </tr>
 <tr height=39 style='height:29.0pt'>
  <td rowspan=3 height=119 class=xl69 width=87 style='border-bottom:1.0pt
  height:89.0pt;border-top:none;width:65pt'>consumerConnec tion</td>
  <td rowspan=3 class=xl72 width=87 style='border-bottom:1.0pt
  border-top:none;width:65pt'>查询 Consumer 的网络连接</td>
  <td class=xl67 width=87 style='width:65pt'>-g</td>
  <td class=xl68 width=87 style='width:65pt'>消费者所属组名</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-n</td>
  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-h</td>
  <td class=xl68 width=87 style='width:65pt'>打印帮助</td>
 </tr>
 <tr height=39 style='height:29.0pt'>
  <td rowspan=4 height=142 class=xl69 width=87 style='border-bottom:1.0pt
  height:106.0pt;border-top:none;width:65pt'>producerConnec tion</td>
  <td rowspan=4 class=xl72 width=87 style='border-bottom:1.0pt
  border-top:none;width:65pt'>查询 Producer 的网络连接</td>
  <td class=xl67 width=87 style='width:65pt'>-g</td>
  <td class=xl68 width=87 style='width:65pt'>生产者所属组名</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-t</td>
  <td class=xl68 width=87 style='width:65pt'>主题名称</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-n</td>
  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-h</td>
  <td class=xl68 width=87 style='width:65pt'>打印帮助</td>
 </tr>
</table>



<h6 id="7）NameServer相关"><a href="#7）NameServer相关" class="headerlink" title="7）NameServer相关"></a>7）NameServer相关</h6><table border=0 cellpadding=0 cellspacing=0 width=714>
 <col width=177>
 <col width=175>
 <col width=177>
 <col width=185>
<tr height=23 style='height:17.0pt'>
  <td height=23 class=xl63 width=177 style='height:17.0pt;width:133pt'>名称</td>
  <td class=xl64 width=175 style='width:131pt'>含义</td>
  <td class=xl64 width=177 style='width:133pt'>命令选项</td>
  <td class=xl64 width=185 style='width:139pt'>说明</td>
 </tr>
 <tr height=21 style='height:16.0pt'>
  <td rowspan=5 height=143 class=xl69 width=87 style='border-bottom:1.0pt
  height:100pt;border-top:none;width:65pt'>updateKvConfig</td>
  <td rowspan=5 class=xl72 width=87 style='border-bottom:1.0pt
  border-top:none;width:65pt'>更新NameServer的kv配置，目前还未使用</td>
  <td class=xl75 width=87 style='width:65pt'>-s</td>
  <td class=xl76 width=87 style='width:65pt'>命名空间</td>
 </tr>
 <tr height=21 style='height:16.0pt'>
  <td height=21 class=xl75 width=87 style='height:16.0pt;width:65pt'>-k</td>
  <td class=xl75 width=87 style='width:65pt'>key</td>
 </tr>
 <tr height=21 style='height:16.0pt'>
  <td height=21 class=xl75 width=87 style='height:16.0pt;width:65pt'>-v</td>
  <td class=xl75 width=87 style='width:65pt'>value</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-n</td>
  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-h</td>
  <td class=xl68 width=87 style='width:65pt'>打印帮助</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td rowspan=4 height=126 class=xl69 width=87 style='border-bottom:1.0pt
  height:94.0pt;border-top:none;width:65pt'>deleteKvConfig</td>
  <td rowspan=4 class=xl72 width=87 style='border-bottom:1.0pt
  border-top:none;width:65pt'>删除NameServer的kv配置</td>
  <td class=xl67 width=87 style='width:65pt'>-s</td>
  <td class=xl68 width=87 style='width:65pt'>命名空间</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-k</td>
  <td class=xl67 width=87 style='width:65pt'>key</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-n</td>
  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-h</td>
  <td class=xl68 width=87 style='width:65pt'>打印帮助</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td rowspan=2 height=80 class=xl69 width=87 style='border-bottom:1.0pt
  height:60.0pt;border-top:none;width:65pt'>getNamesrvConfig</td>
  <td rowspan=2 class=xl72 width=87 style='border-bottom:1.0pt
  border-top:none;width:65pt'>获取NameServer配置</td>
  <td class=xl67 width=87 style='width:65pt'>-n</td>
  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-h</td>
  <td class=xl68 width=87 style='width:65pt'>打印帮助</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td rowspan=4 height=126 class=xl69 width=87 style='border-bottom:1.0pt
  height:94.0pt;border-top:none;width:65pt'>updateNamesrvConfig</td>
  <td rowspan=4 class=xl72 width=87 style='border-bottom:1.0pt
  border-top:none;width:65pt'>修改NameServer配置</td>
  <td class=xl67 width=87 style='width:65pt'>-n</td>
  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-h</td>
  <td class=xl68 width=87 style='width:65pt'>打印帮助</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-k</td>
  <td class=xl67 width=87 style='width:65pt'>key</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-v</td>
  <td class=xl67 width=87 style='width:65pt'>value</td>
 </tr>
</table>



<h6 id="8）其他"><a href="#8）其他" class="headerlink" title="8）其他"></a>8）其他</h6><table border=0 cellpadding=0 cellspacing=0 width=714>
 <col width=177>
 <col width=175>
 <col width=177>
 <col width=185>
<tr height=23 style='height:17.0pt'>
  <td height=23 class=xl63 width=177 style='height:17.0pt;width:133pt'>名称</td>
  <td class=xl64 width=175 style='width:131pt'>含义</td>
  <td class=xl64 width=177 style='width:133pt'>命令选项</td>
  <td class=xl64 width=185 style='width:139pt'>说明</td>
 </tr>
 <tr height=57 style='height:43.0pt'>
  <td rowspan=2 height=80 class=xl69 width=87 style='border-bottom:1.0pt
  height:60.0pt;border-top:none;width:65pt'>startMonitoring</td>
  <td rowspan=2 class=xl71 width=87 style='border-bottom:1.0pt
  border-top:none;width:65pt'>开启监控进程，监控消息误删、重试队列消息数等</td>
  <td class=xl67 width=87 style='width:65pt'>-n</td>
  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td>
 </tr>
 <tr height=23 style='height:17.0pt'>
  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-h</td>
  <td class=xl68 width=87 style='width:65pt'>打印帮助</td>
 </tr>
</table>



<h5 id="3-13-3-注意事项"><a href="#3-13-3-注意事项" class="headerlink" title="3.13.3 注意事项"></a>3.13.3 注意事项</h5><ul>
<li>几乎所有命令都需要配置-n表示NameServer地址，格式为ip:port</li>
<li>几乎所有命令都可以通过-h获取帮助</li>
<li>如果既有Broker地址（-b）配置项又有clusterName（-c）配置项，则优先以Broker地址执行命令；如果不配置Broker地址，则对集群中所有主机执行命令</li>
</ul>
<h4 id="3-14-集群监控平台搭建"><a href="#3-14-集群监控平台搭建" class="headerlink" title="3.14 集群监控平台搭建"></a>3.14 集群监控平台搭建</h4><h5 id="3-14-1-概述"><a href="#3-14-1-概述" class="headerlink" title="3.14.1 概述"></a>3.14.1 概述</h5><p><code>RocketMQ</code>有一个对其扩展的开源项目<a href="https://github.com/apache/rocketmq-externals">incubator-rocketmq-externals</a>，这个项目中有一个子模块叫<code>rocketmq-console</code>，这个便是管理控制台项目了，先将<a href="https://github.com/apache/rocketmq-externals">incubator-rocketmq-externals</a>拉到本地，因为我们需要自己对<code>rocketmq-console</code>进行编译打包运行。</p>
<h5 id="3-14-2-下载并编译打包"><a href="#3-14-2-下载并编译打包" class="headerlink" title="3.14.2 下载并编译打包"></a>3.14.2 下载并编译打包</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/apache/rocketmq-externals</span><br><span class="line"><span class="built_in">cd</span> rocketmq-console</span><br><span class="line">mvn clean package -Dmaven.test.skip=<span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>注意：打包前在<code>rocketmq-console</code>中配置<code>namesrv</code>集群地址：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rocketmq.config.namesrvAddr=192.168.25.135:9876;192.168.25.138:9876</span><br></pre></td></tr></table></figure>

<p>启动rocketmq-console：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">java -jar rocketmq-console-ng-1.0.0.jar</span><br></pre></td></tr></table></figure>

<p>启动成功后，我们就可以通过浏览器访问<code>http://localhost:8080</code>进入控制台界面了，如下图：</p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/RocketMQ/rocketmq-console2.png"></p>
<p>集群状态：</p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/RocketMQ/rocketmq-console3.png"></p>
<h2 id="六-Simple-Example"><a href="#六-Simple-Example" class="headerlink" title="六 Simple Example"></a>六 Simple Example</h2><ul>
<li>导入MQ客户端依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>消息发送者步骤分析r</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.创建消息生产者producer，并制定生产者组名</span><br><span class="line">2.指定Nameserver地址</span><br><span class="line">3.启动producer</span><br><span class="line">4.创建消息对象，指定主题Topic、Tag和消息体</span><br><span class="line">5.发送消息</span><br><span class="line">6.关闭生产者producer</span><br></pre></td></tr></table></figure>

<ul>
<li>消息消费者步骤分析</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.创建消费者Consumer，制定消费者组名</span><br><span class="line">2.指定Nameserver地址</span><br><span class="line">3.订阅主题Topic和Tag</span><br><span class="line">4.设置回调函数，处理消息</span><br><span class="line">5.启动消费者consumer</span><br></pre></td></tr></table></figure>

<h3 id="1-消息发送"><a href="#1-消息发送" class="headerlink" title="1 消息发送"></a>1 消息发送</h3><h4 id="1-1-发送同步消息"><a href="#1-1-发送同步消息" class="headerlink" title="1.1 发送同步消息"></a>1.1 发送同步消息</h4><p>这种可靠性同步地发送方式使用的比较广泛，比如：重要的消息通知，短信通知。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncProducer</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    	<span class="comment">// 实例化消息生产者Producer</span></span><br><span class="line">        DefaultMQProducer producer = <span class="keyword">new</span> DefaultMQProducer(<span class="string">&quot;please_rename_unique_group_name&quot;</span>);</span><br><span class="line">    	<span class="comment">// 设置NameServer的地址</span></span><br><span class="line">    	producer.setNamesrvAddr(<span class="string">&quot;localhost:9876&quot;</span>);</span><br><span class="line">    	<span class="comment">// 启动Producer实例</span></span><br><span class="line">        producer.start();</span><br><span class="line">    	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    	    <span class="comment">// 创建消息，并指定Topic，Tag和消息体</span></span><br><span class="line">    	    Message msg = <span class="keyword">new</span> Message(<span class="string">&quot;TopicTest&quot;</span> <span class="comment">/* Topic */</span>,</span><br><span class="line">        	<span class="string">&quot;TagA&quot;</span> <span class="comment">/* Tag */</span>,</span><br><span class="line">        	(<span class="string">&quot;Hello RocketMQ &quot;</span> + i).getBytes(RemotingHelper.DEFAULT_CHARSET) <span class="comment">/* Message body */</span></span><br><span class="line">        	);</span><br><span class="line">        	<span class="comment">// 发送消息到一个Broker</span></span><br><span class="line">            SendResult sendResult = producer.send(msg);</span><br><span class="line">            <span class="comment">// 通过sendResult返回消息是否成功送达</span></span><br><span class="line">            System.out.printf(<span class="string">&quot;%s%n&quot;</span>, sendResult);</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="comment">// 如果不再发送消息，关闭Producer实例。</span></span><br><span class="line">    	producer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-2-发送异步消息"><a href="#1-2-发送异步消息" class="headerlink" title="1.2 发送异步消息"></a>1.2 发送异步消息</h4><p>异步消息通常用在对响应时间敏感的业务场景，即发送端不能容忍长时间地等待Broker的响应。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncProducer</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    	<span class="comment">// 实例化消息生产者Producer</span></span><br><span class="line">        DefaultMQProducer producer = <span class="keyword">new</span> DefaultMQProducer(<span class="string">&quot;please_rename_unique_group_name&quot;</span>);</span><br><span class="line">    	<span class="comment">// 设置NameServer的地址</span></span><br><span class="line">        producer.setNamesrvAddr(<span class="string">&quot;localhost:9876&quot;</span>);</span><br><span class="line">    	<span class="comment">// 启动Producer实例</span></span><br><span class="line">        producer.start();</span><br><span class="line">        producer.setRetryTimesWhenSendAsyncFailed(<span class="number">0</span>);</span><br><span class="line">    	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> index = i;</span><br><span class="line">            	<span class="comment">// 创建消息，并指定Topic，Tag和消息体</span></span><br><span class="line">                Message msg = <span class="keyword">new</span> Message(<span class="string">&quot;TopicTest&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;TagA&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;OrderID188&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Hello world&quot;</span>.getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class="line">                <span class="comment">// SendCallback接收异步返回结果的回调</span></span><br><span class="line">                producer.send(msg, <span class="keyword">new</span> SendCallback() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(SendResult sendResult)</span> </span>&#123;</span><br><span class="line">                        System.out.printf(<span class="string">&quot;%-10d OK %s %n&quot;</span>, index,</span><br><span class="line">                            sendResult.getMsgId());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onException</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">      	              System.out.printf(<span class="string">&quot;%-10d Exception %s %n&quot;</span>, index, e);</span><br><span class="line">      	              e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">            	&#125;);</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="comment">// 如果不再发送消息，关闭Producer实例。</span></span><br><span class="line">    	producer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-3-单向发送消息"><a href="#1-3-单向发送消息" class="headerlink" title="1.3 单向发送消息"></a>1.3 单向发送消息</h4><p>这种方式主要用在不特别关心发送结果的场景，例如日志发送。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OnewayProducer</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    	<span class="comment">// 实例化消息生产者Producer</span></span><br><span class="line">        DefaultMQProducer producer = <span class="keyword">new</span> DefaultMQProducer(<span class="string">&quot;please_rename_unique_group_name&quot;</span>);</span><br><span class="line">    	<span class="comment">// 设置NameServer的地址</span></span><br><span class="line">        producer.setNamesrvAddr(<span class="string">&quot;localhost:9876&quot;</span>);</span><br><span class="line">    	<span class="comment">// 启动Producer实例</span></span><br><span class="line">        producer.start();</span><br><span class="line">    	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        	<span class="comment">// 创建消息，并指定Topic，Tag和消息体</span></span><br><span class="line">        	Message msg = <span class="keyword">new</span> Message(<span class="string">&quot;TopicTest&quot;</span> <span class="comment">/* Topic */</span>,</span><br><span class="line">                <span class="string">&quot;TagA&quot;</span> <span class="comment">/* Tag */</span>,</span><br><span class="line">                (<span class="string">&quot;Hello RocketMQ &quot;</span> + i).getBytes(RemotingHelper.DEFAULT_CHARSET) <span class="comment">/* Message body */</span></span><br><span class="line">        	);</span><br><span class="line">        	<span class="comment">// 发送单向消息，没有任何返回结果</span></span><br><span class="line">        	producer.sendOneway(msg);</span><br><span class="line"></span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="comment">// 如果不再发送消息，关闭Producer实例。</span></span><br><span class="line">    	producer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-消费消息"><a href="#2-消费消息" class="headerlink" title="2 消费消息"></a>2 消费消息</h3><h4 id="2-1-负载均衡模式"><a href="#2-1-负载均衡模式" class="headerlink" title="2.1 负载均衡模式"></a>2.1 负载均衡模式</h4><p>消费者采用负载均衡方式消费消息，多个消费者共同消费队列消息，每个消费者处理的消息不同</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 实例化消息生产者,指定组名</span></span><br><span class="line">    DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">&quot;group1&quot;</span>);</span><br><span class="line">    <span class="comment">// 指定Namesrv地址信息.</span></span><br><span class="line">    consumer.setNamesrvAddr(<span class="string">&quot;localhost:9876&quot;</span>);</span><br><span class="line">    <span class="comment">// 订阅Topic</span></span><br><span class="line">    consumer.subscribe(<span class="string">&quot;Test&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">    <span class="comment">//负载均衡模式消费</span></span><br><span class="line">    consumer.setMessageModel(MessageModel.CLUSTERING);</span><br><span class="line">    <span class="comment">// 注册回调函数，处理消息</span></span><br><span class="line">    consumer.registerMessageListener(<span class="keyword">new</span> MessageListenerConcurrently() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; msgs,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                        ConsumeConcurrentlyContext context)</span> </span>&#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%s Receive New Messages: %s %n&quot;</span>, </span><br><span class="line">                              Thread.currentThread().getName(), msgs);</span><br><span class="line">            <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//启动消息者</span></span><br><span class="line">    consumer.start();</span><br><span class="line">    System.out.printf(<span class="string">&quot;Consumer Started.%n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-广播模式"><a href="#2-2-广播模式" class="headerlink" title="2.2 广播模式"></a>2.2 广播模式</h4><p>消费者采用广播的方式消费消息，每个消费者消费的消息都是相同的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 实例化消息生产者,指定组名</span></span><br><span class="line">    DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">&quot;group1&quot;</span>);</span><br><span class="line">    <span class="comment">// 指定Namesrv地址信息.</span></span><br><span class="line">    consumer.setNamesrvAddr(<span class="string">&quot;localhost:9876&quot;</span>);</span><br><span class="line">    <span class="comment">// 订阅Topic</span></span><br><span class="line">    consumer.subscribe(<span class="string">&quot;Test&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">    <span class="comment">//广播模式消费</span></span><br><span class="line">    consumer.setMessageModel(MessageModel.BROADCASTING);</span><br><span class="line">    <span class="comment">// 注册回调函数，处理消息</span></span><br><span class="line">    consumer.registerMessageListener(<span class="keyword">new</span> MessageListenerConcurrently() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; msgs,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                        ConsumeConcurrentlyContext context)</span> </span>&#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%s Receive New Messages: %s %n&quot;</span>, </span><br><span class="line">                              Thread.currentThread().getName(), msgs);</span><br><span class="line">            <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//启动消息者</span></span><br><span class="line">    consumer.start();</span><br><span class="line">    System.out.printf(<span class="string">&quot;Consumer Started.%n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-顺序消息"><a href="#3-顺序消息" class="headerlink" title="3 顺序消息"></a>3 顺序消息</h3><p>消息有序指的是可以按照消息的发送顺序来消费(FIFO)。RocketMQ可以严格的保证消息有序，可以分为分区有序或者全局有序。</p>
<p>顺序消费的原理解析，在默认的情况下消息发送会采取Round Robin轮询方式把消息发送到不同的queue(分区队列)；而消费消息的时候从多个queue上拉取消息，这种情况发送和消费是不能保证顺序。但是如果控制发送的顺序消息只依次发送到同一个queue中，消费的时候只从这个queue上依次拉取，则就保证了顺序。当发送和消费参与的queue只有一个，则是全局有序；如果多个queue参与，则为分区有序，即相对每个queue，消息都是有序的。</p>
<p>下面用订单进行分区有序的示例。一个订单的顺序流程是：创建、付款、推送、完成。订单号相同的消息会被先后发送到同一个队列中，消费时，同一个OrderId获取到的肯定是同一个队列。</p>
<h4 id="3-1-顺序消息生产"><a href="#3-1-顺序消息生产" class="headerlink" title="3.1 顺序消息生产"></a>3.1 顺序消息生产</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建消息生产者producer，并制定生产者组名</span></span><br><span class="line">        DefaultMQProducer producer = <span class="keyword">new</span> DefaultMQProducer(<span class="string">&quot;group1&quot;</span>);</span><br><span class="line">        <span class="comment">//2.指定Nameserver地址</span></span><br><span class="line">        producer.setNamesrvAddr(<span class="string">&quot;192.168.43.254:9876;192.168.43.137:9876&quot;</span>);</span><br><span class="line">        <span class="comment">//3.启动producer</span></span><br><span class="line">        producer.start();</span><br><span class="line">        List&lt;OrderStep&gt; orderSteps = OrderStep.buildOrders();</span><br><span class="line">        <span class="comment">//4.创建消息对象，指定主题Topic、Tag和消息体</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; orderSteps.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] body = orderSteps.get(i).toString().getBytes(StandardCharsets.UTF_8);</span><br><span class="line">            Message message = <span class="keyword">new</span> Message(<span class="string">&quot;orderTopic&quot;</span>, <span class="string">&quot;order&quot;</span>, <span class="string">&quot;i&quot;</span>+i, body);</span><br><span class="line">            SendResult sendResult = producer.send(message, <span class="keyword">new</span> MessageQueueSelector() &#123;</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 *</span></span><br><span class="line"><span class="comment">                 * <span class="doctag">@param</span> list 队列集合</span></span><br><span class="line"><span class="comment">                 * <span class="doctag">@param</span> message 消息对象</span></span><br><span class="line"><span class="comment">                 * <span class="doctag">@param</span> o 业务参数</span></span><br><span class="line"><span class="comment">                 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> MessageQueue <span class="title">select</span><span class="params">(List&lt;MessageQueue&gt; list, Message message, Object o)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">long</span> orderId = (<span class="keyword">long</span>) o;</span><br><span class="line">                    <span class="keyword">int</span> index = (<span class="keyword">int</span>)orderId % orderSteps.size();</span><br><span class="line">                    <span class="keyword">return</span> list.get(index);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, orderSteps.get(i).getOrderId());</span><br><span class="line">            <span class="comment">// 通过sendResult返回消息是否成功送达</span></span><br><span class="line">            System.out.printf(<span class="string">&quot;%s%n&quot;</span>, sendResult);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.关闭生产者producer</span></span><br><span class="line">        producer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-2-顺序消息消费"><a href="#3-2-顺序消息消费" class="headerlink" title="3.2 顺序消息消费"></a>3.2 顺序消息消费</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.创建消费者Consumer，制定消费者组名</span></span><br><span class="line">DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">&quot;group1&quot;</span>);</span><br><span class="line"><span class="comment">//2.指定Nameserver地址</span></span><br><span class="line">consumer.setNamesrvAddr(<span class="string">&quot;192.168.43.254:9876;192.168.43.137:9876&quot;</span>);</span><br><span class="line"><span class="comment">//3.订阅主题Topic和Tag</span></span><br><span class="line">consumer.subscribe(<span class="string">&quot;orderTopic&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line"><span class="comment">//4.设置回调函数，处理消息</span></span><br><span class="line">consumer.registerMessageListener(<span class="keyword">new</span> MessageListenerOrderly() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConsumeOrderlyStatus <span class="title">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; list, ConsumeOrderlyContext consumeOrderlyContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (MessageExt messageExt : list) &#123;</span><br><span class="line">            <span class="comment">// 可以看到每个queue有唯一的consume线程来消费, 订单对每个queue(分区)有序</span></span><br><span class="line">            System.out.println(<span class="string">&quot;线程：&quot;</span> + Thread.currentThread().getName() +<span class="string">&quot;消费消息:&quot;</span> + <span class="keyword">new</span> 					     			String(messageExt.getBody()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ConsumeOrderlyStatus.SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//5.启动消费者consumer</span></span><br><span class="line">consumer.start();</span><br></pre></td></tr></table></figure>

<h3 id="4-延时消息"><a href="#4-延时消息" class="headerlink" title="4  延时消息"></a>4  延时消息</h3><h4 id="4-1-启动消息消费者"><a href="#4-1-启动消息消费者" class="headerlink" title="4.1 启动消息消费者"></a>4.1 启动消息消费者</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.创建消费者Consumer，制定消费者组名</span></span><br><span class="line">DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">&quot;group1&quot;</span>);</span><br><span class="line"><span class="comment">//2.指定Nameserver地址</span></span><br><span class="line">consumer.setNamesrvAddr(<span class="string">&quot;192.168.43.254:9876;192.168.43.137:9876&quot;</span>);</span><br><span class="line"><span class="comment">//3.订阅主题Topic和Tag</span></span><br><span class="line">consumer.subscribe(<span class="string">&quot;delayTopic&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line"><span class="comment">//4.设置回调函数，处理消息</span></span><br><span class="line">consumer.registerMessageListener(<span class="keyword">new</span> MessageListenerConcurrently() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; list, ConsumeConcurrentlyContext consumeConcurrentlyContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (MessageExt messageExt : list) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;消息id：&quot;</span> + messageExt.getMsgId() + <span class="string">&quot;,延迟时间：&quot;</span> + (System.currentTimeMillis() - messageExt.getBornTimestamp()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//5.启动消费者consumer</span></span><br><span class="line">consumer.start();</span><br></pre></td></tr></table></figure>

<h4 id="4-2-发送延时消息-message-setDelayTimeLevel-；"><a href="#4-2-发送延时消息-message-setDelayTimeLevel-；" class="headerlink" title="4.2 发送延时消息 message.setDelayTimeLevel()；"></a>4.2 发送延时消息 <strong>message.setDelayTimeLevel()；</strong></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.创建消息生产者producer，并制定生产者组名</span></span><br><span class="line">DefaultMQProducer producer = <span class="keyword">new</span> DefaultMQProducer(<span class="string">&quot;group1&quot;</span>);</span><br><span class="line"><span class="comment">//2.指定Nameserver地址</span></span><br><span class="line">producer.setNamesrvAddr(<span class="string">&quot;192.168.43.254:9876;192.168.43.137:9876&quot;</span>);</span><br><span class="line"><span class="comment">//3.启动producer</span></span><br><span class="line">producer.start();</span><br><span class="line"><span class="comment">//4.创建消息对象，指定主题Topic、Tag和消息体</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    Message message = <span class="keyword">new</span> Message(<span class="string">&quot;delayTopic&quot;</span>, <span class="string">&quot;tag1&quot;</span>, (<span class="string">&quot;hello world&quot;</span> + i).getBytes(StandardCharsets.UTF_8));</span><br><span class="line">    <span class="comment">// 设定延迟时间</span></span><br><span class="line">    message.setDelayTimeLevel(<span class="number">2</span>);</span><br><span class="line">    <span class="comment">//5.发送消息</span></span><br><span class="line">    SendResult sendResult = producer.send(message);</span><br><span class="line">    System.out.printf(<span class="string">&quot;%s%n&quot;</span>, sendResult);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//6.关闭生产者producer</span></span><br><span class="line">producer.shutdown();</span><br></pre></td></tr></table></figure>

<h4 id="4-3-使用限制"><a href="#4-3-使用限制" class="headerlink" title="4.3 使用限制"></a>4.3 使用限制</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认配置</span></span><br><span class="line"><span class="attr">messageDelayLevel</span>=<span class="string">1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h</span></span><br></pre></td></tr></table></figure>

<p>现在RocketMq并不支持任意时间的延时，需要设置几个固定的延时等级，从1s到2h分别对应着等级1到18</p>
<h2 id="5-批量消息"><a href="#5-批量消息" class="headerlink" title="5 批量消息"></a>5 批量消息</h2><p>批量发送消息能显著提高传递小消息的性能。限制是这些批量消息应该有相同的topic，相同的waitStoreMsgOK，而且不能是延时消息。此外，这一批消息的总大小不应超过4MB。</p>
<h3 id="5-1-发送批量消息"><a href="#5-1-发送批量消息" class="headerlink" title="5.1 发送批量消息"></a>5.1 发送批量消息</h3><p>如果您每次只发送不超过4MB的消息，则很容易使用批处理，样例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String topic = <span class="string">&quot;BatchTest&quot;</span>;</span><br><span class="line">List&lt;Message&gt; messages = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">messages.add(<span class="keyword">new</span> Message(topic, <span class="string">&quot;TagA&quot;</span>, <span class="string">&quot;OrderID001&quot;</span>, <span class="string">&quot;Hello world 0&quot;</span>.getBytes()));</span><br><span class="line">messages.add(<span class="keyword">new</span> Message(topic, <span class="string">&quot;TagA&quot;</span>, <span class="string">&quot;OrderID002&quot;</span>, <span class="string">&quot;Hello world 1&quot;</span>.getBytes()));</span><br><span class="line">messages.add(<span class="keyword">new</span> Message(topic, <span class="string">&quot;TagA&quot;</span>, <span class="string">&quot;OrderID003&quot;</span>, <span class="string">&quot;Hello world 2&quot;</span>.getBytes()));</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   producer.send(messages);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">   e.printStackTrace();</span><br><span class="line">   <span class="comment">//处理error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果消息的总长度可能大于4MB时，这时候最好把消息进行分割</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListSplitter</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">List</span>&lt;<span class="title">Message</span>&gt;&gt; </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> SIZE_LIMIT = <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">4</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Message&gt; messages;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> currIndex;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ListSplitter</span><span class="params">(List&lt;Message&gt; messages)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">this</span>.messages = messages;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> currIndex &lt; messages.size();</span><br><span class="line">   &#125;</span><br><span class="line">   	<span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Message&gt; <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> nextIndex = currIndex;</span><br><span class="line">       <span class="keyword">int</span> totalSize = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span> (; nextIndex &lt; messages.size(); nextIndex++) &#123;</span><br><span class="line">           Message message = messages.get(nextIndex);</span><br><span class="line">           <span class="keyword">int</span> tmpSize = message.getTopic().length() + message.getBody().length;</span><br><span class="line">           Map&lt;String, String&gt; properties = message.getProperties();</span><br><span class="line">           <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : properties.entrySet()) &#123;</span><br><span class="line">               tmpSize += entry.getKey().length() + entry.getValue().length();</span><br><span class="line">           &#125;</span><br><span class="line">           tmpSize = tmpSize + <span class="number">20</span>; <span class="comment">// 增加日志的开销20字节</span></span><br><span class="line">           <span class="keyword">if</span> (tmpSize &gt; SIZE_LIMIT) &#123;</span><br><span class="line">               <span class="comment">//单个消息超过了最大的限制</span></span><br><span class="line">               <span class="comment">//忽略,否则会阻塞分裂的进程</span></span><br><span class="line">               <span class="keyword">if</span> (nextIndex - currIndex == <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="comment">//假如下一个子列表没有元素,则添加这个子列表然后退出循环,否则只是退出循环</span></span><br><span class="line">                  nextIndex++;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (tmpSize + totalSize &gt; SIZE_LIMIT) &#123;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               totalSize += tmpSize;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       List&lt;Message&gt; subList = messages.subList(currIndex, nextIndex);</span><br><span class="line">       currIndex = nextIndex;</span><br><span class="line">       <span class="keyword">return</span> subList;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//把大的消息分裂成若干个小的消息</span></span><br><span class="line">ListSplitter splitter = <span class="keyword">new</span> ListSplitter(messages);</span><br><span class="line"><span class="keyword">while</span> (splitter.hasNext()) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">      List&lt;Message&gt;  listItem = splitter.next();</span><br><span class="line">      producer.send(listItem);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="comment">//处理error</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-过滤消息"><a href="#6-过滤消息" class="headerlink" title="6 过滤消息"></a>6 过滤消息</h2><p>在大多数情况下，TAG是一个简单而有用的设计，其可以来选择您想要的消息。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">&quot;CID_EXAMPLE&quot;</span>);</span><br><span class="line">consumer.subscribe(<span class="string">&quot;TOPIC&quot;</span>, <span class="string">&quot;TAGA || TAGB || TAGC&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>消费者将接收包含TAGA或TAGB或TAGC的消息。但是限制是一个消息只能有一个标签，这对于复杂的场景可能不起作用。在这种情况下，可以使用SQL表达式筛选消息。</p>
<h3 id="6-1-SQL基本语法"><a href="#6-1-SQL基本语法" class="headerlink" title="6.1 SQL基本语法"></a>6.1 SQL基本语法</h3><p>RocketMQ只定义了一些基本语法来支持这个特性。你也可以很容易地扩展它。</p>
<ul>
<li>数值比较，比如：**&gt;，&gt;=，&lt;，&lt;=，BETWEEN，=；**</li>
<li>字符比较，比如：**=，&lt;&gt;，IN；**</li>
<li><strong>IS NULL</strong> 或者 <strong>IS NOT NULL；</strong></li>
<li>逻辑符号 <strong>AND，OR，NOT；</strong></li>
</ul>
<p>常量支持类型为：</p>
<ul>
<li>数值，比如：<strong>123，3.1415；</strong></li>
<li>字符，比如：**’abc’，必须用单引号包裹起来；**</li>
<li><strong>NULL</strong>，特殊的常量</li>
<li>布尔值，<strong>TRUE</strong> 或 <strong>FALSE</strong></li>
</ul>
<p>只有使用push模式的消费者才能用使用SQL92标准的sql语句，接口如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(finalString topic, <span class="keyword">final</span> MessageSelector messageSelector)</span></span></span><br></pre></td></tr></table></figure>

<h3 id="6-2-消息生产者"><a href="#6-2-消息生产者" class="headerlink" title="6.2 消息生产者"></a>6.2 消息生产者</h3><p>发送消息时，你能通过<code>putUserProperty</code>来设置消息的属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DefaultMQProducer producer = <span class="keyword">new</span> DefaultMQProducer(<span class="string">&quot;please_rename_unique_group_name&quot;</span>);</span><br><span class="line">producer.start();</span><br><span class="line">Message msg = <span class="keyword">new</span> Message(<span class="string">&quot;TopicTest&quot;</span>,</span><br><span class="line">   tag,</span><br><span class="line">   (<span class="string">&quot;Hello RocketMQ &quot;</span> + i).getBytes(RemotingHelper.DEFAULT_CHARSET)</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 设置一些属性</span></span><br><span class="line">msg.putUserProperty(<span class="string">&quot;a&quot;</span>, String.valueOf(i));</span><br><span class="line">SendResult sendResult = producer.send(msg);</span><br><span class="line"></span><br><span class="line">producer.shutdown();</span><br></pre></td></tr></table></figure>

<h3 id="6-3-消息消费者"><a href="#6-3-消息消费者" class="headerlink" title="6.3 消息消费者"></a>6.3 消息消费者</h3><p>用MessageSelector.bySql来使用sql筛选消息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">&quot;please_rename_unique_group_name_4&quot;</span>);</span><br><span class="line"><span class="comment">// 只有订阅的消息有这个属性a, a &gt;=0 and a &lt;= 3</span></span><br><span class="line">consumer.subscribe(<span class="string">&quot;TopicTest&quot;</span>, MessageSelector.bySql(<span class="string">&quot;a between 0 and 3&quot;</span>);</span><br><span class="line">consumer.registerMessageListener(<span class="keyword">new</span> MessageListenerConcurrently() &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; msgs, ConsumeConcurrentlyContext context)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br><span class="line">consumer.start();</span><br></pre></td></tr></table></figure>

<h2 id="7-事务消息"><a href="#7-事务消息" class="headerlink" title="7 事务消息"></a>7 事务消息</h2><p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/RocketMQ/%E4%BA%8B%E5%8A%A1%E6%B6%88%E6%81%AF.png"></p>
<p>上图说明了事务消息的大致方案，其中分为两个流程：正常事务消息的发送及提交、事务消息的补偿流程。</p>
<h3 id="7-1-事务消息发送及提交"><a href="#7-1-事务消息发送及提交" class="headerlink" title="7.1 事务消息发送及提交"></a>7.1 事务消息发送及提交</h3><p>(1) 发送消息（half消息）。</p>
<p>(2) 服务端响应消息写入结果。</p>
<p>(3) 根据发送结果执行本地事务（如果写入失败，此时half消息对业务不可见，本地逻辑不执行）。</p>
<p>(4) 根据本地事务状态执行Commit或者Rollback（Commit操作生成消息索引，消息对消费者可见）</p>
<h3 id="7-2-事务补偿"><a href="#7-2-事务补偿" class="headerlink" title="7.2 事务补偿"></a>7.2 事务补偿</h3><p>(1) 对没有Commit/Rollback的事务消息（pending状态的消息），从服务端发起一次“回查”</p>
<p>(2) Producer收到回查消息，检查回查消息对应的本地事务的状态</p>
<p>(3) 根据本地事务状态，重新Commit或者Rollback</p>
<p>其中，补偿阶段用于解决消息Commit或者Rollback发生超时或者失败的情况。</p>
<h3 id="7-3-事务消息状态"><a href="#7-3-事务消息状态" class="headerlink" title="7.3 事务消息状态"></a>7.3 事务消息状态</h3><p>事务消息共有三种状态，提交状态、回滚状态、中间状态：</p>
<ul>
<li>TransactionStatus.CommitTransaction: 提交事务，它允许消费者消费此消息。</li>
<li>TransactionStatus.RollbackTransaction: 回滚事务，它代表该消息将被删除，不允许被消费。</li>
<li>TransactionStatus.Unknown: 中间状态，它代表需要检查消息队列来确定状态。</li>
</ul>
<p>###4.6.1 发送事务消息</p>
<h3 id="7-4-创建事务性生产者"><a href="#7-4-创建事务性生产者" class="headerlink" title="7.4 创建事务性生产者"></a>7.4 创建事务性生产者</h3><p>使用 <code>TransactionMQProducer</code>类创建生产者，并指定唯一的 <code>ProducerGroup</code>，就可以设置自定义线程池来处理这些检查请求。执行本地事务后、需要根据执行结果对消息队列进行回复。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MQClientException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//创建事务监听器</span></span><br><span class="line">        TransactionListener transactionListener = <span class="keyword">new</span> TransactionListenerImpl();</span><br><span class="line">        <span class="comment">//创建消息生产者</span></span><br><span class="line">        TransactionMQProducer producer = <span class="keyword">new</span> TransactionMQProducer(<span class="string">&quot;group6&quot;</span>);</span><br><span class="line">        producer.setNamesrvAddr(<span class="string">&quot;192.168.25.135:9876;192.168.25.138:9876&quot;</span>);</span><br><span class="line">        <span class="comment">//生产者这是监听器</span></span><br><span class="line">        producer.setTransactionListener(transactionListener);</span><br><span class="line">        <span class="comment">//启动消息生产者</span></span><br><span class="line">        producer.start();</span><br><span class="line">        String[] tags = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;TagA&quot;</span>, <span class="string">&quot;TagB&quot;</span>, <span class="string">&quot;TagC&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Message msg = <span class="keyword">new</span> Message(<span class="string">&quot;TransactionTopic&quot;</span>, tags[i % tags.length], <span class="string">&quot;KEY&quot;</span> + i,</span><br><span class="line">                        (<span class="string">&quot;Hello RocketMQ &quot;</span> + i).getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class="line">                SendResult sendResult = producer.sendMessageInTransaction(msg, <span class="keyword">null</span>);</span><br><span class="line">                System.out.printf(<span class="string">&quot;%s%n&quot;</span>, sendResult);</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (MQClientException | UnsupportedEncodingException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//producer.shutdown();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-5-实现事务的监听接口"><a href="#7-5-实现事务的监听接口" class="headerlink" title="7.5 实现事务的监听接口"></a>7.5 实现事务的监听接口</h3><p>当发送半消息成功时，我们使用 <code>executeLocalTransaction</code> 方法来执行本地事务。它返回前一节中提到的三个事务状态之一。<code>checkLocalTranscation</code> 方法用于检查本地事务状态，并回应消息队列的检查请求。它也是返回前一节中提到的三个事务状态之一。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionListenerImpl</span> <span class="keyword">implements</span> <span class="title">TransactionListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalTransactionState <span class="title">executeLocalTransaction</span><span class="params">(Message msg, Object arg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行本地事务&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.equals(<span class="string">&quot;TagA&quot;</span>, msg.getTags())) &#123;</span><br><span class="line">            <span class="keyword">return</span> LocalTransactionState.COMMIT_MESSAGE;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (StringUtils.equals(<span class="string">&quot;TagB&quot;</span>, msg.getTags())) &#123;</span><br><span class="line">            <span class="keyword">return</span> LocalTransactionState.ROLLBACK_MESSAGE;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> LocalTransactionState.UNKNOW;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalTransactionState <span class="title">checkLocalTransaction</span><span class="params">(MessageExt msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MQ检查消息Tag【&quot;</span>+msg.getTags()+<span class="string">&quot;】的本地事务执行结果&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> LocalTransactionState.COMMIT_MESSAGE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-6-使用限制"><a href="#7-6-使用限制" class="headerlink" title="7.6 使用限制"></a>7.6 使用限制</h3><ol>
<li>事务消息不支持延时消息和批量消息。</li>
<li>为了避免单个消息被检查太多次而导致半队列消息累积，我们默认将单个消息的检查次数限制为 15 次，但是用户可以通过 Broker 配置文件的 <code>transactionCheckMax</code>参数来修改此限制。如果已经检查某条消息超过 N 次的话（ N = <code>transactionCheckMax</code> ） 则 Broker 将丢弃此消息，并在默认情况下同时打印错误日志。用户可以通过重写 <code>AbstractTransactionCheckListener</code> 类来修改这个行为。</li>
<li>事务消息将在 Broker 配置文件中的参数 transactionMsgTimeout 这样的特定时间长度之后被检查。当发送事务消息时，用户还可以通过设置用户属性 CHECK_IMMUNITY_TIME_IN_SECONDS 来改变这个限制，该参数优先于 <code>transactionMsgTimeout</code> 参数。</li>
<li>事务性消息可能不止一次被检查或消费。</li>
<li>提交给用户的目标主题消息可能会失败，目前这依日志的记录而定。它的高可用性通过 RocketMQ 本身的高可用性机制来保证，如果希望确保事务消息不丢失、并且事务完整性得到保证，建议使用同步的双重写入机制。</li>
<li>事务消息的生产者 ID 不能与其他类型消息的生产者 ID 共享。与其他类型的消息不同，事务消息允许反向查询、MQ服务器能通过它们的生产者 ID 查询到消费者。</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>RocketMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>Quartz</title>
    <url>/post/7/</url>
    <content><![CDATA[<h1 id="Quartz"><a href="#Quartz" class="headerlink" title="Quartz"></a>Quartz</h1><p>[官网](<a href="http://www.quartz-scheduler.org/">Quartz Enterprise Job Scheduler (quartz-scheduler.org)</a>)</p>
<h2 id="一-依赖"><a href="#一-依赖" class="headerlink" title="一. 依赖"></a>一. 依赖</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!-- quartz --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-quartz&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/quartz/1.png"></p>
<p>一个调度器scheduler可以调用多个触发器trigger，一个trigger只能关联一个jobDetail，而一个jobDetail可以被多个trigger引用；一个job又可以被多个jobDetail引用。</p>
<span id="more"></span>

<p><strong>CoreTrigger</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CalendarIntervalTriggerImpl (org.quartz.impl.triggers)</span><br><span class="line">SimpleTriggerImpl (org.quartz.impl.triggers)</span><br><span class="line">DailyTimeIntervalTriggerImpl (org.quartz.impl.triggers)</span><br><span class="line">CronTriggerImpl (org.quartz.impl.triggers)</span><br></pre></td></tr></table></figure>



<h2 id="二-Cron表达式"><a href="#二-Cron表达式" class="headerlink" title="二.Cron表达式"></a>二.Cron表达式</h2><h3 id="1-结构"><a href="#1-结构" class="headerlink" title="1.结构"></a>1.结构</h3><p>corn从左到右（用空格隔开）：秒 分 小时 月份中的日期 月份 星期中的日期 年份</p>
<h3 id="2-各字段的含义"><a href="#2-各字段的含义" class="headerlink" title="2. 各字段的含义"></a>2. 各字段的含义</h3><img data-src="https://gitee.com/codeyunzhou/images/raw/master/quartz/2.png" style="zoom:80%;" />



<p>“*“字符用于指定所有值。例如，分钟字段中的”*”表示”每分钟”。<br>“?”在日和星期字段允许使用。它用于指定”无特定值”。<br>“-“字符用于指定范围。例如，小时字段中的”10-12”表示”小时10、11和12”。<br>“,”字符用于指定其他值。例如，”星期几”字段中的”MON, WED, FRI”表示”星期一，星期三和星期五的日子”；<br>        “/“字符用于指定增量。例如，秒字段中的”0/15”表示”秒0、15、30和45”;秒字段中的”5/15”表示”秒5、20、35和50”。<br>        在”/“之前指定”*“等同于指定0为开头的值。本质上，对于表达式中的每个字段，都有一组可以打开或关闭的数字。<br>        对于秒和分钟，数字范围为0到59。对于小时0到23,对于每月的0到31,以及对于月0到11 （JAN至DEC）。<br>        “/“字符可以帮助您打开给定集合中的每个”第n个”值。因此，”月”字段中的”7/6”仅打开”7”月，并不意味着每6个月一次。</p>
<p>“月”和”周”字段中允许使用”L”字符。该字符是”last”的简写，但在两个字段中每个都有不同的含义。<br>        例如，”月”字段中的值” L表示”月的最后一天、即非润年的1月31日，2月28日。<br>        如果单独在”星期几”字段中使用，则仅表示”7”或”SAT”（周六）。<br>        但是，如果在星期几字段中使用另一个值，则表示”该月的最后一个xxx天”一例如，”6L表示”该月的最后一个星期五”。<br>        还可以指定与该月最后一天的偏移量，例如”L-3”,这表示日历月的倒数第三天。<br>        使用”L”选项时，不要指定列表或值的范围很重要，因为这样会导致混淆/意外结果。</p>
<p>“日”字段中允许使用”W”字符。此字符用于指定最接近给定日期的工作日（星期一至星期五）。<br>        例如，如果要指定”15W”作为”月日”字段的值，则含义是:离月15日最近的工作日”。<br>        因此，如果15号是星期六，那么触发器将在14号星期五触发。<br>        如果15日是星期日，则触发器将在16日星期一触发。如果15号是星期二，那么它将在15号星期二触发。<br>        但是，如果将”1W”指定为月份的值，而1号是星期六，则触发器将在第3天，星期一触发，因为它不会”跳过”一个月日的边界。<br>        仅当月份中的某天是一天，而不是范围或天数列表时，才可以指定”W”字符。</p>
<p>还可将”L”和”W”字符组合为一个月中的一天的表达式，以产生”LW”,这表示”该月的最后一个工作日”。<br>“星期几”字段允许使用”#”字符。此字符用于指定月份的”第n个”XXX天。<br>        例如，”星期几”字段中的”6#3”的值表示该月的第三个星期五（第6天=星期五，”#3”=该月的第三个星期五）。<br>        其他示例：”2#1”=该月的第一个星期一，”4#5”=该月的第五个星期三。<br>        请注意，如果您指定”#5”，并且该月的指定星期几中没有5个，则该月将不会触发。<br>        如果使用”#”字符，则”星期几”字段中只能有一个表达式（”3#1,6#3”无效，因为有两个表达式）。</p>
<p>法定字符以及月份和星期几的名称不区分大小写。<br>笔记：<br>支持同时指定星期几和每月某天的值还不完整（您需要在这些字段之一中使用”?”字符）。<br>支持溢出范围-也就是说，左侧的数字大于右侧的数字。您可能会在晚上10点到凌晨2点做22-2,以赶上晚上10点，或者您可能有NOV-FEB。<br>        非常重要的一点是要注意，溢出范国的过度使用会创建没有意义的范围，并且不能确定CronExpression选择哪种解释。<br>        例如”0 0 14-6? * FRI-MON”。</p>
<h2 id="三-Sample-Application"><a href="#三-Sample-Application" class="headerlink" title="三. Sample Application"></a>三. Sample Application</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// Grab the Scheduler instance from the Factory</span></span><br><span class="line">    Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// and start it off</span></span><br><span class="line">    scheduler.start();</span><br><span class="line">    <span class="comment">// define the job and tie it to our HelloJob class</span></span><br><span class="line">    JobDetail job = JobBuilder.newJob(HelloJob.class)</span><br><span class="line">        .withIdentity(<span class="string">&quot;job1&quot;</span>, <span class="string">&quot;group1&quot;</span>)</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Trigger the job to run now, and then repeat every 40 seconds</span></span><br><span class="line">    Trigger trigger = TriggerBuilder.newTrigger()</span><br><span class="line">        .withIdentity(<span class="string">&quot;trigger1&quot;</span>, <span class="string">&quot;group1&quot;</span>)</span><br><span class="line">        .startNow()</span><br><span class="line">        .withSchedule(simpleSchedule()</span><br><span class="line">                      .withIntervalInSeconds(<span class="number">40</span>)</span><br><span class="line">                      .repeatForever())</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Tell quartz to schedule the job using our trigger</span></span><br><span class="line">    scheduler.scheduleJob(job, trigger);</span><br><span class="line"></span><br><span class="line">    TimeUnit.SECONDS.sleep(<span class="number">60</span>);</span><br><span class="line">    scheduler.shutdown();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SchedulerException se) &#123;</span><br><span class="line">    se.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-JobDetail-requestRecovery"><a href="#1-JobDetail-requestRecovery" class="headerlink" title="1.JobDetail#requestRecovery"></a>1.JobDetail#requestRecovery</h3><p>当任务宕掉的时候，是否需要重新执行job，默认为true，需要持久化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JobDetail job = newJob(SimpleJob.class).withIdentity(<span class="string">&quot;job&quot;</span> + count, <span class="string">&quot;group_1&quot;</span>).requestRecovery().build() </span><br></pre></td></tr></table></figure>

<h3 id="2-Trigger-withPriority"><a href="#2-Trigger-withPriority" class="headerlink" title="2.Trigger#withPriority"></a>2.Trigger#withPriority</h3><p>任务的优先级，默认5，数字越大优先级越大，优先级相同，则比较trigger的key</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Trigger trigger1 = newTrigger()</span><br><span class="line">    .withIdentity(<span class="string">&quot;Priority1Trigger5SecondRepeat&quot;</span>)</span><br><span class="line">    .startAt(startTime)</span><br><span class="line">  	 .withSchedule(simpleSchedule().withRepeatCount(<span class="number">1</span>).withIntervalInSeconds(<span class="number">5</span>))</span><br><span class="line">    .withPriority(<span class="number">1</span>)</span><br><span class="line">    .forJob(job)</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure>



<h2 id="四-SimpleTrigger"><a href="#四-SimpleTrigger" class="headerlink" title="四.SimpleTrigger"></a>四.SimpleTrigger</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JobDetail job = JobBuilder.newJob(HelloJob.class).withIdentity(<span class="string">&quot;job1&quot;</span>, <span class="string">&quot;group1&quot;</span>).build();</span><br><span class="line"></span><br><span class="line"><span class="comment">// startNow 立即执行一次</span></span><br><span class="line">SimpleTrigger trigger = (SimpleTrigger) TriggerBuilder.newTrigger()</span><br><span class="line">    .withIdentity(<span class="string">&quot;trigger1&quot;</span>, <span class="string">&quot;group1&quot;</span>)</span><br><span class="line">    .startNow()</span><br><span class="line">    .build();</span><br><span class="line">scheduler.scheduleJob(job, trigger);</span><br><span class="line"></span><br><span class="line"><span class="comment">// withIntervalInSeconds withRepeatCount 每隔5s执行一次，重复6次</span></span><br><span class="line">SimpleTrigger trigger = TriggerBuilder.newTrigger()</span><br><span class="line">    .withIdentity(<span class="string">&quot;trigger2&quot;</span>, <span class="string">&quot;group1&quot;</span>)</span><br><span class="line">    .startAt(startTime)</span><br><span class="line">    .withSchedule(SimpleScheduleBuilder.simpleSchedule().withIntervalInSeconds(<span class="number">5</span>).withRepeatCount(<span class="number">5</span>))</span><br><span class="line">    .build();</span><br><span class="line">scheduler.scheduleJob(job, trigger);</span><br><span class="line"></span><br><span class="line"><span class="comment">// futureDate 5s后执行一次</span></span><br><span class="line">SimpleTrigger trigger = (SimpleTrigger) TriggerBuilder.newTrigger()</span><br><span class="line">    .withIdentity(<span class="string">&quot;trigger3&quot;</span>, <span class="string">&quot;group1&quot;</span>)</span><br><span class="line">    .startAt(DateBuilder.futureDate(<span class="number">5</span>, DateBuilder.IntervalUnit.SECOND))</span><br><span class="line">    .build();</span><br><span class="line">scheduler.scheduleJob(job, trigger);</span><br><span class="line"></span><br><span class="line"><span class="comment">// repeatForever 每5s执行一次</span></span><br><span class="line">SimpleTrigger trigger = TriggerBuilder.newTrigger()</span><br><span class="line">    .withIdentity(<span class="string">&quot;trigger4&quot;</span>, <span class="string">&quot;group1&quot;</span>)</span><br><span class="line">    .startAt(startTime)</span><br><span class="line">    .withSchedule(SimpleScheduleBuilder.simpleSchedule().withIntervalInSeconds(<span class="number">5</span>).repeatForever())</span><br><span class="line">    .build();</span><br><span class="line">scheduler.scheduleJob(job, trigger);</span><br><span class="line"></span><br><span class="line"><span class="comment">// storeDurably triggerJob 不需要trigger，触发一次</span></span><br><span class="line">JobDetail job = JobBuilder.newJob(SimpleJob.class).withIdentity(<span class="string">&quot;job6&quot;</span>, <span class="string">&quot;group1&quot;</span>)</span><br><span class="line">    .storeDurably()</span><br><span class="line">    .build();</span><br><span class="line">scheduler.addJob(job, <span class="keyword">true</span>);</span><br><span class="line">scheduler.triggerJob(JobKey.jobKey(<span class="string">&quot;job6&quot;</span>, <span class="string">&quot;group1&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// rescheduleJob 使用另一个trigger执行</span></span><br><span class="line"><span class="comment">// 每隔5s执行一次，重复4次</span></span><br><span class="line">SimpleTrigger trigger = TriggerBuilder.newTrigger()</span><br><span class="line">    .withIdentity(<span class="string">&quot;trigger5&quot;</span>, <span class="string">&quot;group1&quot;</span>)</span><br><span class="line">    .startNow()</span><br><span class="line">    .withSchedule(SimpleScheduleBuilder.simpleSchedule().withIntervalInSeconds(<span class="number">5</span>).withRepeatCount(<span class="number">3</span>))</span><br><span class="line">    .build();</span><br><span class="line">scheduler.scheduleJob(job, trigger);</span><br><span class="line">System.out.println(job.getKey() + <span class="string">&quot; will run at: &quot;</span> + DateUtil.format(ft) + <span class="string">&quot; and repeat: &quot;</span> + trigger.getRepeatCount() + <span class="string">&quot; times, every &quot;</span></span><br><span class="line">                   + trigger.getRepeatInterval() / <span class="number">1000</span> + <span class="string">&quot; seconds&quot;</span>);</span><br><span class="line"><span class="comment">// 上一个trigger只会执行 3次</span></span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">10</span>);</span><br><span class="line"><span class="comment">// rescheduleJob重新执行trigger调度器</span></span><br><span class="line">trigger = TriggerBuilder.newTrigger()</span><br><span class="line">    .withIdentity(<span class="string">&quot;trigger5&quot;</span>, <span class="string">&quot;group1&quot;</span>)</span><br><span class="line">    .startNow()</span><br><span class="line">    .withSchedule(SimpleScheduleBuilder.simpleSchedule().withIntervalInSeconds(<span class="number">1</span>).withRepeatCount(<span class="number">4</span>))</span><br><span class="line">    .build();</span><br><span class="line">scheduler.rescheduleJob(trigger.getKey(), trigger);</span><br></pre></td></tr></table></figure>

<h2 id="五-CronTrigger"><a href="#五-CronTrigger" class="headerlink" title="五.CronTrigger"></a>五.CronTrigger</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JobDetail job = JobBuilder.newJob(SimpleJob.class).withIdentity(<span class="string">&quot;job1&quot;</span>,<span class="string">&quot;group1&quot;</span>).build();</span><br><span class="line"><span class="comment">// CronScheduleBuilder 每隔20s执行一次</span></span><br><span class="line">CronTrigger trigger = TriggerBuilder.newTrigger()</span><br><span class="line">    .withIdentity(<span class="string">&quot;trigger1&quot;</span>, <span class="string">&quot;group1&quot;</span>)</span><br><span class="line">    .withSchedule(CronScheduleBuilder.cronSchedule(<span class="string">&quot;0/20 * * * * ?&quot;</span>))</span><br><span class="line">    .build();</span><br><span class="line">scheduler.scheduleJob(job, trigger);</span><br></pre></td></tr></table></figure>

<h3 id="1-常用cron表达式"><a href="#1-常用cron表达式" class="headerlink" title="1.常用cron表达式"></a>1.常用cron表达式</h3><table>
<thead>
<tr>
<th>表达式</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>0 0 10,14,16 * * ?</td>
<td>每天上午10点，下午2点，4点</td>
</tr>
<tr>
<td>0 0 10,14,16 * * ?</td>
<td>每天上午10点，下午2点，4点</td>
</tr>
<tr>
<td>0 0/30 9-17 * * ?</td>
<td>朝九晚五工作时间内每半小时</td>
</tr>
<tr>
<td>0 0 12 ? * WED</td>
<td>表示每个星期三中午12点</td>
</tr>
<tr>
<td>0 0 12 * * ?</td>
<td>每天中午12点触发</td>
</tr>
<tr>
<td>0 15 10 ? * *</td>
<td>每天上午10:15触发</td>
</tr>
<tr>
<td>0 15 10 * * ?</td>
<td>每天上午10:15触发</td>
</tr>
<tr>
<td>0 15 10 * * ? *</td>
<td>每天上午10:15触发</td>
</tr>
<tr>
<td>0 15 10 * * ? 2005</td>
<td>2005年的每天上午10:15触发</td>
</tr>
<tr>
<td>0 * 14 * * ?</td>
<td>在每天下午2点到下午2:59期间的每1分钟触发</td>
</tr>
<tr>
<td>0 0/5 14 * * ?</td>
<td>在每天下午2点到下午2:55期间的每5分钟触发</td>
</tr>
<tr>
<td>0 0/5 14,18 * * ?</td>
<td>在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发</td>
</tr>
<tr>
<td>0 0-5 14 * * ?</td>
<td>在每天下午2点到下午2:05期间的每1分钟触发</td>
</tr>
<tr>
<td>0 10,44 14 ? 3 WED</td>
<td>每年三月的星期三的下午2:10和2:44触发</td>
</tr>
<tr>
<td>0 15 10 ? * MON-FRI</td>
<td>周一至周五的上午10:15触发</td>
</tr>
<tr>
<td>0 15 10 15 * ?</td>
<td>每月15日上午10:15触发</td>
</tr>
<tr>
<td>0 15 10 L * ?</td>
<td>每月最后一日的上午10:15触发</td>
</tr>
<tr>
<td>0 15 10 ? * 6L</td>
<td>每月的最后一个星期五上午10:15触发</td>
</tr>
<tr>
<td>0 15 10 ? * 6L</td>
<td>2002-2005 2002年至2005年的每月的最后一个星期五上午10:15触发</td>
</tr>
<tr>
<td>0 15 10 ? * 6#3</td>
<td>每月的第三个星期五上午10:15触发</td>
</tr>
</tbody></table>
<h2 id="六-Job的状态"><a href="#六-Job的状态" class="headerlink" title="六.Job的状态"></a>六.Job的状态</h2><p>1、每次任务被触发，Job都会是一个新的实例<br>2、默认情况下，相同的任务可以被并发执行<br>      @DisallowConcurrentExecution 可以禁止相同任务的并发行为<br>      若JobKey相同，则Quartz认为是同一个任务<br>3、如果任务 需要修改 dataMap，并且下次被触发时 需要用到上次修改的 dataMap<br>      可以使用@PersistlobDataAfterExecution<br>      当使用了@PersistJobDataAfterExecution，还应<br>认真考虑是否要使用@DisallowConcurrentExecution<br><img data-src="https://gitee.com/codeyunzhou/images/raw/master/quartz/3.png"></p>
<h2 id="七-Spring配置Quartz"><a href="#七-Spring配置Quartz" class="headerlink" title="七.Spring配置Quartz"></a>七.Spring配置Quartz</h2><p>spring集成了quartz框架，只需继承<strong>QuartzJobBean</strong>，编写自己的Job即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringJob1</span> <span class="keyword">extends</span> <span class="title">QuartzJobBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">executeInternal</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line">        StringJoiner stringJoiner = <span class="keyword">new</span> StringJoiner(<span class="string">&quot; &quot;</span>)</span><br><span class="line">                .add(<span class="string">&quot;SpringJob1&quot;</span>)</span><br><span class="line">                .add(helloService.hello())</span><br><span class="line">                .add(Thread.currentThread().getName());</span><br><span class="line">        System.out.println(stringJoiner);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置job</p>
<p>方式一：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobInit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Scheduler scheduler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> SchedulerException </span>&#123;</span><br><span class="line">        JobDetail jobDetail = JobBuilder.newJob(SpringJob1.class)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        Trigger trigger = TriggerBuilder.newTrigger()</span><br><span class="line">                .startNow()</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        scheduler.scheduleJob(jobDetail, trigger);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方式二：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JobDetail <span class="title">springJobDetail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JobBuilder.newJob(SpringJob1.class)</span><br><span class="line">                .withIdentity(<span class="string">&quot;springJobDetail&quot;</span>)</span><br><span class="line">                .storeDurably()</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Trigger <span class="title">springTrigger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .forJob(<span class="string">&quot;springJobDetail&quot;</span>)</span><br><span class="line">                .startNow()</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="八-quartz持久化"><a href="#八-quartz持久化" class="headerlink" title="八.quartz持久化"></a>八.quartz持久化</h2><p>Quartz框架有两种任务存储方式。一种是<strong>RAMJobStore</strong>存储方式，也是默认的存储方式。RAMJobStore将quartz定时的任务信息存储在服务器的内存中，这种方式的优点是可以提供最好的性能，因为任务信息都存储在内存中访问获取数据速度快。缺点是当服务器突然崩溃了再次重启后你的定时任务也就没有了。另一种是<strong>JDBC任务</strong>（作业）存储方式，这种方式是将任务信息存储在数据库中，当服务器突然崩溃了再次重启后你的任务还是会接着上次继续执行的，不过需要配置一个quartz.propertity的配置文件</p>
<h3 id="1-quartz-properties配置文件"><a href="#1-quartz-properties配置文件" class="headerlink" title="1.quartz.properties配置文件"></a>1.quartz.properties配置文件</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 实例化ThreadPool时，使用的线程类为SimpleThreadPool</span></span><br><span class="line"><span class="meta">org.quartz.threadPool.class</span> = <span class="string">org.quartz.simpl.SimpleThreadPool</span></span><br><span class="line"><span class="comment"># threadCount和threadPriority将以setter的形式注入ThreadPool实例</span></span><br><span class="line"><span class="comment"># 并发个数</span></span><br><span class="line"><span class="meta">org.quartz.threadPool.threadCount</span> = <span class="string">5</span></span><br><span class="line"><span class="comment"># 优先级</span></span><br><span class="line"><span class="meta">org.quartz.threadPool.threadPriority</span> = <span class="string">5</span></span><br><span class="line"><span class="meta">org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">org.quartz.jobStore.misfireThreshold</span> = <span class="string">5000</span></span><br><span class="line"><span class="comment">#持久化使用的类</span></span><br><span class="line"><span class="meta">org.quartz.jobStore.class</span> = <span class="string">org.quartz.impl.jdbcjobstore.JobStoreTX</span></span><br><span class="line"><span class="comment">#数据库中表的前缀</span></span><br><span class="line"><span class="meta">org.quartz.jobStore.tablePrefix</span> = <span class="string">QRTZ_</span></span><br><span class="line"><span class="comment">#数据源命名</span></span><br><span class="line"><span class="meta">org.quartz.jobStore.dataSource</span> = <span class="string">qzDS</span></span><br><span class="line"><span class="comment">#qzDS 数据源</span></span><br><span class="line"><span class="meta">org.quartz.dataSource.qzDS.driver</span> = <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">org.quartz.dataSource.qzDS.URL</span> = <span class="string">jdbc:mysql://localhost:3306/quartz?useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line"><span class="meta">org.quartz.dataSource.qzDS.user</span> = <span class="string">root</span></span><br><span class="line"><span class="meta">org.quartz.dataSource.qzDS.password</span> = <span class="string">root</span></span><br><span class="line"><span class="meta">org.quartz.dataSource.qzDS.maxConnections</span> = <span class="string">10</span></span><br></pre></td></tr></table></figure>

<h3 id="2-spring配置quartz持久化"><a href="#2-spring配置quartz持久化" class="headerlink" title="2.spring配置quartz持久化"></a>2.spring配置quartz持久化</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># quartz相关配置</span></span><br><span class="line">  <span class="attr">quartz:</span></span><br><span class="line">  <span class="comment"># 默认情况下，使用内存中的JobStore。但是，如果应用程序中有DataSource bean，并且spring.quartz可用，则可以配置基于jdbc的存储。配置Job-store-type属性</span></span><br><span class="line">    <span class="attr">job-store-type:</span> <span class="string">jdbc</span></span><br><span class="line">    <span class="comment"># 初始化项目不重新创建quartz相关表</span></span><br><span class="line">    <span class="attr">jdbc:</span></span><br><span class="line">      <span class="attr">initialize-schema:</span> <span class="string">never</span></span><br><span class="line">    <span class="comment"># spring中设置quartz配置，有如下两种方式  </span></span><br><span class="line"><span class="comment">#    properties:</span></span><br><span class="line"><span class="comment">#      org.quartz.threadPool.threadCount: 5</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">org:</span></span><br><span class="line">        <span class="attr">quartz:</span></span><br><span class="line">          <span class="attr">threadPool:</span></span><br><span class="line">            <span class="string">threadCount:5</span></span><br></pre></td></tr></table></figure>

<h3 id="3-持久化生成的表"><a href="#3-持久化生成的表" class="headerlink" title="3.持久化生成的表"></a>3.持久化生成的表</h3><table>
<thead>
<tr>
<th>序号</th>
<th>表名</th>
<th>表说明</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>qrtz_calendars</td>
<td>以 Blob 类型存储 Quartz 的 Calendar 信息</td>
</tr>
<tr>
<td>2</td>
<td>qrtz_cron_triggers</td>
<td>存储 Cron Trigger，包括 Cron 表达式和时区信息</td>
</tr>
<tr>
<td>3</td>
<td>qrtz_fired_triggers</td>
<td>存储与已触发的 Trigger 相关的状态信息，以及相联 Job 的执行信息</td>
</tr>
<tr>
<td>4</td>
<td>qrtz_paused_trigger_grps</td>
<td>存储已暂停的 Trigger 组的信息</td>
</tr>
<tr>
<td>5</td>
<td>qrtz_scheduler_state</td>
<td>存储少量的有关调度器 (Scheduler) 的状态，和别的 调度器 (Scheduler)实例(假如是用于一个集群中)</td>
</tr>
<tr>
<td>6</td>
<td>qrtz_locks</td>
<td>存储程序的悲观锁的信息(假如使用了悲观锁)</td>
</tr>
<tr>
<td>7</td>
<td>qrtz_job_details</td>
<td>存储每一个已配置的 Job 的详细信息(jobDetail)</td>
</tr>
<tr>
<td>8</td>
<td>qrtz_simple_triggers</td>
<td>存储简单的 Trigger，包括重复次数，间隔，以及已触的次数</td>
</tr>
<tr>
<td>9</td>
<td>qrtz_blob_triggers</td>
<td>以 Blob 类型存储的Trigger (用于 Quartz 用户用 JDBC 创建他们自己定制的 Trigger 类型，JobStore 并不知道如何存储实例的时候)</td>
</tr>
<tr>
<td>10</td>
<td>qrtz_triggers</td>
<td>存储已配置的 触发器 (Trigger) 的信息</td>
</tr>
<tr>
<td>11</td>
<td>qrtz_simprop_triggers</td>
<td>存储CalendarIntervalTrigger和DailyTimeIntervalTrigger两种类型的触发器</td>
</tr>
</tbody></table>
<h2 id="九-Misfire"><a href="#九-Misfire" class="headerlink" title="九.Misfire"></a>九.Misfire</h2><p>misfire，中文意思是“失火”。在 quartz 中的含义是：到了任务触发时间，但是任务却没有被触发<br>失火的原因可能是：</p>
<ul>
<li>使用了 @DisallowConcurrentExecution 注解，而且任务的执行时间 &gt; 任务间隔</li>
<li>线程池满了，没有资源执行任务</li>
<li>机器宕机或者人为停止，过段时间恢复运行</li>
</ul>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/quartz/4.png"></p>
<h3 id="1-只执行一次的job"><a href="#1-只执行一次的job" class="headerlink" title="1.只执行一次的job"></a>1.只执行一次的job</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JobDetail job = JobBuilder.newJob(MisfireJob.class)</span><br><span class="line">            .withIdentity(<span class="string">&quot;job&quot;</span>, <span class="string">&quot;g1&quot;</span>)</span><br><span class="line">            .build();</span><br><span class="line">    Date next = DateUtils.addSeconds(<span class="keyword">new</span> Date(), -<span class="number">10</span>);</span><br><span class="line">    SimpleTrigger trigger = TriggerBuilder.newTrigger()</span><br><span class="line">            .withIdentity(<span class="string">&quot;trigger&quot;</span>, <span class="string">&quot;g1&quot;</span>)</span><br><span class="line">            .startAt(next)</span><br><span class="line">            .withSchedule(SimpleScheduleBuilder.simpleSchedule()</span><br><span class="line">                    .withMisfireHandlingInstructionFireNow()<span class="comment">/*可以指定为任意一个可用的misfire策略*/</span>)</span><br><span class="line">            .build();</span><br><span class="line">    scheduler.scheduleJob(job, trigger);</span><br></pre></td></tr></table></figure>

<p> 假设job设定的执行时间是8点00分00秒，而当前时间是8点00分10秒，由于misfireThreshold设置为1秒，则发生了misfire。各misfire策略如下:</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>MISFIRE_INSTRUCTION_SMART_POLICY–default</td>
<td>默认策略等同于MISFIRE_INSTRUCTION_FIRE_NOW。</td>
</tr>
<tr>
<td>MISFIRE_INSTRUCTION_IGNORE_MISFIRE_POLICY</td>
<td>Quartz不会判断job发生misfire，但是当Quartz有可用资源的时候，会尽可能早的执行所有发生misfire的任务，结果等同于MISFIRE_INSTRUCTION_FIRE_NOW。</td>
</tr>
<tr>
<td>withMisfireHandlingInstructionFireNow MISFIRE_INSTRUCTION_FIRE_NOW</td>
<td>立即执行job，即在8点00分10秒发现了misfire以后立即执行job。</td>
</tr>
<tr>
<td>withMisfireHandlingInstructionNowWithExistingCount<br/>MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_EXISTING_REPEAT_COUNT</td>
<td>等同于MISFIRE_INSTRUCTION_FIRE_NOW。</td>
</tr>
<tr>
<td>withMisfireHandlingInstructionNowWithRemainingCount<br/>MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_REMAINING_REPEAT_COUNT</td>
<td>等同于MISFIRE_INSTRUCTION_FIRE_NOW。</td>
</tr>
<tr>
<td>withMisfireHandlingInstructionNextWithExistingCount<br/>MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_EXISTING_COUNT</td>
<td>不会执行job。此命令会等待下一次执行时间来执行job，但是只执行一次的job，在发生misfire以后没有下次的执行时间，因此使用此命令不会再执行job。</td>
</tr>
<tr>
<td>withMisfireHandlingInstructionNextWithRemainingCount<br/>MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_REMAINING_COUNT</td>
<td>等同于MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_EXISTING_COUNT。</td>
</tr>
</tbody></table>
<h3 id="2-固定次数执行的job"><a href="#2-固定次数执行的job" class="headerlink" title="2.固定次数执行的job"></a>2.固定次数执行的job</h3><p>设置job开始执行时间是早上8点，执行间隔是1小时，执行次数是5次，那么job总的执行次数是6次（开始执行的一次以及后面执行的5次），则计划的执行时间是8:00，9:00,10:00,11:00,12:00,13:00</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JobDetail job = newJob(MisfireJob.class)</span><br><span class="line">                .withIdentity(<span class="string">&quot;job1&quot;</span>, <span class="string">&quot;g1&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">SimpleTrigger trigger = newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;trigger1&quot;</span>, <span class="string">&quot;g1&quot;</span>)</span><br><span class="line">                .startAt(nextOne)</span><br><span class="line">                .withSchedule(simpleSchedule()</span><br><span class="line">                        .withIntervalInHours(<span class="number">1</span>)</span><br><span class="line">                        .withRepeatCount(<span class="number">5</span>)</span><br><span class="line">                        .withMisfireHandlingInstructionNowWithRemainingCount()<span class="comment">/*可以指定为任意可用的策略*/</span>)</span><br><span class="line">                .build();</span><br></pre></td></tr></table></figure>

<p>假设8:00的任务执行了，但是由于某些原因，scheduler没有执行9:00和10:00的任务，在10:15分的时候scheduler发现job有两次没有执行，这两次的延迟执行时间分别是1小时15分和15分，都大于设置的misfireThreshold=1秒，因此发生了两次misfire。各misfire策略如下：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>MISFIRE_INSTRUCTION_SMART_POLICY–default</td>
<td>默认执行策略，在固定次数执行的情况下，等同于MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_EXISTING_REPEAT_COUNT</td>
</tr>
<tr>
<td>MISFIRE_INSTRUCTION_IGNORE_MISFIRE_POLICY</td>
<td>Quartz不会判断发生misfire，在Quartz资源可用时会尽可能早的执行所有发生misfire的任务。<br/>例如：Quartz会在10:15执行9:00和10:00的任务，然后按照原计划继续执行剩下的任务。最后任务执行完成时间还是13:00。</td>
</tr>
<tr>
<td>withMisfireHandlingInstructionFireNow MISFIRE_INSTRUCTION_FIRE_NOW</td>
<td>等同于MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_REMAINING_REPEAT_COUNT。</td>
</tr>
<tr>
<td>withMisfireHandlingInstructionNowWithExistingCount<br/>MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_EXISTING_REPEAT_COUNT</td>
<td>立即执行第一个发生misfire的任务，并且修改startTime为当前时间，然后按照设定的间隔时间执行下一次任务，直到所有的任务执行完成，此命令不会遗漏任务的执行次数。<br/>例如：10:15会立即执行9:00的任务，startTime修改为10:15，然后后续的任务执行时间为,11:15,12:15,13:15,14:15，也就是说任务完成时间延迟到了14:15，但是任务的执行次数还是总共的6次。</td>
</tr>
<tr>
<td>withMisfireHandlingInstructionNowWithRemainingCount<br/>MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_REMAINING_REPEAT_COUNT</td>
<td>立即执行第一个发生misfire的任务，并且修改startTime为当前时间，然后按照设定的间隔时间执行下一个任务，直到所有剩余任务执行完成，此命令会忽略已经发生misfire的任务（第一个misfire任务除外，因为会被立即执行），继续执行剩余的正常任务。<br/>例如：10:15会立即执行9:00的任务，并且修改startTime为10:15，然后Quartz会忽略10:00发生的misfire的任务，然后后续的执行时间为：11:15,12:15,13:15，由于10:00的任务被忽略了，因此总的执行次数实际上是5次。<br/></td>
</tr>
<tr>
<td>withMisfireHandlingInstructionNextWithExistingCount<br/>MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_EXISTING_COUNT</td>
<td>不会立即执行任务，会等到下一次的计划执行时间开始执行，然后按照设定的间隔时间执行直到执行到计划的任务结束时间。<br/>这个地方需要注意一下，不要被命令的名字所迷惑，第一眼印象可能觉得这个命令会把已经misfire的任务也执行了，而且好多博文也是这么讲解的，实际上并没有，我也是在自己测试的时候发现的，其实这个命令在发现存在misfire以后，后续并没有再执行发生misfire的任务，而是继续执行剩下的任务，直到结束时间，因此此命令与MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_REMAINING_COUNT的执行结果相同，至于原因后面会讲。<br/>例如：10:15发现9:00和10:00发生了misfire，并不会立即执行，由于原计划的下一次执行时间是11:00，因此Quartz会等到11:00执行任务，然后在原计划的13:00执行最后一个任务结束，因此实际上总的执行次数是4次。</td>
</tr>
<tr>
<td>withMisfireHandlingInstructionNextWithRemainingCount<br/>MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_REMAINING_COUNT</td>
<td>不会立即执行任务，会等到下一次计划执行时间开始执行，忽略已经发生了misfire的任务，然后按照设定的间隔时间执行直到计划的任务结束时间。<br/>例如：10:15发现9:00和10:00发生了misfire，并不会立即执行，忽略掉发生misfire的9:00和10:00的任务，按照计划在11:00执行任务，直到13:00执行最后一个任务结束，因此总的执行次数是4次。</td>
</tr>
</tbody></table>
<h3 id="3-无限次数执行的job"><a href="#3-无限次数执行的job" class="headerlink" title="3.无限次数执行的job"></a>3.无限次数执行的job</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JobDetail job = JobBuilder.newJob(MisfireJob.class)</span><br><span class="line">                .withIdentity(<span class="string">&quot;job&quot;</span>, <span class="string">&quot;g&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">SimpleTrigger trigger = TriggerBuilder.newTrigger()</span><br><span class="line">    .withIdentity(<span class="string">&quot;trigger&quot;</span>, <span class="string">&quot;g&quot;</span>)</span><br><span class="line">    .startAt(next)</span><br><span class="line">    .withSchedule(SimpleScheduleBuilder.simpleSchedule()</span><br><span class="line">                  .withIntervalInHours(<span class="number">1</span>)</span><br><span class="line">                  .repeatForever())</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure>

<p>假设8:00的任务执行了，但是由于某些原因，scheduler没有执行9:00和10:00的任务，在10:15分的时候scheduler发现job有两次没有执行，这两次的延迟执行时间分别是1小时15分和15分，都大于设置的misfireThreshold=1秒，因此发生了两次misfire。各misfire策略如下：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>MISFIRE_INSTRUCTION_SMART_POLICY–default</td>
<td>等同于MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_REMAINING_COUNT。</td>
</tr>
<tr>
<td>MISFIRE_INSTRUCTION_IGNORE_MISFIRE_POLICY</td>
<td>Quartz不会判断发生misfire，在Quartz资源可用时会尽可能早的执行所有发生misfire的任务。<br/>例如：Quartz会在10:15执行9:00和10:00的任务，然后按照原计划继续执行下去。</td>
</tr>
<tr>
<td>withMisfireHandlingInstructionFireNow MISFIRE_INSTRUCTION_FIRE_NOW</td>
<td>等同于MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_REMAINING_REPEAT_COUNT。</td>
</tr>
<tr>
<td>withMisfireHandlingInstructionNowWithExistingCount<br/>MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_EXISTING_REPEAT_COUNT</td>
<td>因为执行次数为无限次，所以等同于MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_REMAINING_REPEAT_COUNT。</td>
</tr>
<tr>
<td>withMisfireHandlingInstructionNowWithRemainingCount<br/>MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_REMAINING_REPEAT_COUNT</td>
<td>立即执行第一个发生misfire的任务，并且修改startTime为当前时间，然后按照设定的间隔时间执行下一个任务，一直执行下去，执行次数是无限的，但是计划的执行时间会被改变，因为此策略会修改startTime。<br/>例如：10:15会立即执行9:00的任务，并且修改startTime为10:15，后续的执行时间被修改为了11:15，12:15，13:15以此类推。</td>
</tr>
<tr>
<td>withMisfireHandlingInstructionNextWithExistingCount<br/>MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_EXISTING_COUNT</td>
<td>等同于MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_REMAINING_COUNT。</td>
</tr>
<tr>
<td>withMisfireHandlingInstructionNextWithRemainingCount<br/>MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_REMAINING_COUNT</td>
<td>不会立即执行任务，会等到下一次计划执行时间开始执行，忽略已经发生了misfire的任务，然后按照原计划执行时间继续执行下去。实际上就相当于不管有没有发生misfire，就按照原计划继续执行下去。<br/>例如：10:15发现9:00和10:00发生了misfire，并不会立即执行，忽略掉发生misfire的9:00和10:00的任务，按照计划在11:00执行任务，然后一直按照原计划执行下去。</td>
</tr>
</tbody></table>
<blockquote>
<p><a href="https://blog.csdn.net/chen888999/article/details/78575492"> Quartz misfire详解_自在小丁的博客-CSDN博客_misfire quartz</a></p>
</blockquote>
<h2 id="十-异常与中断处理"><a href="#十-异常与中断处理" class="headerlink" title="十.异常与中断处理"></a>十.异常与中断处理</h2><h3 id="1-作业异常"><a href="#1-作业异常" class="headerlink" title="1.作业异常"></a>1.作业异常</h3><h4 id="1-1-捕获并解决异常，立即重新执行作业"><a href="#1-1-捕获并解决异常，立即重新执行作业" class="headerlink" title="1.1 捕获并解决异常，立即重新执行作业"></a>1.1 捕获并解决异常，立即重新执行作业</h4><p>在我们捕获异常并解决异常后，可以调用 <code>JobExecutionException#setRefireImmediately(true)</code> 立即重新执行作业。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 一个异常例子，假设第一次传入的 denominator 为 0，那么将会抛出异常</span></span><br><span class="line">    calculation = <span class="number">4815</span> / denominator;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    JobExecutionException e2 = <span class="keyword">new</span> JobExecutionException(e);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在第一次异常后，修改 denominator 参数为 1，那么后面的执行就不会出错了</span></span><br><span class="line">    dataMap.put(<span class="string">&quot;denominator&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// true 表示立即重新执行作业</span></span><br><span class="line">    e2.setRefireImmediately(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">throw</span> e2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>： 为了共享在同一个 JobDetail 中的 JobDataMap，我们需要在上面这个 job 实现类上加入 <code>@PersistJobDataAfterExecution</code> 和 <code>@DisallowConcurrentExecution</code> 注解</p>
<h4 id="1-2-捕获异常，取消所有触发器"><a href="#1-2-捕获异常，取消所有触发器" class="headerlink" title="1.2 捕获异常，取消所有触发器"></a>1.2 捕获异常，取消所有触发器</h4><p>在我们捕获异常时，可以调用 <code>JobExecutionException#setUnscheduleAllTriggers(true)</code> 取消所有与这个作业有关的触发器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 一个异常例子</span></span><br><span class="line">    <span class="keyword">int</span> zero = <span class="number">0</span>;</span><br><span class="line">    calculation = <span class="number">4815</span> / zero;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    JobExecutionException e2 = <span class="keyword">new</span> JobExecutionException(e);</span><br><span class="line">    <span class="comment">// true 表示 Quartz 会自动取消所有与这个 job 有关的 trigger，从而避免再次运行 job</span></span><br><span class="line">    e2.setUnscheduleAllTriggers(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">throw</span> e2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-作业中断"><a href="#2-作业中断" class="headerlink" title="2. 作业中断"></a>2. 作业中断</h3><p><code>org.quartz.InterruptableJob</code> 接口提供了一种中断机制，这个接口只有一个方法 <code>interrupt()</code>，这个方法会在用户发出中断请求到 Scheduler（调度器）时触发（即调用 <code>Scheduler#interrupt(JobDetail#getKey())</code> 方法时触发）。</p>
<p>其中 <code>InterruptableJob</code> 接口又继承了 <code>Job</code> 接口，所以当我们使用时，只需要实现 <code>InterruptableJob</code> 接口，重写其中的 <code>execute</code> 和 <code>interrupt</code> 方法即可。</p>
<h2 id="十一-排除特殊日期"><a href="#十一-排除特殊日期" class="headerlink" title="十一.排除特殊日期"></a>十一.排除特殊日期</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Add the holiday calendar to the schedule</span></span><br><span class="line">HolidayCalendar holidayCalendar = <span class="keyword">new</span> HolidayCalendar();</span><br><span class="line">Calendar calendar = Calendar.getInstance();</span><br><span class="line">calendar.set(<span class="number">2005</span>, <span class="number">6</span>, <span class="number">4</span>);</span><br><span class="line">holidayCalendar.addExcludedDate(calendar.getTime());</span><br><span class="line"></span><br><span class="line">AnnualCalendar holidays = <span class="keyword">new</span> AnnualCalendar();</span><br><span class="line"><span class="comment">// fourth of July (July 4)</span></span><br><span class="line">Calendar fourthOfJuly = <span class="keyword">new</span> GregorianCalendar(<span class="number">2005</span>, <span class="number">6</span>, <span class="number">4</span>);</span><br><span class="line">holidays.setDayExcluded(fourthOfJuly, <span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// halloween (Oct 31)</span></span><br><span class="line">Calendar halloween = <span class="keyword">new</span> GregorianCalendar(<span class="number">2005</span>, <span class="number">9</span>, <span class="number">31</span>);</span><br><span class="line">holidays.setDayExcluded(halloween, <span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// christmas (Dec 25)</span></span><br><span class="line">Calendar christmas = <span class="keyword">new</span> GregorianCalendar(<span class="number">2005</span>, <span class="number">11</span>, <span class="number">25</span>);</span><br><span class="line">holidays.setDayExcluded(christmas, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// tell the schedule about our holiday calendar</span></span><br><span class="line">sched.addCalendar(<span class="string">&quot;holidays&quot;</span>, holidays, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// schedule a job to run hourly, starting on halloween</span></span><br><span class="line"><span class="comment">// at 10 am</span></span><br><span class="line">Date runDate = dateOf(<span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">31</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">JobDetail job = newJob(SimpleJob.class).withIdentity(<span class="string">&quot;job1&quot;</span>, <span class="string">&quot;group1&quot;</span>).build();</span><br><span class="line"></span><br><span class="line"><span class="comment">// modifiedByCalendar</span></span><br><span class="line">SimpleTrigger trigger = newTrigger()</span><br><span class="line">    .withIdentity(<span class="string">&quot;trigger1&quot;</span>, <span class="string">&quot;group1&quot;</span>)</span><br><span class="line">    .startAt(runDate)</span><br><span class="line">    .withSchedule(simpleSchedule().withIntervalInHours(<span class="number">1</span>).repeatForever()).modifiedByCalendar(<span class="string">&quot;holidays&quot;</span>)</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>Calendar名称</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>CronCalendar</td>
<td>用来排除 给定CronExpression表示的 时间集</td>
</tr>
<tr>
<td>AnnualCalendar</td>
<td>用来排除 年 中的 天</td>
</tr>
<tr>
<td>HolidayCalendar</td>
<td>用来排除 某年 中的 某天 (与 AnnualCalendar 类似，区别是把年考虑进去了)</td>
</tr>
<tr>
<td>MonthlyCalendar</td>
<td>用来排除 月 中的 天</td>
</tr>
<tr>
<td>WeeklyCalendar</td>
<td>用来排除 星期 中的 天</td>
</tr>
<tr>
<td>DailyCalendar</td>
<td>用来排除 一天中的 某个时间段 (不能跨天) (可以反转时间段的作用)</td>
</tr>
</tbody></table>
<h2 id="十二-监听器"><a href="#十二-监听器" class="headerlink" title="十二.监听器"></a>十二.监听器</h2><h3 id="1-JobListener"><a href="#1-JobListener" class="headerlink" title="1.JobListener"></a>1.JobListener</h3><table>
<thead>
<tr>
<th>方法签名</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>getName()</td>
<td>获取该监听器的名称</td>
</tr>
<tr>
<td>jobToBeExecuted（）</td>
<td>在Job将要被执行时调用这个方法</td>
</tr>
<tr>
<td>jobExecutionVetoed（）</td>
<td>在Job即将被执行，但却被 TriggerListerner监听器的 vetoJobExecution（）方法否决时 执行 也就是该执行时，但却未执行时调用</td>
</tr>
<tr>
<td>jobWasExecuted（）</td>
<td>执行结束时调用</td>
</tr>
</tbody></table>
<h3 id="2-TriggerListener"><a href="#2-TriggerListener" class="headerlink" title="2.TriggerListener"></a>2.TriggerListener</h3><table>
<thead>
<tr>
<th>方法签名</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>getName()</td>
<td>获取触发器的名称</td>
</tr>
<tr>
<td>triggerFired()</td>
<td>当与监听器相关联的Trigger被触发，Job上的execute()方法将被执行时，Scheduler就调用该方法</td>
</tr>
<tr>
<td>vetoJobExecution()</td>
<td>在 Trigger 触发后，Job 将要被执行时由 Scheduler 调用这个方法。 TriggerListener 给了一个选择去否决 Job 的执行。 假如这个方法返回 true，这个 Job 将不会为此次 Trigger 触发而得到执行。</td>
</tr>
<tr>
<td>triggerMisfired()</td>
<td>Scheduler 调用这个方法是在 Trigger 错过触发时。 你应该关注此方法中持续时间长的逻辑：在出现许多错过触发的 Trigger 时， 长逻辑会导致骨牌效应。你应当保持这上方法尽量的小。</td>
</tr>
<tr>
<td>triggerComplete()</td>
<td>Trigger 被触发并且完成了 Job 的执行时，Scheduler 调用这个方法</td>
</tr>
</tbody></table>
<h3 id="3-SchedulerListener"><a href="#3-SchedulerListener" class="headerlink" title="3.SchedulerListener"></a>3.SchedulerListener</h3><table>
<thead>
<tr>
<th>方法签名</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>jobScheduled（）</td>
<td>用于部署JobDetail时调用</td>
</tr>
<tr>
<td>jobUnscheduled()</td>
<td>用于卸载JobDetail时调用</td>
</tr>
<tr>
<td>triggerFinalized()</td>
<td>当一个 Trigger 来到了再也不会触发的状态时调用这个方法。 除非这个 Job 已设置成了持久性，否则它就会从 Scheduler 中移除</td>
</tr>
<tr>
<td>triggerPaused()</td>
<td>Scheduler 调用这个方法是发生在一个 Trigger被暂停时</td>
</tr>
<tr>
<td>triggersPaused()</td>
<td>Scheduler 调用这个方法是发生在一个 Trigger 组被暂停时。 假如是 Trigger 组的话，triggerName 参数将为 null</td>
</tr>
<tr>
<td>triggerResumed()</td>
<td>Scheduler 调用这个方法是发生成一个 Trigger从暂停中恢复时</td>
</tr>
<tr>
<td>triggersResumed()</td>
<td>Scheduler 调用这个方法是发生成一个 Trigger 组从暂停中恢复时。假如是 Trigger 组的话，triggerName 参数将为 null。</td>
</tr>
<tr>
<td>jobAdded()</td>
<td>添加job时调用</td>
</tr>
<tr>
<td>jobDeleted()</td>
<td>删除job时调用</td>
</tr>
<tr>
<td>jobPaused()</td>
<td>挂起Job时调用</td>
</tr>
<tr>
<td>jobsPaused()</td>
<td>挂起jobs组时调用，假如是组的话，参数将为null</td>
</tr>
<tr>
<td>jobResumed()</td>
<td>恢复Job时调用</td>
</tr>
<tr>
<td>jobsResumed()</td>
<td>恢复Job组时调用，假如是组的话，参数将为null</td>
</tr>
<tr>
<td>schedulerError()</td>
<td>在 Scheduler 的正常运行期间产生一个严重错误时调用这个方法</td>
</tr>
<tr>
<td>schedulerInStandbyMode()</td>
<td>当Scheduler处于StandBy模式时，调用该方法</td>
</tr>
<tr>
<td>schedulerStarted()</td>
<td>当Scheduler 开启时，调用该方法</td>
</tr>
<tr>
<td>schedulerStarting()</td>
<td>当Scheduler 开启中，调用该方法</td>
</tr>
<tr>
<td>schedulerShutdown()</td>
<td>当Scheduler停止时，调用该方法</td>
</tr>
<tr>
<td>schedulerShuttingdown()</td>
<td>当Scheduler停止中，调用该方法</td>
</tr>
<tr>
<td>schedulingDataCleared()</td>
<td>当Scheduler中的数据被清除时，调用该方法</td>
</tr>
</tbody></table>
<h3 id="4-example"><a href="#4-example" class="headerlink" title="4.example"></a>4.example</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Set up the listener</span></span><br><span class="line">JobListener listener = <span class="keyword">new</span> Job1Listener();</span><br><span class="line">Matcher&lt;JobKey&gt; matcher = KeyMatcher.keyEquals(job.getKey());</span><br><span class="line">sched.getListenerManager().addJobListener(listener, matcher);</span><br><span class="line"></span><br><span class="line">TriggerListener triggerListener = <span class="keyword">new</span> TriggerListener();</span><br><span class="line">KeyMatcher&lt;TriggerKey&gt; triggerKeyKeyMatcher = KeyMatcher.keyEquals(trigger.getKey());</span><br><span class="line">sched.getListenerManager().addTriggerListener(triggerListener, triggerKeyKeyMatcher);</span><br></pre></td></tr></table></figure>

<h3 id="5-Matcher"><a href="#5-Matcher" class="headerlink" title="5.Matcher"></a>5.Matcher</h3><p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/quartz/5.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 对group1中job以2结尾的，整个group2，group3中除了以1结尾的 任务生效</span></span><br><span class="line"><span class="comment">* (A or B) or C</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">OrMatcher&lt;JobKey&gt; matcher = OrMatcher.or(</span><br><span class="line">    OrMatcher.or(</span><br><span class="line">        AndMatcher.and(GroupMatcher.jobGroupEquals(<span class="string">&quot;group1&quot;</span>), NameMatcher.jobNameEndsWith(<span class="string">&quot;2&quot;</span>)),</span><br><span class="line">        GroupMatcher.jobGroupEquals(<span class="string">&quot;group2&quot;</span>)</span><br><span class="line">    ),</span><br><span class="line">    AndMatcher.and(GroupMatcher.jobGroupEquals(<span class="string">&quot;group3&quot;</span>), NotMatcher.not(NameMatcher.jobNameEndsWith(<span class="string">&quot;1&quot;</span>)))</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="十三-远程调用"><a href="#十三-远程调用" class="headerlink" title="十三.远程调用"></a>十三.远程调用</h2><p>可以通过RMI协议向Scheduler调度器远程添加job任务</p>
<p>RemoteServerExample.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// First we must get a reference to a scheduler</span></span><br><span class="line">SchedulerFactory sf = <span class="keyword">new</span> StdSchedulerFactory();</span><br><span class="line">Scheduler sched = sf.getScheduler();</span><br><span class="line"><span class="comment">// start the schedule</span></span><br><span class="line">sched.start();</span><br><span class="line"><span class="comment">// wait five minutes to give our jobs a chance to run</span></span><br><span class="line">Thread.sleep(<span class="number">600L</span> * <span class="number">1000L</span>);</span><br></pre></td></tr></table></figure>

<p>server.propertiest</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Configure Main Scheduler Properties  </span></span><br><span class="line"><span class="meta">org.quartz.scheduler.instanceName</span>: <span class="string">Sched1</span></span><br><span class="line"><span class="meta">org.quartz.scheduler.rmi.export</span>: <span class="string">true</span></span><br><span class="line"><span class="meta">org.quartz.scheduler.rmi.registryHost</span>: <span class="string">localhost</span></span><br><span class="line"><span class="meta">org.quartz.scheduler.rmi.registryPort</span>: <span class="string">1099</span></span><br><span class="line"><span class="meta">org.quartz.scheduler.rmi.createRegistry</span>: <span class="string">true</span></span><br><span class="line"><span class="comment"># Configure ThreadPool  </span></span><br><span class="line"><span class="meta">org.quartz.threadPool.class</span>: <span class="string">org.quartz.simpl.SimpleThreadPool</span></span><br><span class="line"><span class="meta">org.quartz.threadPool.threadCount</span>: <span class="string">10</span></span><br><span class="line"><span class="meta">org.quartz.threadPool.threadPriority</span>: <span class="string">5</span></span><br><span class="line"><span class="comment"># Configure JobStore  </span></span><br><span class="line"><span class="meta">org.quartz.jobStore.misfireThreshold</span>: <span class="string">60000</span></span><br><span class="line"><span class="meta">org.quartz.jobStore.class</span>: <span class="string">org.quartz.simpl.RAMJobStore</span></span><br></pre></td></tr></table></figure>

<p>RemoteClientExample.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// First we must get a reference to a scheduler</span></span><br><span class="line">SchedulerFactory sf = <span class="keyword">new</span> StdSchedulerFactory();</span><br><span class="line">Scheduler sched = sf.getScheduler();</span><br><span class="line"></span><br><span class="line"><span class="comment">// define the job and ask it to run</span></span><br><span class="line">JobDetail job = newJob(SimpleJob.class)</span><br><span class="line">    .withIdentity(<span class="string">&quot;remotelyAddedJob&quot;</span>, <span class="string">&quot;default&quot;</span>)</span><br><span class="line">    .build();</span><br><span class="line"></span><br><span class="line">JobDataMap map = job.getJobDataMap();</span><br><span class="line">map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;Your remotely added job has executed!&quot;</span>);</span><br><span class="line"></span><br><span class="line">Trigger trigger = newTrigger()</span><br><span class="line">    .withIdentity(<span class="string">&quot;remotelyAddedTrigger&quot;</span>, <span class="string">&quot;default&quot;</span>)</span><br><span class="line">    .forJob(job.getKey())</span><br><span class="line">    .withSchedule(cronSchedule(<span class="string">&quot;/5 * * ? * *&quot;</span>))</span><br><span class="line">    .build();</span><br><span class="line"></span><br><span class="line"><span class="comment">// schedule the job</span></span><br><span class="line">sched.scheduleJob(job, trigger);</span><br></pre></td></tr></table></figure>

<p>client.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Properties file for use by StdSchedulerFactory</span></span><br><span class="line"><span class="comment"># to create a Quartz Scheduler Instance.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Configure Main Scheduler Properties</span></span><br><span class="line"><span class="meta">org.quartz.scheduler.instanceName</span>: <span class="string">Sched1</span></span><br><span class="line"><span class="meta">org.quartz.scheduler.logger</span>: <span class="string">schedLogger</span></span><br><span class="line"><span class="meta">org.quartz.scheduler.rmi.proxy</span>: <span class="string">true</span></span><br><span class="line"><span class="meta">org.quartz.scheduler.rmi.registryHost</span>: <span class="string">localhost</span></span><br><span class="line"><span class="meta">org.quartz.scheduler.rmi.registryPort</span>: <span class="string">1099</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>定时任务</category>
      </categories>
      <tags>
        <tag>定时任务</tag>
      </tags>
  </entry>
  <entry>
    <title>long类型的id属性传到前端会精度丢失的解决方案</title>
    <url>/post/6/</url>
    <content><![CDATA[<h1 id="long类型的id属性传到前端会精度丢失的解决方案"><a href="#long类型的id属性传到前端会精度丢失的解决方案" class="headerlink" title="long类型的id属性传到前端会精度丢失的解决方案"></a>long类型的id属性传到前端会精度丢失的解决方案</h1><p>数据库id由varchar类型改为number后，使用mybatis-plus雪花算法生成id，从数据库查询出来都是正常的，但是传给前端的时候发生了失真。<strong>JSON字符串转JS对象，JSON中的数字会转为 number 类型， number 类型的精度是16位，但是雪花算法生成的id长度有19位，so后面的几位精度就丢失了</strong>。如果想要前端不丢失精度，JSON中的id就不能是long类型，改为String类型就好了。</p>
<p>一、在实体类的id属性上面加上注解 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JsonSerialize(using = ToStringSerializer.class)</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>二、添加全局配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JacksonConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="meta">@Primary</span></span><br><span class="line">  <span class="meta">@ConditionalOnMissingBean(ObjectMapper.class)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ObjectMapper <span class="title">jacksonObjectMapper</span><span class="params">(Jackson2ObjectMapperBuilder builder)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 若若POJO对象的属性值为null，序列化时不进行显示</span></span><br><span class="line">    builder.serializationInclusion(JsonInclude.Include.NON_NULL);</span><br><span class="line">    <span class="comment">// Include.NON_EMPTY,若POJO对象的属性值为&quot;&quot;，序列化时不进行显示</span></span><br><span class="line">    builder.serializationInclusion(JsonInclude.Include.NON_EMPTY);</span><br><span class="line">    <span class="comment">//DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES相当于配置，JSON串含有未知字段时，反序列化依旧可以成功</span></span><br><span class="line">    builder.failOnUnknownProperties(<span class="keyword">false</span>);</span><br><span class="line">    <span class="comment">//序列化时的命名策略——驼峰命名法</span></span><br><span class="line">    builder.propertyNamingStrategy(PropertyNamingStrategy.SNAKE_CASE);</span><br><span class="line">    <span class="comment">//针对于Date类型，文本格式化</span></span><br><span class="line">    builder.simpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//针对于JDK新时间类。序列化时带有T的问题，自定义格式化字符串</span></span><br><span class="line">    JavaTimeModule javaTimeModule = <span class="keyword">new</span> JavaTimeModule();</span><br><span class="line">    javaTimeModule.addSerializer(LocalDateTime.class, <span class="keyword">new</span> LocalDateTimeSerializer(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)));</span><br><span class="line">    javaTimeModule.addDeserializer(LocalDateTime.class, <span class="keyword">new</span> LocalDateTimeDeserializer(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)));</span><br><span class="line">    builder.modules(javaTimeModule);</span><br><span class="line"></span><br><span class="line">    ObjectMapper objectMapper = builder.createXmlMapper(<span class="keyword">false</span>).build();</span><br><span class="line">    <span class="comment">// 全局配置序列化返回 JSON 处理</span></span><br><span class="line">    SimpleModule simpleModule = <span class="keyword">new</span> SimpleModule();</span><br><span class="line">    <span class="comment">//JSON Long ==&gt; String</span></span><br><span class="line">    simpleModule.addSerializer(Long.class, ToStringSerializer.instance);</span><br><span class="line">    <span class="comment">// BigDecimal ==&gt; String</span></span><br><span class="line">    simpleModule.addSerializer(BigDecimal.class, ToStringSerializer.instance);</span><br><span class="line">    objectMapper.registerModule(simpleModule);</span><br><span class="line">    <span class="keyword">return</span> objectMapper;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>三、在application.yml中加上以下配置，这个办法会将所有数字都变成字符串，包括<code>long</code> 和<code>int</code> 类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  jackson:</span><br><span class="line">    generator:</span><br><span class="line">      writeNumbersAsStrings: <span class="keyword">true</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Bug</category>
      </categories>
      <tags>
        <tag>Bug</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis-plus lambda链式调用</title>
    <url>/post/5/</url>
    <content><![CDATA[<p>mybatis plus  lambda 链式调用 </p>
<h3 id="一、LambdaQueryWrapper-lt-gt"><a href="#一、LambdaQueryWrapper-lt-gt" class="headerlink" title="一、LambdaQueryWrapper&lt;&gt;"></a>一、LambdaQueryWrapper&lt;&gt;</h3><h3 id="二、QueryWrapper-lambda"><a href="#二、QueryWrapper-lambda" class="headerlink" title="二、QueryWrapper().lambda()"></a>二、QueryWrapper<T>().lambda()</h3><h3 id="三、Wrappers-lambdaQuery"><a href="#三、Wrappers-lambdaQuery" class="headerlink" title="三、Wrappers.lambdaQuery()"></a>三、Wrappers.<T>lambdaQuery()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生成的sql语句 SELECT * FROM user WHERE name LIKE ? AND age &lt; ?</span></span><br><span class="line">LambdaQueryWrapper&lt;User&gt; lambda = <span class="keyword">new</span> QueryWrapper&lt;User&gt;().lambda();</span><br><span class="line">LambdaQueryWrapper&lt;User&gt; lambda2 = <span class="keyword">new</span> LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">LambdaQueryWrapper&lt;User&gt; lambda3 = Wrappers.&lt;User&gt;lambdaQuery();</span><br><span class="line">        lambda3.like(User::getName, <span class="string">&quot;雨&quot;</span>)</span><br><span class="line">            .lt(User::getAge, <span class="number">40</span>);</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(lambda3);</span><br><span class="line">        users.forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// name like &#x27;王%&#x27; and (age &lt;40 or email in not null)</span></span><br><span class="line">LambdaQueryWrapper&lt;User&gt; lambda3 = Wrappers.&lt;User&gt;lambdaQuery();</span><br><span class="line">        lambda3.likeRight(User::getName, <span class="string">&quot;王&quot;</span>)</span><br><span class="line">                .and(qw -&gt; qw.lt(User::getAge, <span class="number">40</span>).or().isNotNull(User::getEmail));</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(lambda3);</span><br><span class="line">        users.forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<h4 id="自定义sql"><a href="#自定义sql" class="headerlink" title="自定义sql"></a>自定义sql</h4><ul>
<li>DAO</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 自定义sql 使用</span></span><br><span class="line"><span class="comment">    * Dao层  代码：</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Select</span>(&quot;select * from $&#123;ew.customSqlSegment&#125;&quot;)</span></span><br><span class="line"><span class="comment">    * List&lt;User&gt; selectAll(<span class="doctag">@Param</span>(Constants.WRAPPER)Wrapper&lt;User&gt; wrapper);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectLambda4my</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       LambdaQueryWrapper&lt;User&gt; lambda3 = Wrappers.&lt;User&gt;lambdaQuery();</span><br><span class="line">       lambda3.likeRight(User::getName, <span class="string">&quot;王&quot;</span>)</span><br><span class="line">               .and(qw -&gt; qw.lt(User::getAge, <span class="number">40</span>).or().isNotNull(User::getEmail));</span><br><span class="line">       List&lt;User&gt; users = userMapper.selectAll(lambda3);</span><br><span class="line">       users.forEach(System.out::println);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Mapper</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">List&lt;User&gt; <span class="title">selectAll</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;User&gt; wrapper)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.mp.dao.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.mp.entity.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user $&#123;ew.customSqlSegment&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserPage&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.mp.entity.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user $&#123;ew.customSqlSegment&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="四、LambdaQueryChainWrapper-xxxxMapper"><a href="#四、LambdaQueryChainWrapper-xxxxMapper" class="headerlink" title="四、LambdaQueryChainWrapper(xxxxMapper)"></a>四、LambdaQueryChainWrapper<T>(xxxxMapper)</h3><p><em>MP 3.0.7 新增的方式</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生成的sql语句 SELECT * FROM user WHERE name LIKE ? AND age &gt;= ?</span></span><br><span class="line">List&lt;User&gt; users = <span class="keyword">new</span> LambdaQueryChainWrapper&lt;User&gt;(userMapper)</span><br><span class="line">                .like(User::getName, <span class="string">&quot;雨&quot;</span>)</span><br><span class="line">                .ge(User::getAge, <span class="number">20</span>)</span><br><span class="line">                .list();</span><br></pre></td></tr></table></figure>

<h3 id="五、lambda在分页中的应用"><a href="#五、lambda在分页中的应用" class="headerlink" title="五、lambda在分页中的应用"></a>五、lambda在分页中的应用</h3><ul>
<li>配置类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MybatisPlusInterceptor interceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        <span class="comment">// 格式化sql语句</span></span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.setProperty(<span class="string">&quot;format&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;optimizeJoin&quot;</span>, <span class="string">&quot;false&quot;</span>);</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> PaginationInnerInterceptor(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Mapper</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">IPage&lt;User&gt; <span class="title">selectUserPage</span><span class="params">(Page&lt;User&gt; page,<span class="meta">@Param(Constants.WRAPPER)</span>Wrapper&lt;User&gt; wrapper)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserPage&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.mp.entity.User&quot;</span>&gt;</span></span><br><span class="line">    select * from user $&#123;ew.customSqlSegment&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>demo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;User&gt;();</span><br><span class="line">        queryWrapper.ge(<span class="string">&quot;age&quot;</span>, <span class="number">26</span>);</span><br><span class="line">        <span class="comment">//后面参数false  表示不查询总记录数</span></span><br><span class="line">        Page&lt;User&gt; userPage = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">1</span>, <span class="number">2</span>, <span class="keyword">false</span>);</span><br><span class="line">        IPage&lt;User&gt; iPage = userMapper.selectUserPage(userPage, queryWrapper);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>后台</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle</title>
    <url>/post/3/</url>
    <content><![CDATA[<h1 id="oracle"><a href="#oracle" class="headerlink" title="oracle"></a>oracle</h1><h2 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h2><h3 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> sequence 序列名</span><br></pre></td></tr></table></figure>

<h2 id="2-表空间"><a href="#2-表空间" class="headerlink" title="2. 表空间"></a>2. 表空间</h2><h3 id="创建表空间"><a href="#创建表空间" class="headerlink" title="创建表空间"></a>创建表空间</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span>space waterboss</span><br><span class="line">datafile <span class="string">&#x27;D:\app\HP\oradata\data\waterboss.dbf&#x27;</span></span><br><span class="line">size <span class="number">100</span>m</span><br><span class="line">autoextend <span class="keyword">on</span></span><br><span class="line">next <span class="number">10</span>m;</span><br></pre></td></tr></table></figure>

<h3 id="删除表空间"><a href="#删除表空间" class="headerlink" title="删除表空间"></a>删除表空间</h3><p>(数据文件会一起删除)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> tablespace waterboss including contents <span class="keyword">and</span>  datafiles;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> wateruser</span><br><span class="line">identified <span class="keyword">by</span> root(密码)</span><br><span class="line"><span class="keyword">default</span> tablespace waterboss;</span><br></pre></td></tr></table></figure>

<h3 id="创建用户失败"><a href="#创建用户失败" class="headerlink" title="创建用户失败"></a>创建用户失败</h3><p>ORA-65096: 公用用户名或角色名无效</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#oracle官方文档创建用户的时候用户名以c##或者C##开头</span><br><span class="line"><span class="keyword">alter</span> session <span class="keyword">set</span> &quot;_ORACLE_SCRIPT&quot;<span class="operator">=</span><span class="literal">true</span>;</span><br><span class="line"><span class="keyword">alter</span> session <span class="keyword">set</span> container<span class="operator">=</span>PDBORCL;</span><br></pre></td></tr></table></figure>

<h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><p>加了cascade就可以把用户连带的数据全部删掉。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> user_name cascade;</span><br></pre></td></tr></table></figure>

<h3 id="授予dba权限"><a href="#授予dba权限" class="headerlink" title="授予dba权限"></a>授予dba权限</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> dba <span class="keyword">to</span> wateruser;</span><br></pre></td></tr></table></figure>

<h3 id="解锁用户"><a href="#解锁用户" class="headerlink" title="解锁用户"></a>解锁用户</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> scott account unlock;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> scott identified <span class="keyword">by</span> tiger(密码);</span><br></pre></td></tr></table></figure>

<h2 id="3-数据导入与导出"><a href="#3-数据导入与导出" class="headerlink" title="3. 数据导入与导出"></a>3. 数据导入与导出</h2><h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">exp <span class="keyword">system</span><span class="operator">/</span>root 添加参数 file<span class="operator">=</span>文件名 就是整库导出 <span class="keyword">full</span><span class="operator">=</span>y</span><br></pre></td></tr></table></figure>

<p>执行命令后会在当前目录下生成一个叫 EXPDAT.DMP的文件，此文件为备份文件。添加参数 full=y 就是整库导出，file参数可指定文件名</p>
<h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">imp <span class="keyword">system</span><span class="operator">/</span>itcast <span class="keyword">full</span><span class="operator">=</span>y file<span class="operator">=</span>water.dmp </span><br></pre></td></tr></table></figure>

<h3 id="按用户导出与导入"><a href="#按用户导出与导入" class="headerlink" title="按用户导出与导入"></a>按用户导出与导入</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">exp <span class="keyword">system</span><span class="operator">/</span>itcast owner<span class="operator">=</span>wateruser file<span class="operator">=</span>wateruser.dmp </span><br><span class="line">imp <span class="keyword">system</span><span class="operator">/</span>itcast  file<span class="operator">=</span>wateruser.dmp fromuser<span class="operator">=</span>wateruser </span><br></pre></td></tr></table></figure>

<h3 id="按表导出与导入"><a href="#按表导出与导入" class="headerlink" title="按表导出与导入"></a>按表导出与导入</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">exp wateruser<span class="operator">/</span>itcast file<span class="operator">=</span>a.dmp tables<span class="operator">=</span>t_account,a_area </span><br><span class="line">imp wateruser<span class="operator">/</span>itcast file<span class="operator">=</span>a.dmp tables<span class="operator">=</span>t_account,a_area </span><br></pre></td></tr></table></figure>

<p>nextval :取得序列的下一个内容<br>currval :取得序列的当前内容</p>
<h2 id="4-PLSQL编程语言"><a href="#4-PLSQL编程语言" class="headerlink" title="4.PLSQL编程语言"></a>4.PLSQL编程语言</h2><h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><p>赋值操作可以使用:=也可以使用into查询语句赋值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span></span><br><span class="line">    i number(<span class="number">2</span>) :<span class="operator">=</span><span class="number">10</span>;</span><br><span class="line">		s varchar2(<span class="number">10</span>) :<span class="operator">=</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">		ena emp.ename<span class="operator">%</span>type;	<span class="comment">-- 引用型变量</span></span><br><span class="line">		emprow emp<span class="operator">%</span>rowtype; <span class="comment">--记录型变量</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    dbms_output.put_line(i);</span><br><span class="line">		dbms_output.put_line(s);</span><br><span class="line">		<span class="keyword">select</span> ename <span class="keyword">into</span> ena <span class="keyword">from</span> emp <span class="keyword">where</span> empno<span class="operator">=</span><span class="number">7788</span>;</span><br><span class="line">		dbms_output.put_line(ena);</span><br><span class="line">		<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">into</span> emprow <span class="keyword">from</span> emp <span class="keyword">where</span> empno<span class="operator">=</span><span class="number">7788</span>;</span><br><span class="line">		dbms_output.put_line(emprow.ename <span class="operator">||</span> <span class="string">&#x27;的工作为：&#x27;</span><span class="operator">||</span>emprow.job);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>

<h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">---输入小于18的数字，输出未成年</span></span><br><span class="line"><span class="comment">---输入大于18小于40的数字，输出中年人</span></span><br><span class="line"><span class="comment">---输入大于40的数字，输出老年人</span></span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">  i number(<span class="number">3</span>) :<span class="operator">=</span> <span class="operator">&amp;</span>i;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  if i<span class="operator">&lt;</span><span class="number">18</span> <span class="keyword">then</span></span><br><span class="line">    dbms_output.put_line(<span class="string">&#x27;未成年&#x27;</span>);</span><br><span class="line">  elsif i<span class="operator">&lt;</span><span class="number">40</span> <span class="keyword">then</span></span><br><span class="line">    dbms_output.put_line(<span class="string">&#x27;中年人&#x27;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    dbms_output.put_line(<span class="string">&#x27;老年人&#x27;</span>);</span><br><span class="line">  <span class="keyword">end</span> if;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>

<h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>用三种方式输出1到10是个数字</p>
<h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span></span><br><span class="line">  i number(<span class="number">2</span>) :<span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  while i <span class="operator">&lt;</span> <span class="number">11</span> loop</span><br><span class="line">    dbms_output.put_line(i);</span><br><span class="line">    i :<span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">end</span> loop;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>

<h4 id="exit循环"><a href="#exit循环" class="headerlink" title="exit循环"></a>exit循环</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span></span><br><span class="line">  i number(<span class="number">2</span>) :<span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  loop</span><br><span class="line">    exit <span class="keyword">when</span> i <span class="operator">&gt;</span> <span class="number">10</span>;</span><br><span class="line">    dbms_output.put_line(i);</span><br><span class="line">    i :<span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">end</span> loop;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>

<h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span> .. <span class="number">10</span> loop</span><br><span class="line">    dbms_output.put_line(i);</span><br><span class="line">  <span class="keyword">end</span> loop;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>

<h3 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h3><p>游标：可以存放多个对象，多行记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">---输出emp表中所有员工的姓名</span></span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">  <span class="keyword">cursor</span> c1 <span class="keyword">is</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp;</span><br><span class="line">  emprow emp<span class="operator">%</span>rowtype;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">   <span class="keyword">open</span> c1;</span><br><span class="line">        loop</span><br><span class="line">            <span class="keyword">fetch</span> c1 <span class="keyword">into</span> emprow;</span><br><span class="line">            exit <span class="keyword">when</span> c1<span class="operator">%</span>notfound;</span><br><span class="line">            dbms_output.put_line(emprow);</span><br><span class="line">        <span class="keyword">end</span> loop;</span><br><span class="line">   <span class="keyword">close</span> c1;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 给指定部门员工涨工资</span></span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">   <span class="keyword">cursor</span> c2(eno emp.deptno<span class="operator">%</span>type) <span class="keyword">is</span> <span class="keyword">select</span> empno <span class="keyword">from</span> emp <span class="keyword">where</span> deptno<span class="operator">=</span>eno;</span><br><span class="line">   en emp.empno<span class="operator">%</span>type;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">open</span> c2(<span class="number">10</span>);</span><br><span class="line">       loop</span><br><span class="line">         <span class="keyword">fetch</span> c2 <span class="keyword">into</span> en;</span><br><span class="line">         exit <span class="keyword">when</span> c2<span class="operator">%</span>notfound;</span><br><span class="line">         update emp <span class="keyword">set</span> sal<span class="operator">=</span>sal<span class="number">-100</span> <span class="keyword">where</span> empno<span class="operator">=</span>en;</span><br><span class="line">         <span class="keyword">commit</span>;</span><br><span class="line">        <span class="keyword">end</span> loop;</span><br><span class="line">  <span class="keyword">close</span> c2;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>

<h3 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h3><p>存储过程就是一段提前编译好的sql语句，放置在数据库端，可以直接被调用</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">procedure</span> p1 (eno emp.empno<span class="operator">%</span>type) <span class="keyword">is</span> </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  update emp <span class="keyword">set</span> sal<span class="operator">=</span>sal<span class="operator">+</span><span class="number">100</span> <span class="keyword">where</span> empno<span class="operator">=</span>eno;</span><br><span class="line">  <span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>

<h3 id="存储函数"><a href="#存储函数" class="headerlink" title="存储函数"></a>存储函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">function</span> f_yearsal(eno emp.empno<span class="operator">%</span>type) <span class="keyword">return</span> number </span><br><span class="line"><span class="keyword">is</span></span><br><span class="line">      res number(<span class="number">10</span>); </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">select</span> sal<span class="operator">*</span><span class="number">12</span><span class="operator">+</span>nvl(comm, <span class="number">0</span>) <span class="keyword">into</span> res <span class="keyword">from</span> emp <span class="keyword">where</span> empno <span class="operator">=</span> eno;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="comment">-- 测试</span></span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">  res number(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  res :<span class="operator">=</span> f_yearsal(<span class="number">7788</span>);</span><br><span class="line">  dbms_output.put_line(res);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>

<h3 id="out类型参数"><a href="#out类型参数" class="headerlink" title="out类型参数"></a>out类型参数</h3><p>in和out类型参数的区别是什么？<br>凡是涉及到into查询语句赋值或者:=赋值操作的参数，都必须使用out来修饰。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">procedure</span> p_yearsal(eno emp.empno<span class="operator">%</span>type, yearsal <span class="keyword">out</span> number) <span class="keyword">is</span></span><br><span class="line">    s number(<span class="number">10</span>); </span><br><span class="line">    c emp.comm<span class="operator">%</span>type;   </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">select</span> sal<span class="operator">*</span><span class="number">12</span>,nvl(comm,<span class="number">0</span>) <span class="keyword">into</span> s,c <span class="keyword">from</span> emp <span class="keyword">where</span> empno<span class="operator">=</span>eno;</span><br><span class="line">    yearsal :<span class="operator">=</span> s<span class="operator">+</span>c;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="comment">-- 测试</span></span><br><span class="line"><span class="keyword">declare</span> </span><br><span class="line">    yearsal number(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    p_yearsal(<span class="number">7788</span>,yearsal);</span><br><span class="line">    dbms_output.put_line(yearsal);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>

<h3 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h3><p>触发器，就是制定一个规则，在我们做增删改操作的时候，只要满足该规则，自动触发，无需调用。<br>    语句级触发器：不包含有for each row的触发器。<br>    行级触发器：包含有for each row的就是行级触发器。<br>    加for each row是为了使用:old或者:new对象或者一行记录。<br>语句级触发器    </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">trigger</span> t1 </span><br><span class="line">after</span><br><span class="line"><span class="keyword">insert</span></span><br><span class="line"><span class="keyword">on</span> person</span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  dbms_output.put_line(<span class="string">&#x27;一个新员工入职&#x27;</span>);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>

<p>行级别触发器</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">---raise_application_error(-20001~-20999之间, &#x27;错误提示信息&#x27;);</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">trigger</span> t2</span><br><span class="line">before</span><br><span class="line">update</span><br><span class="line"><span class="keyword">on</span> emp</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">   if :old.sal<span class="operator">&gt;</span>:new.sal <span class="keyword">then</span></span><br><span class="line">       raise_application_error(<span class="number">-20001</span>,<span class="string">&#x27;不能给员工降薪&#x27;</span>);</span><br><span class="line">   <span class="keyword">end</span> if;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>

<p>触发器实现主键自增。【行级触发器】</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">---分析：在用户做插入操作的之前，拿到即将插入的数据，给该数据中的主键列赋值。</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">trigger</span> auid</span><br><span class="line">before</span><br><span class="line"><span class="keyword">insert</span></span><br><span class="line"><span class="keyword">on</span> person</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">select</span> s_person.nextval <span class="keyword">into</span> :new.id <span class="keyword">from</span> dual;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>

<h2 id="5-oracle函数"><a href="#5-oracle函数" class="headerlink" title="5.oracle函数"></a>5.oracle函数</h2><h3 id="5-1-数值型函数"><a href="#5-1-数值型函数" class="headerlink" title="5.1 数值型函数"></a>5.1 数值型函数</h3><table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>ABS(X)</td>
<td>返回x的绝对值</td>
</tr>
<tr>
<td>sign(x)</td>
<td>返回x的正负值。若为正值返回1，负值返回-1，0返回0</td>
</tr>
<tr>
<td>ceil(x)</td>
<td>向上取整</td>
</tr>
<tr>
<td>floor(x)</td>
<td>向下取整</td>
</tr>
<tr>
<td>power(x,y)</td>
<td>返回x的y次幂</td>
</tr>
<tr>
<td>mod(x,y)</td>
<td>返回x除以y的余数</td>
</tr>
</tbody></table>
<h3 id="round-x，-y"><a href="#round-x，-y" class="headerlink" title="round(x，[y])"></a>round(x，[y])</h3><p>返回四舍五入后的值</p>
<p>如果y不为整数则截取y整数部分，<br>如果y&gt;0则四舍五入为y位小数，<br>如果y小于0则四舍五入到小数点向左第y位。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> round(<span class="number">5555.6666</span>,<span class="number">2.1</span>),round(<span class="number">5555.6666</span>,<span class="number">-2.6</span>),round(<span class="number">5555.6666</span>) <span class="keyword">from</span> dual;</span><br><span class="line">ROUND(<span class="number">5555.6666</span>,<span class="number">2.1</span>) ROUND(<span class="number">5555.6666</span>,<span class="number">-2.6</span>) ROUND(<span class="number">5555.6666</span>)</span><br><span class="line"><span class="comment">-------------------- --------------------- ----------------</span></span><br><span class="line">             <span class="number">5555.67</span>                  <span class="number">5600</span>             <span class="number">5556</span></span><br></pre></td></tr></table></figure>

<h2 id="trun-x，-y"><a href="#trun-x，-y" class="headerlink" title="trun(x，[y])"></a>trun(x，[y])</h2><p>返回x按精度y截取后的值 </p>
<p>如果y不为整数则截取y整数部分，<br>如果y&gt;0则截取到y位小数，<br>如果y小于0则截取到小数点向左第y位，小数前其它<a href="https://so.csdn.net/so/search?q=%E6%95%B0%E6%8D%AE&spm=1001.2101.3001.7020">数据</a>用0表示</p>
<h3 id="5-2-字符型函数"><a href="#5-2-字符型函数" class="headerlink" title="5.2 字符型函数"></a>5.2 字符型函数</h3><table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>concat(c1,c2)</td>
<td>连接两个字符串</td>
</tr>
<tr>
<td>initcap(c1)</td>
<td>将字符串的第一个字母变为大写，其它字母小写</td>
</tr>
<tr>
<td>lower(c1)</td>
<td>将字符串全部转为小写</td>
</tr>
<tr>
<td>upper(c1)</td>
<td>将字符串全部转为大写</td>
</tr>
</tbody></table>
<h3 id="instr-c1-c2-x-y"><a href="#instr-c1-c2-x-y" class="headerlink" title="instr(c1,c2[,x],[y])"></a>instr(c1,c2[,x],[y])</h3><p>字符串中搜索字符位置</p>
<p>C1 被搜索的字符串<br>C2 希望搜索的字符串<br>x 搜索的开始位置,默认为1<br>y 第y次出现的位置,默认为1</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> instr(<span class="string">&#x27;oracle traning&#x27;</span>,<span class="string">&#x27;ra&#x27;</span>,<span class="number">1</span>,<span class="number">2</span>) instring <span class="keyword">from</span> dual;</span><br><span class="line"><span class="comment">------------</span></span><br><span class="line"><span class="comment">-- 9</span></span><br></pre></td></tr></table></figure>

<h3 id="lpad-c1-n-c2"><a href="#lpad-c1-n-c2" class="headerlink" title="lpad(c1,n[,c2])"></a>lpad(c1,n[,c2])</h3><p>在左边添加字符。在字符串c1的左边用字符串c2填充，直到长度为n时为止</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> lpad(<span class="string">&#x27;杨&#x27;</span>,<span class="number">10</span>,<span class="string">&#x27;*&#x27;</span>) <span class="keyword">from</span> dual;</span><br><span class="line"><span class="comment">-----------------</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span>杨</span><br></pre></td></tr></table></figure>

<h3 id="rpad-c1-n-c2"><a href="#rpad-c1-n-c2" class="headerlink" title="rpad(c1,n[,c2])"></a>rpad(c1,n[,c2])</h3><p>在字符串c1的右边用字符串c2填充，直到长度为n时为止</p>
<h3 id="ltrim-c1-c2"><a href="#ltrim-c1-c2" class="headerlink" title="ltrim(c1,[,c2])"></a>ltrim(c1,[,c2])</h3><p>删除左边出现的字符串</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">select</span> LTRIM(<span class="string">&#x27;   xiao gong jiang&#x27;</span>,<span class="string">&#x27; &#x27;</span>) text <span class="keyword">from</span> dual;</span><br><span class="line"> <span class="comment">---------------</span></span><br><span class="line">xiao gong jiang</span><br></pre></td></tr></table></figure>

<h3 id="rtrim-c1-c2"><a href="#rtrim-c1-c2" class="headerlink" title="rtrim(c1,[,c2])"></a>rtrim(c1,[,c2])</h3><p>删除右边出现的字符串</p>
<h3 id="replace-c1-c2-c3"><a href="#replace-c1-c2-c3" class="headerlink" title="replace(c1,c2[,c3])"></a>replace(c1,c2[,c3])</h3><p>将字符表达式值中，部分相同字符串，替换成新的字符串</p>
<p>c1 希望被替换的字符或变量<br>c2 被替换的字符串<br>c3 要替换的字符串，默认为空(即删除之意，不是空格)</p>
<h3 id="substr-c1-n1-n2"><a href="#substr-c1-n1-n2" class="headerlink" title="substr(c1,n1[,n2])"></a>substr(c1,n1[,n2])</h3><p>取子字符串。在字符表达式c1里，从n1开始取n2个字符;若不指定n2,则从第y个字符直到结束的字串.</p>
<h3 id="translate-c1-c2-c3"><a href="#translate-c1-c2-c3" class="headerlink" title="translate(c1,c2,c3)"></a>translate(c1,c2,c3)</h3><p>将字符表达式值中，指定字符替换为新字符.</p>
<p>c1 希望被替换的字符或变量<br>c2 查询原始的字符集<br>c3 替换新的字符集，将c2对应顺序字符，替换为c3对应顺序字符<br>如果c3长度大于c2，则c3长出后面的字符无效<br>如果c3长度小于c2，则c2长出后面的字符均替换为空(删除)<br>如果c3长度为0，则返回空字符串。<br>如果c2里字符重复，按首次位置为替换依据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">TRANSLATE</span>(<span class="string">&#x27;he love you&#x27;</span>,<span class="string">&#x27;he&#x27;</span>,<span class="string">&#x27;i&#x27;</span>),</span><br><span class="line">  <span class="built_in">TRANSLATE</span>(<span class="string">&#x27;重庆的人&#x27;</span>,<span class="string">&#x27;重庆的&#x27;</span>,<span class="string">&#x27;上海男&#x27;</span>),</span><br><span class="line">  <span class="built_in">TRANSLATE</span>(<span class="string">&#x27;重庆的人&#x27;</span>,<span class="string">&#x27;重庆的重庆&#x27;</span>,<span class="string">&#x27;北京男士们&#x27;</span>),</span><br><span class="line">  <span class="built_in">TRANSLATE</span>(<span class="string">&#x27;重庆的人&#x27;</span>,<span class="string">&#x27;重庆的重庆&#x27;</span>,<span class="string">&#x27;1北京男士们&#x27;</span>),</span><br><span class="line">  <span class="built_in">TRANSLATE</span>(<span class="string">&#x27;重庆的人&#x27;</span>,<span class="string">&#x27;1重庆的重庆&#x27;</span>,<span class="string">&#x27;北京男士们&#x27;</span>),</span><br><span class="line">  <span class="built_in">TRANSLATE</span>(<span class="string">&#x27;aeiou&#x27;</span>, <span class="string">&#x27;1aeiou&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)<span class="keyword">from</span> dual;</span><br><span class="line">  <span class="comment">-----------------------------------------</span></span><br><span class="line">  i lov you,上海男人,北京男人,<span class="number">1</span>北京人,京男士人,<span class="keyword">null</span></span><br></pre></td></tr></table></figure>

<h3 id="trim-c1-from-c2"><a href="#trim-c1-from-c2" class="headerlink" title="trim(c1 from c2)"></a>trim(c1 from c2)</h3><p>删除左边和右边出现的字符串</p>
<h3 id="5-3-日期函数"><a href="#5-3-日期函数" class="headerlink" title="5.3 日期函数"></a>5.3 日期函数</h3><table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>sysydate</td>
<td>返回当前日期。</td>
</tr>
<tr>
<td>add_months(d1,n1)</td>
<td>返回在日期d1基础上再加n1个月后新的日期</td>
</tr>
<tr>
<td>last_day(d1)</td>
<td>返回本月最后一天的日期</td>
</tr>
<tr>
<td>months_between(d1,d2)</td>
<td>返回日期d1到日期d2之间的月数</td>
</tr>
</tbody></table>
<h3 id="round-d1-c1"><a href="#round-d1-c1" class="headerlink" title="round(d1[,c1])"></a>round(d1[,c1])</h3><p>给出日期d1按期间(参数c1)四舍五入后的期间的第一天日期</p>
<p>d1日期型,c1为字符型(参数)，c1默认为j（即最近0点日期)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">select</span> sysdate 当时日期,</span><br><span class="line">  <span class="number">2</span>  round(sysdate) 最近<span class="number">0</span>点日期,</span><br><span class="line">  <span class="number">3</span>  round(sysdate,<span class="string">&#x27;day&#x27;</span>) 最近星期日,</span><br><span class="line">  <span class="number">4</span>  round(sysdate,<span class="string">&#x27;month&#x27;</span>) 最近月初,</span><br><span class="line">  <span class="number">5</span>  round(sysdate,<span class="string">&#x27;q&#x27;</span>) 最近季初日期,</span><br><span class="line">  <span class="number">6</span>  round(sysdate,<span class="string">&#x27;year&#x27;</span>) 最近年初日期 <span class="keyword">from</span> dual;</span><br><span class="line"></span><br><span class="line">当时日期    最近<span class="number">0</span>点日期 最近星期日  最近月初    最近季初日期 最近年初日期</span><br><span class="line"><span class="comment">----------- ----------- ----------- ----------- ------------ ------------</span></span><br><span class="line"><span class="number">2016</span><span class="number">-5</span><span class="number">-25</span> <span class="number">0</span> <span class="number">2016</span><span class="number">-5</span><span class="number">-25</span>   <span class="number">2016</span><span class="number">-5</span><span class="number">-22</span>   <span class="number">2016</span><span class="number">-6</span><span class="number">-1</span>    <span class="number">2016</span><span class="number">-7</span><span class="number">-1</span>     <span class="number">2016</span><span class="number">-1</span><span class="number">-1</span></span><br></pre></td></tr></table></figure>

<h3 id="trunc-d1-c1"><a href="#trunc-d1-c1" class="headerlink" title="trunc(d1[,c1])"></a>trunc(d1[,c1])</h3><p>返回日期d1所在期间(参数c1)的第一天日期</p>
<p>d1日期型,c1为字符型(参数)，c1默认为j（即当前日期)</p>
<p>c1对应的参数表:<br>最近0点日期: 取消参数c1或j<br>最近的星期日：day或dy或d (每周顺序：日，一，二，三，四，五，六）<br>最近月初日期：month或mon或mm或rm<br>最近季日期：q<br>最近年初日期：syear或year或yyyy或yyy或yy或y(多个y表示精度)<br>最近世纪初日期：cc或scc</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">select</span> sysdate 当时日期,</span><br><span class="line">  <span class="number">2</span>  trunc(sysdate) 今天日期,</span><br><span class="line">  <span class="number">3</span>  trunc(sysdate,<span class="string">&#x27;day&#x27;</span>) 本周星期日,</span><br><span class="line">  <span class="number">4</span>  trunc(sysdate,<span class="string">&#x27;month&#x27;</span>) 本月初,</span><br><span class="line">  <span class="number">5</span>  trunc(sysdate,<span class="string">&#x27;q&#x27;</span>) 本季初日期,</span><br><span class="line">  <span class="number">6</span>  trunc(sysdate,<span class="string">&#x27;year&#x27;</span>) 本年初日期 <span class="keyword">from</span> dual;</span><br><span class="line"></span><br><span class="line">当时日期    今天日期    本周星期日  本月初      本季初日期  本年初日期</span><br><span class="line"><span class="comment">----------- ----------- ----------- ----------- ----------- -----------</span></span><br><span class="line"><span class="number">2016</span><span class="number">-5</span><span class="number">-25</span> <span class="number">0</span> <span class="number">2016</span><span class="number">-5</span><span class="number">-25</span>   <span class="number">2016</span><span class="number">-5</span><span class="number">-22</span>   <span class="number">2016</span><span class="number">-5</span><span class="number">-1</span>    <span class="number">2016</span><span class="number">-4</span><span class="number">-1</span>    <span class="number">2016</span><span class="number">-1</span><span class="number">-1</span></span><br></pre></td></tr></table></figure>

<h3 id="extract-c1-from-d1"><a href="#extract-c1-from-d1" class="headerlink" title="extract(c1 from d1)"></a>extract(c1 from d1)</h3><p>提取时间日期中的数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">select</span></span><br><span class="line">  <span class="number">2</span>  <span class="built_in">extract</span>(<span class="keyword">hour</span> <span class="keyword">from</span> <span class="type">timestamp</span> <span class="string">&#x27;2001-2-16 2:38:40 &#x27;</span> ) 小时,</span><br><span class="line">  <span class="number">3</span>  <span class="built_in">extract</span>(<span class="keyword">minute</span> <span class="keyword">from</span> <span class="type">timestamp</span> <span class="string">&#x27;2001-2-16 2:38:40 &#x27;</span> ) 分钟,</span><br><span class="line">  <span class="number">4</span>  <span class="built_in">extract</span>(<span class="keyword">second</span> <span class="keyword">from</span> <span class="type">timestamp</span> <span class="string">&#x27;2001-2-16 2:38:40 &#x27;</span> ) 秒,</span><br><span class="line">  <span class="number">5</span>  <span class="built_in">extract</span>(<span class="keyword">DAY</span> <span class="keyword">from</span> <span class="type">timestamp</span> <span class="string">&#x27;2001-2-16 2:38:40 &#x27;</span> ) 日,</span><br><span class="line">  <span class="number">6</span>  <span class="built_in">extract</span>(<span class="keyword">MONTH</span> <span class="keyword">from</span> <span class="type">timestamp</span> <span class="string">&#x27;2001-2-16 2:38:40 &#x27;</span> ) 月,</span><br><span class="line">  <span class="number">7</span>  <span class="built_in">extract</span>(<span class="keyword">YEAR</span> <span class="keyword">from</span> <span class="type">timestamp</span> <span class="string">&#x27;2001-2-16 2:38:40 &#x27;</span> ) 年</span><br><span class="line">  <span class="number">8</span>   <span class="keyword">from</span> dual;</span><br><span class="line"></span><br><span class="line">      小时       分钟         秒         日         月         年</span><br><span class="line"><span class="comment">---------- ---------- ---------- ---------- ---------- ----------</span></span><br><span class="line">         <span class="number">2</span>         <span class="number">38</span>         <span class="number">40</span>         <span class="number">16</span>          <span class="number">2</span>       <span class="number">2001</span></span><br></pre></td></tr></table></figure>



<h3 id="5-4转换函数"><a href="#5-4转换函数" class="headerlink" title="5.4转换函数"></a>5.4转换函数</h3><h3 id="TO-CHAR-x-c2-C3"><a href="#TO-CHAR-x-c2-C3" class="headerlink" title="TO_CHAR(x[[,c2],C3])"></a>TO_CHAR(x[[,c2],C3])</h3><p>将日期或数据转换为char数据类型</p>
<p>如果x为日期控制返回的月份和日份所使用的语言。<br>如果x为数字用来指定小数位和千分位的分隔符，以及货币符号。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- x为数据型时</span></span><br><span class="line">to_char(<span class="number">1210.73</span>, <span class="string">&#x27;9999.9&#x27;</span>) 返回 <span class="string">&#x27;1210.7&#x27;</span> </span><br><span class="line">to_char(<span class="number">1210.73</span>, <span class="string">&#x27;9,999.99&#x27;</span>) 返回 <span class="string">&#x27;1,210.73&#x27;</span> </span><br><span class="line">to_char(<span class="number">1210.73</span>, <span class="string">&#x27;$9,999.00&#x27;</span>) 返回 <span class="string">&#x27;$1,210.73&#x27;</span> </span><br><span class="line">to_char(<span class="number">21</span>, <span class="string">&#x27;000099&#x27;</span>) 返回 <span class="string">&#x27;000021&#x27;</span> </span><br><span class="line">to_char(<span class="number">852</span>,<span class="string">&#x27;xxxx&#x27;</span>) 返回<span class="string">&#x27; 354&#x27;</span> <span class="comment">-- 将10进制转换为16进制；</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- x为日期型,c2可用参数</span></span><br><span class="line">to_char(sysdate,<span class="string">&#x27;d&#x27;</span>) 每周第几天 </span><br><span class="line">to_char(sysdate,<span class="string">&#x27;dd&#x27;</span>) 每月第几天 </span><br><span class="line">to_char(sysdate,<span class="string">&#x27;ddd&#x27;</span>) 每年第几天 </span><br><span class="line">to_char(sysdate,<span class="string">&#x27;ww&#x27;</span>) 每年第几周 </span><br><span class="line">to_char(sysdate,<span class="string">&#x27;mm&#x27;</span>) 每年第几月 </span><br><span class="line">to_char(sysdate,<span class="string">&#x27;q&#x27;</span>) 每年第几季 </span><br><span class="line">to_char(sysdate,<span class="string">&#x27;yyyy&#x27;</span>) 年</span><br></pre></td></tr></table></figure>

<h3 id="TO-DATE-X-c2-c3"><a href="#TO-DATE-X-c2-c3" class="headerlink" title="TO_DATE(X[,c2[,c3]])"></a>TO_DATE(X[,c2[,c3]])</h3><p>将字符串X转化为日期型</p>
<p>c2,c3,字符型，参照to_char()</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">select</span> to_date(<span class="string">&#x27;199912&#x27;</span>,<span class="string">&#x27;yyyymm&#x27;</span>),</span><br><span class="line">  <span class="number">2</span>  to_date(<span class="string">&#x27;2000.05.20&#x27;</span>,<span class="string">&#x27;yyyy.mm.dd&#x27;</span>),</span><br><span class="line">  <span class="number">3</span>  (<span class="type">date</span> <span class="string">&#x27;2008-12-31&#x27;</span>) XXdate,</span><br><span class="line">  <span class="number">4</span>  to_date(<span class="string">&#x27;2008-12-31 12:31:30&#x27;</span>,<span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>),</span><br><span class="line">  <span class="number">5</span>  (<span class="type">timestamp</span> <span class="string">&#x27;2008-12-31 12:31:30&#x27;</span>) XXtimestamp</span><br><span class="line">  <span class="number">6</span>  <span class="keyword">from</span> dual;</span><br><span class="line"></span><br><span class="line">TO_DATE(<span class="string">&#x27;199912&#x27;</span>,<span class="string">&#x27;YYYYMM&#x27;</span>) TO_DATE(<span class="string">&#x27;2000.05.20&#x27;</span>,<span class="string">&#x27;YYYY.MM. XXDATE TO_DATE(&#x27;</span><span class="number">2008</span><span class="number">-12</span><span class="number">-3112</span>:<span class="number">31</span>:<span class="number">30</span><span class="string">&#x27;,&#x27;</span> XXTIMESTAMP</span><br><span class="line"><span class="comment">-------------------------- ------------------------------ ----------- ------------------------------ --------------------------------------------------------------------------------</span></span><br><span class="line"><span class="number">1999</span><span class="number">-12</span><span class="number">-01</span>      <span class="number">2000</span><span class="number">-05</span><span class="number">-20</span>          <span class="number">2008</span><span class="number">-12</span><span class="number">-31</span> <span class="number">2008</span><span class="number">-12</span><span class="number">-31</span> <span class="number">12</span>:<span class="number">31</span>:<span class="number">30</span> <span class="number">31</span><span class="operator">-</span><span class="type">DEC</span><span class="number">-08</span> <span class="number">12.31</span><span class="number">.30</span><span class="number">.000000000</span> PM</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="5-5-其他函数"><a href="#5-5-其他函数" class="headerlink" title="5.5 其他函数"></a>5.5 其他函数</h3><h3 id="nvl-nvl2"><a href="#nvl-nvl2" class="headerlink" title="nvl() nvl2()"></a>nvl() nvl2()</h3><p>为空值赋值。</p>
<p>NVL (expr1, expr2) 【功能】若expr1为NULL，返回expr2；expr1不为NULL，返回expr1。</p>
<p>NVL2 (expr1, expr2, expr3) ,expr1不为NULL，返回expr2；expr2为NULL，返回expr3。</p>
<h3 id="COALESCE"><a href="#COALESCE" class="headerlink" title="COALESCE"></a>COALESCE</h3><p>返回第一个不为空的表达式，如果都为空则返回空值。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">coalesce</span>(<span class="keyword">null</span> ,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) <span class="keyword">from</span> dual;</span><br><span class="line"><span class="comment">------</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="查找空值"><a href="#查找空值" class="headerlink" title="查找空值"></a>查找空值</h3><h4 id="COALESCE-1"><a href="#COALESCE-1" class="headerlink" title="**COALESCE **"></a>**COALESCE **</h4><p>COALESCE ( expression,value1,value2……,valuen)  返回多个值中第一个不为空的值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">coalesce</span>(<span class="keyword">null</span>, <span class="keyword">null</span> ,<span class="number">1</span> , <span class="number">0</span>) <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure>

<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="DECODE"><a href="#DECODE" class="headerlink" title="DECODE"></a>DECODE</h3><p>根据条件返回相应值。decode(条件,值1,翻译值1,值2,翻译值2,…值n,翻译值n,缺省值)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> decode(sex,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;其他&#x27;</span>) <span class="keyword">as</span> sex <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure>



<blockquote>
<p><a href="https://blog.csdn.net/yangshangwei/article/details/51425458"> Oracle函数_小工匠-CSDN博客_oracle函数</a></p>
</blockquote>
<h3 id="5-6分析函数"><a href="#5-6分析函数" class="headerlink" title="5.6分析函数"></a>5.6分析函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">function_name(<span class="operator">&lt;</span>argument<span class="operator">&gt;</span>,<span class="operator">&lt;</span>argument<span class="operator">&gt;</span>...) <span class="keyword">over</span>(<span class="operator">&lt;</span>partition_Clause<span class="operator">&gt;</span><span class="operator">&lt;</span><span class="keyword">order</span> by_Clause<span class="operator">&gt;</span><span class="operator">&lt;</span>windowing_Clause<span class="operator">&gt;</span>);</span><br></pre></td></tr></table></figure>

<p>function_name()：函数名称</p>
<p>argument：参数</p>
<p>over( )：开窗函数</p>
<p>partition_Clause：分区子句，数据记录集分组，group by…</p>
<p>order by_Clause：排序子句，数据记录集排序，order by…</p>
<p>windowing_Clause：开窗子句，定义分析函数在操作行的集合，三种开窗方式：rows、range、Specifying</p>
<p><font color='red'>注：</font>使用开窗子句时一定要有排序子句</p>
<p>SUM() OVER() 统计分区中记录的总和</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> deptno,ename,sal,</span><br><span class="line">       <span class="built_in">sum</span>(sal) <span class="keyword">over</span> () 总和,</span><br><span class="line">       <span class="built_in">sum</span>(sal) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> deptno,sal) 连续求和,</span><br><span class="line">       <span class="built_in">sum</span>(sal) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> deptno) 分组总和,</span><br><span class="line">       <span class="built_in">sum</span>(sal) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> deptno <span class="keyword">order</span> <span class="keyword">by</span> sal) 组内连续求和</span><br><span class="line"><span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure>

<p><img data-src="1.png"></p>
<p>COUNT() OVER() 统计分区中各组的行数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> empno,deptno,</span><br><span class="line">       <span class="built_in">count</span>(empno) <span class="keyword">over</span> () 总和,</span><br><span class="line">       <span class="built_in">count</span>(empno) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> deptno,empno) 连续求和,</span><br><span class="line">       <span class="built_in">count</span>(empno) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> deptno) 分组总和,</span><br><span class="line">       <span class="built_in">count</span>(empno) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> deptno <span class="keyword">order</span> <span class="keyword">by</span> empno) 组内连续求和</span><br><span class="line"><span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure>

<p><img data-src="2.png"></p>
<p>avg() over()  ：统计分区中记录的平均值，partition by 可选，order by 可选</p>
<p>min() over() ：统计分区中记录的最小值，partition by 可选，order by 可选</p>
<p>max() over() ：统计分区中记录的最大值，partition by 可选，order by 可选</p>
<p>rank() over()  ：跳跃排序</p>
<p>dense_rank() ：连续排序</p>
<p>row_number() over() ：排序，无重复值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> t.<span class="operator">*</span>,</span><br><span class="line">       <span class="built_in">rank</span>() <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> col2 <span class="keyword">order</span> <span class="keyword">by</span> col1) rank,</span><br><span class="line">       <span class="built_in">dense_rank</span>() <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> col2 <span class="keyword">order</span> <span class="keyword">by</span> col1) dense_rank,</span><br><span class="line">       <span class="built_in">row_number</span>() <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> col2 <span class="keyword">order</span> <span class="keyword">by</span> col1) num</span><br><span class="line"><span class="keyword">from</span> XGJ t;</span><br></pre></td></tr></table></figure>

<p><img data-src="3.png"></p>
<p><font color='red'>注：</font> rank和 dense_rank 主要的功能是计算一组数值中的排序值。<br>        dence_rank在并列关系是，相关等级不会跳过。rank则跳过.<br>        rank()是跳跃排序，有两个第二名时接下来就是第四名（同样是在各个分组内）<br>        dense_rank()l是连续排序，有两个第二名时仍然跟着第三名。</p>
<p>ntile(n) over() ：partition by 可选，order by 必选</p>
<p> n表示将分区内记录平均分成n份，多出的按照顺序依次分给前面的组</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,deptno,sal,</span><br><span class="line">       <span class="built_in">ntile</span>(<span class="number">5</span>) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span>) 均分,</span><br><span class="line">       <span class="built_in">ntile</span>(<span class="number">3</span>) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> deptno <span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span>) 按组均分</span><br><span class="line"><span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure>

<p><img data-src="4.png"></p>
<p>first_value() over() ：取出分区中第一条记录的字段值，partition by 可选，order by 可选</p>
<p>last_value() over() ：取出分区中最后一条记录的字段值，partition by 可选，order by 可选</p>
<p>lag() over() ：取出前n行数据，partition by 可选，order by 必选</p>
<p>lead() over() ：取出后n行数据，partition by 可选，order by 必选</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">lag</span>(EXPR,<span class="operator">&lt;</span><span class="keyword">OFFSET</span><span class="operator">&gt;</span>,<span class="operator">&lt;</span><span class="keyword">DEFAULT</span><span class="operator">&gt;</span>)</span><br><span class="line"><span class="built_in">LEAD</span>(EXPR,<span class="operator">&lt;</span><span class="keyword">OFFSET</span><span class="operator">&gt;</span>,<span class="operator">&lt;</span><span class="keyword">DEFAULT</span><span class="operator">&gt;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>EXPR是从其他行返回的表达式</li>
<li>OFFSET是缺省为1 的正数，表示相对行数。希望检索的当前行分区的偏移量</li>
<li>DEFAULT是在OFFSET表示的数目超出了分组的范围时返回的值。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> deptno,ename,sal,</span><br><span class="line">       <span class="built_in">lag</span>(ename, <span class="number">1</span>) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> sal)    next_ename,</span><br><span class="line">       <span class="built_in">lag</span>(ename, <span class="number">2</span>) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> sal)    next_ename2,</span><br><span class="line">       <span class="built_in">lag</span>(ename, <span class="number">1</span>, <span class="number">0</span>) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> sal) next_ename10,</span><br><span class="line">       <span class="built_in">lag</span>(ename, <span class="number">1</span>, <span class="number">1</span>) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> sal) next_ename11,</span><br><span class="line">       <span class="built_in">lag</span>(ename, <span class="number">2</span>, <span class="number">0</span>) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> sal) next_ename20</span><br><span class="line"><span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure>

<p><img data-src="5.png"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> t.<span class="operator">*</span>,</span><br><span class="line">       <span class="built_in">lag</span>(stepid) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> caseid <span class="keyword">order</span> <span class="keyword">by</span> stepid) next_id,</span><br><span class="line">       <span class="built_in">lag</span>(actiondate) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> caseid <span class="keyword">order</span> <span class="keyword">by</span> stepid) next_date</span><br><span class="line"><span class="keyword">from</span> LEAD_TABLE t;</span><br></pre></td></tr></table></figure>

<p><img data-src="6.png"></p>
<p>ratio_to_report(a) over(partition by b) 按照b分组后a的值在所属分组中总值的占比,a的值必须为数值或数值型字段</p>
<p>partition by 可选，order by 不可选</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> deptno,ename,job,sal,</span><br><span class="line">       ratio_to_report(<span class="number">1</span>) <span class="keyword">over</span> () 行数比例, <span class="comment">--给每一行赋值1，求当前行在总值的占比</span></span><br><span class="line">       ratio_to_report(sal) <span class="keyword">over</span> () 工资比列, <span class="comment">--当前行的值在所有数据中的占比</span></span><br><span class="line">       ratio_to_report(<span class="number">1</span>) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> deptno) 分组行数比例, <span class="comment">--给每一行赋值1，求当前行在分组后的组内总值的占比 </span></span><br><span class="line">       ratio_to_report(sal) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> deptno) 分组工资比例 <span class="comment">--当前行的值在分组后组内总值占比</span></span><br><span class="line"><span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure>

<p>percent_rank() over()  ：partition by 可选，order by 必选</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> deptno,ename,job,sal,</span><br><span class="line">       <span class="built_in">percent_rank</span>() <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> ename)</span><br><span class="line"><span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure>

<p><img data-src="7.png"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> deptno,ename,job,sal,</span><br><span class="line">       <span class="built_in">percent_rank</span>() <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> deptno <span class="keyword">order</span> <span class="keyword">by</span> sal) <span class="keyword">percent</span></span><br><span class="line"><span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure>

<p><img data-src="8.png"></p>
<p>MAX()   KEEP(DENSE_RANK FIRST/LAST)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 获取部门内年龄最小的人中，工资最高的记录</span></span><br><span class="line"><span class="keyword">select</span> dept,<span class="built_in">max</span>(sal) keep ( dense_rank <span class="keyword">first</span> <span class="keyword">order</span> <span class="keyword">by</span> age) <span class="keyword">from</span> keep <span class="keyword">group</span> <span class="keyword">by</span> dept;</span><br><span class="line"><span class="keyword">select</span> dept,<span class="built_in">max</span>(sal) keep ( dense_rank <span class="keyword">last</span> <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span>) <span class="keyword">from</span> keep <span class="keyword">group</span> <span class="keyword">by</span> dept;</span><br><span class="line"><span class="comment">-- 获取部门内年龄最小的人中，工资最低的记录</span></span><br><span class="line"><span class="keyword">select</span> dept,<span class="built_in">min</span>(sal) keep ( dense_rank <span class="keyword">first</span> <span class="keyword">order</span> <span class="keyword">by</span> age) <span class="keyword">from</span> keep <span class="keyword">group</span> <span class="keyword">by</span> dept;</span><br><span class="line"><span class="comment">-- 年龄最大人中的最低工资查询</span></span><br><span class="line"><span class="keyword">select</span> dept,<span class="built_in">min</span>(sal) keep ( dense_rank <span class="keyword">first</span> <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span> ) <span class="keyword">from</span> keep <span class="keyword">group</span> <span class="keyword">by</span> dept;</span><br><span class="line"><span class="keyword">select</span> dept,<span class="built_in">min</span>(sal) keep ( dense_rank <span class="keyword">last</span> <span class="keyword">order</span> <span class="keyword">by</span> age ) <span class="keyword">from</span> keep <span class="keyword">group</span> <span class="keyword">by</span> dept;</span><br></pre></td></tr></table></figure>

<p>KEEP<br>keep的意思就是“保持”，会保持满足括号内条件的记录，用ORDER BY 后自然会有FIRST和LAST了。</p>
<p>DENSE_RANK<br>DENSE_RANK是排序策略。例如，它会将两个第二名排在第一名之后，之后还是第三名排在第二名之后。</p>
<p>FIRST/LAST<br>FIRST/LAST就是对数据进行筛选</p>
<p>listagg() within group(order by )</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">       deptno <span class="operator">||</span><span class="string">&#x27;    &#x27;</span><span class="operator">||</span> <span class="built_in">listagg</span>(ename,<span class="string">&#x27;,&#x27;</span>) listagg1,</span><br><span class="line">       deptno <span class="operator">||</span><span class="string">&#x27;    &#x27;</span><span class="operator">||</span> <span class="built_in">listagg</span>(ename,<span class="string">&#x27;,&#x27;</span>) <span class="keyword">within</span> <span class="keyword">group</span> ( <span class="keyword">order</span> <span class="keyword">by</span> deptno,ENAME <span class="keyword">desc</span> ) listagg2</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> deptno;</span><br></pre></td></tr></table></figure>

<p><img data-src="9.png"></p>
<h4 id="listagg"><a href="#listagg" class="headerlink" title="listagg()"></a>listagg()</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	T .DEPTNO,</span><br><span class="line">	<span class="built_in">listagg</span> (T .ENAME, <span class="string">&#x27;,&#x27;</span>) <span class="keyword">WITHIN</span> <span class="keyword">GROUP</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> T .ENAME) names</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	SCOTT.EMP T</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">	T .DEPTNO <span class="operator">=</span> <span class="string">&#x27;20&#x27;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">	T .DEPTNO</span><br></pre></td></tr></table></figure>

<h3 id="5-7-树状结构层级查询"><a href="#5-7-树状结构层级查询" class="headerlink" title="5.7 树状结构层级查询"></a>5.7 树状结构层级查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [LEVEL],<span class="operator">*</span></span><br><span class="line">　　FEOM table_name </span><br><span class="line">　　<span class="keyword">START</span> <span class="keyword">WITH</span> 条件<span class="number">1</span></span><br><span class="line">　　<span class="keyword">CONNECT</span> <span class="keyword">BY</span> PRIOR 条件<span class="number">2</span></span><br><span class="line">　　<span class="keyword">WHERE</span> 条件<span class="number">3</span></span><br><span class="line">　　<span class="keyword">ORDER</span>　<span class="keyword">BY</span>　排序字段</span><br><span class="line">说明：LEVEL<span class="comment">---伪列，用于表示树的层次</span></span><br><span class="line">　　　条件<span class="number">1</span><span class="comment">---根节点的限定条件，当然也可以放宽权限，以获得多个根节点，也就是获取多个树</span></span><br><span class="line">　　　条件<span class="number">2</span><span class="comment">---连接条件，目的就是给出父子之间的关系是什么，根据这个关系进行递归查询</span></span><br><span class="line">　　　条件<span class="number">3</span><span class="comment">---过滤条件，对所有返回的记录进行过滤。</span></span><br><span class="line">　　　排序字段<span class="comment">---对所有返回记录进行排序</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> t.dept_id,t.dept_name,t.dept_code,t.par_dept_id,level</span><br><span class="line"><span class="keyword">from</span> sys_dept t</span><br><span class="line"><span class="keyword">start</span> <span class="keyword">with</span> t.dept_id<span class="operator">=</span><span class="string">&#x27;40288ac45a3c1e8b015a3c28b4ae01d6&#x27;</span></span><br><span class="line"><span class="keyword">connect</span> <span class="keyword">by</span> prior t.dept_id<span class="operator">=</span>t.par_dept_id</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> level,t.dept_code;</span><br></pre></td></tr></table></figure>





<h3 id="Rollup"><a href="#Rollup" class="headerlink" title="Rollup"></a>Rollup</h3><p>ROLLUP，是GROUP BY子句的一种扩展，可以为每个分组返回小计记录以及为所有分组返回总计记录。</p>
<h3 id="Cube"><a href="#Cube" class="headerlink" title="Cube"></a>Cube</h3><p>CUBE，也是GROUP BY子句的一种扩展，可以返回每一个列组合的小计记录，同时在末尾加上总计记录。</p>
<h2 id="6-Oracle-常用系统包"><a href="#6-Oracle-常用系统包" class="headerlink" title="6. Oracle 常用系统包"></a>6. Oracle 常用系统包</h2><blockquote>
<p>Oracle常用系统包 <a href="https://www.cnblogs.com/champaign/p/9468354.html">https://www.cnblogs.com/champaign/p/9468354.html</a></p>
</blockquote>
<h2 id="7-常用操作"><a href="#7-常用操作" class="headerlink" title="7. 常用操作"></a>7. 常用操作</h2><h3 id="7-1-拼接列"><a href="#7-1-拼接列" class="headerlink" title="7.1 拼接列"></a>7.1 拼接列</h3><p>可以用字符串连接符“||”将各列拼接起来</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ENAME <span class="operator">||</span> <span class="string">&#x27;工作是&#x27;</span> <span class="operator">||</span> job MSG <span class="keyword">from</span> EMP <span class="keyword">where</span> DEPTNO <span class="operator">=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<h3 id="7-2-限制返回的行数"><a href="#7-2-限制返回的行数" class="headerlink" title="7.2 限制返回的行数"></a>7.2 限制返回的行数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> rownum sn, t.<span class="operator">*</span> <span class="keyword">from</span> emp t <span class="keyword">where</span> rownum <span class="operator">&lt;=</span> <span class="number">2</span>)</span><br><span class="line"><span class="keyword">where</span> sn <span class="operator">&lt;=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<h3 id="7-3-随机返回n条记录"><a href="#7-3-随机返回n条记录" class="headerlink" title="7.3 随机返回n条记录"></a>7.3 随机返回n条记录</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> EMPNO, ENAME <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> dbms_random.value())</span><br><span class="line"><span class="keyword">where</span> rownum <span class="operator">&lt;=</span> <span class="number">3</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>ORDER BY 1 表示以select 的字段按第一个字段排序</li>
</ul>
<h3 id="7-4-排序"><a href="#7-4-排序" class="headerlink" title="7.4 排序"></a>7.4 排序</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">ordery <span class="keyword">by</span> <span class="number">1</span>; <span class="comment">-- 按照第一列排序</span></span><br><span class="line">nulls <span class="keyword">first</span> <span class="comment">-- 空值在前</span></span><br><span class="line">nulls <span class="keyword">last</span> <span class="comment">-- 空值在后</span></span><br></pre></td></tr></table></figure>

<h3 id="7-5-in、exists"><a href="#7-5-in、exists" class="headerlink" title="7.5 in、exists"></a>7.5 in、exists</h3><p>如果子查询得出的结果集记录较少，主查询中的表较大且又有索引时应该用in, 反之如果外层的主查询记录较少，子查询中的表大，又有索引时使用exists</p>
<h4 id="7-6-行行比较"><a href="#7-6-行行比较" class="headerlink" title="7.6 行行比较"></a>7.6 行行比较</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> EMPNO,ENAME,JOB,DEPTNO <span class="keyword">from</span> EMP <span class="keyword">where</span> (ename, JOB, SAL) <span class="keyword">in</span> (<span class="keyword">select</span> ENAME,JOB, SAL <span class="keyword">from</span> emp2);</span><br></pre></td></tr></table></figure>

<h3 id="7-7-插入、更新与删除"><a href="#7-7-插入、更新与删除" class="headerlink" title="7.7 插入、更新与删除"></a>7.7 插入、更新与删除</h3><p>复制表的定义与数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 复制表结构及数据</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test <span class="keyword">as</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp;</span><br><span class="line"><span class="comment">-- 复制表结构</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test <span class="keyword">as</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p><font color='red'>复制的表不包含索引、默认值等约束信息</font></p>
<h3 id="7-8-WITH-CHECK-OPTION"><a href="#7-8-WITH-CHECK-OPTION" class="headerlink" title="7.8 WITH  CHECK  OPTION"></a>7.8 WITH  CHECK  OPTION</h3><p>限制数据录入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">add</span> <span class="keyword">constraint</span> ch_sal <span class="keyword">check</span> ( sal <span class="operator">&gt;</span> <span class="number">0</span>  );</span><br><span class="line"><span class="comment">-- 有些复杂条件不能使用</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">add</span> <span class="keyword">constraint</span> ch_hiredate <span class="keyword">check</span> ( hiredate <span class="operator">&gt;</span> sysdate );</span><br><span class="line"><span class="comment">-- ORA-02436: 日期或系统变量在 CHECK 约束条件中指定错误</span></span><br></pre></td></tr></table></figure>

<h3 id="7-9-多表插入"><a href="#7-9-多表插入" class="headerlink" title="7.9 多表插入"></a>7.9 多表插入</h3><h4 id="INSERT-ALL"><a href="#INSERT-ALL" class="headerlink" title="INSERT ALL"></a>INSERT ALL</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 无条件</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">into</span> emp1(empno, ename, job) <span class="keyword">values</span> (empno, ename, job)</span><br><span class="line">    <span class="keyword">into</span> emp2(empno, ename, deptno) <span class="keyword">values</span> (empno, ename, deptno)</span><br><span class="line">    <span class="keyword">select</span> empno, ename, job, deptno <span class="keyword">from</span> emp <span class="keyword">where</span> deptno <span class="keyword">in</span> (<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"><span class="comment">-- 有条件</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">when</span> job <span class="keyword">in</span> (<span class="string">&#x27;job1&#x27;</span>, <span class="string">&#x27;job2&#x27;</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">into</span> emp1(empno, ename, job) <span class="keyword">values</span> (empno, ename ,job)</span><br><span class="line">    <span class="keyword">when</span> deptno <span class="keyword">in</span> (<span class="number">10</span>, <span class="number">20</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">into</span> emp2(empno, ename, deptno) <span class="keyword">values</span> (empno, ename, deptno)</span><br><span class="line">    <span class="keyword">select</span> empno, ename, job, deptno <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure>

<h4 id="INSERT-FIRST"><a href="#INSERT-FIRST" class="headerlink" title="INSERT FIRST"></a>INSERT FIRST</h4><p>当第一个表符合条件后，第二个表将不再插入对应的行</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">first</span></span><br><span class="line">    <span class="keyword">when</span> job <span class="keyword">in</span> (<span class="string">&#x27;job1&#x27;</span>, <span class="string">&#x27;job2&#x27;</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">into</span> emp1(empno, ename, job) <span class="keyword">values</span> (empno, ename ,job)</span><br><span class="line">    <span class="keyword">when</span> deptno <span class="keyword">in</span> (<span class="number">10</span>, <span class="number">20</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">into</span> emp2(empno, ename, deptno) <span class="keyword">values</span> (empno, ename, deptno)</span><br><span class="line">    <span class="keyword">select</span> empno, ename, job, deptno <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure>

<h3 id="7-10-MERGE-INTO"><a href="#7-10-MERGE-INTO" class="headerlink" title="7.10 MERGE INTO"></a>7.10 MERGE INTO</h3><h2 id="8-执行计划"><a href="#8-执行计划" class="headerlink" title="8. 执行计划"></a>8. 执行计划</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">在执行的<span class="keyword">sql</span>前加explain plan <span class="keyword">for</span></span><br><span class="line">#查看：</span><br><span class="line"><span class="keyword">select</span> plan_table_output <span class="keyword">from</span> <span class="keyword">table</span>(DBMS_XPLAN.DISPLAY(<span class="string">&#x27;PLAN_TABLE&#x27;</span>));</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span>(dbms_xplan.display);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>docker</title>
    <url>/post/2/</url>
    <content><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/docker/0.png"></p>
<p><strong>Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。</strong>它是目前最流行的 Linux 容器解决方案。</p>
<p>Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。</p>
<p>总体来说，Docker 的接口相当简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。</p>
<span id="more"></span>

<h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、yum 包更新到最新</span> </span><br><span class="line">yum update</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</span> </span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、 设置yum源</span></span><br><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"><span class="meta">#</span><span class="bash"> 4、 安装docker，出现输入的界面都按 y</span> </span><br><span class="line">yum install -y docker-ce</span><br><span class="line"><span class="meta">#</span><span class="bash"> 5、 查看docker版本，验证是否验证成功</span></span><br><span class="line">docker -v</span><br></pre></td></tr></table></figure>

<h2 id="卸载Docker"><a href="#卸载Docker" class="headerlink" title="卸载Docker"></a>卸载Docker</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line">rm -rf /var/lib/docker#docker默认工作路径</span><br></pre></td></tr></table></figure>

<p>阿里云配置Docker镜像加速</p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/docker/1.png"></p>
<h2 id="Docker基本组成"><a href="#Docker基本组成" class="headerlink" title="Docker基本组成"></a>Docker基本组成</h2><p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/docker/2.png"></p>
<p><strong>镜像(image):</strong></p>
<p>docker镜像好比一个模板,可以通过这个模板来创建容器服务,tomcat镜像===&gt;run ==&gt;tomcat01容器(提供服务器)</p>
<p>通过这个镜像可以创建多个容器(最终服务运行或者项目运行就是在容器中的)</p>
<p><strong>容器(container):</strong></p>
<p>Docker利用容器技术,独立运行一个或者一个组应用,通过镜像来创建的</p>
<p>启动,停止,删除,基本命令!</p>
<p><strong>仓库(repository):</strong></p>
<p>仓库就是存放镜像的地方!</p>
<p>仓库分为共有仓库和私有仓库</p>
<p>Docker Hub(默认是国外的)</p>
<p>阿里云… 都有容器服务器(配置镜像加速)</p>
<h2 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h2><h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">docker版本</span> </span><br><span class="line">docker version </span><br><span class="line"><span class="meta">#</span><span class="bash">显示docker的系统信息,包括镜像和容器的数量</span></span><br><span class="line">docker info </span><br><span class="line"><span class="meta">#</span><span class="bash">查看某个具体的命令</span></span><br><span class="line">docker [命令] --help  </span><br></pre></td></tr></table></figure>

<h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看下载的所有镜像</span></span><br><span class="line">docker docker </span><br><span class="line"><span class="meta">#</span><span class="bash">搜索镜像</span></span><br><span class="line">docker search</span><br><span class="line"><span class="meta">#</span><span class="bash">下载镜像</span></span><br><span class="line">docker pull </span><br><span class="line"><span class="meta">#</span><span class="bash">删除镜像</span></span><br><span class="line">docker rmi </span><br></pre></td></tr></table></figure>

<h3 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h3><p>说明 : 有了镜像才可以创建容器</p>
<h4 id="容器常用命令"><a href="#容器常用命令" class="headerlink" title="容器常用命令"></a>容器常用命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull #下载镜像 docker image pull</span><br><span class="line"></span><br><span class="line">docker rmi #删除镜像 docker image rm</span><br><span class="line"></span><br><span class="line">docker docker</span><br><span class="line"></span><br><span class="line">docker docker -a  #列出所有镜像详细信息</span><br><span class="line">docker docker -aq #列出所有镜像的id</span><br><span class="line">docker search mysql #查询网上的mysql的镜像 </span><br><span class="line"><span class="meta">#</span><span class="bash">  --filter=STARS=3000 <span class="comment">#过滤，搜索出来的镜像收藏STARS数量大于3000的</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">等价于</span></span><br><span class="line">docker pull tomcat:8</span><br><span class="line">docker pull docker.io/library/tomcat:8</span><br><span class="line"></span><br><span class="line">docker rmi -f 镜像id #删除指定id的镜像</span><br><span class="line">docker rmi -f $(docker docker -aq) #删除全部的镜像</span><br><span class="line">docker stop $(docker ps -a -q) #停止所有的容器</span><br><span class="line">docker pull centos        #docker中下载centos</span><br><span class="line">docker run 镜像id         #新建容器并启动</span><br><span class="line">docker container list -a  # 查看所有的容器</span><br><span class="line">docker ps -a              # 查看所有的容器</span><br><span class="line">docker rm 容器id          #删除指定容器</span><br><span class="line">docker start 容器id	      #启动容器</span><br><span class="line">docker restart 容器id     #重启容器</span><br><span class="line">docker stop 容器id	      #停止当前正在运行的容器</span><br><span class="line">docker kill 容器id	      #强制停止当前容器</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run [可选参数] image | docker container run [可选参数] image </span><br><span class="line"><span class="meta">#</span><span class="bash">参书说明</span></span><br><span class="line">--name=&quot;Name&quot;		#容器名字 tomcat01 tomcat02 用来区分容器</span><br><span class="line">-d					#后台方式运行</span><br><span class="line">-it 				#使用交互方式运行，进入容器查看内容</span><br><span class="line">-p					#指定容器的端口 -p 8080(宿主机):8080(容器)</span><br><span class="line">		-p ip:主机端口:容器端口</span><br><span class="line">		-p 主机端口:容器端口(常用)</span><br><span class="line">		-p 容器端口</span><br><span class="line">		容器端口</span><br><span class="line">-P(大写) 				随机指定端口</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it centos /bin/bash # 测试、启动并进入容器</span><br><span class="line"></span><br><span class="line">exit #从容器退回主机</span><br><span class="line"></span><br><span class="line">docker ps 命令  		#列出当前正在运行的容器 还没退出的（exit）</span><br><span class="line">  -a, --all     	 #列出当前正在运行的容器 + 带出历史运行过的容器</span><br><span class="line">  -n=?, --last int   #列出最近创建的?个容器 ?为1则只列出最近创建的一个容器,为2则列出2个</span><br><span class="line">  -q, --quiet        #只列出容器的编号</span><br></pre></td></tr></table></figure>

<h4 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit 		#容器直接退出</span><br><span class="line">ctrl +P +Q  #容器不停止退出 	---注意：这个很有用的操作</span><br></pre></td></tr></table></figure>

<h4 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm 容器id   				#删除指定的容器，不能删除正在运行的容器，如果要强制删除 rm -rf</span><br><span class="line">docker rm -f $(docker ps -aq)  	 #删除所有的容器</span><br><span class="line">docker ps -a -q|xargs docker rm  #删除所有的容器</span><br></pre></td></tr></table></figure>

<h4 id="后台启动命令"><a href="#后台启动命令" class="headerlink" title="后台启动命令"></a>后台启动命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d centos #这都是看不到信息的</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 问题docker ps. 发现centos 停止了</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 常见的坑，docker容器使用后台运行，就必须要有要一个前台进程，docker发现没有应用，就会自动停止</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> nginx，容器启动后，发现自己没有提供服务，就会立刻停止，就是没有程序了</span></span><br></pre></td></tr></table></figure>

<h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker logs --help</span><br><span class="line">Options:</span><br><span class="line">      --details        Show extra details provided to logs </span><br><span class="line">*  -f, --follow         Follow log output</span><br><span class="line">      --since string   Show logs since timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes)</span><br><span class="line">*      --tail string    Number of lines to show from the end of the logs (default &quot;all&quot;)</span><br><span class="line">*  -t, --timestamps     Show timestamps</span><br><span class="line">      --until string   Show logs before a timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes)</span><br><span class="line">➜  ~ docker run -d centos /bin/sh -c &quot;while true;do echo 6666;sleep 1;done&quot; #模拟日志      </span><br><span class="line"><span class="meta">#</span><span class="bash">显示日志</span></span><br><span class="line">-tf		#显示日志信息（一直更新）</span><br><span class="line">--tail number #需要显示日志条数</span><br><span class="line">docker logs -t --tail n 容器id #查看n行日志</span><br><span class="line">docker logs -ft 容器id #跟着日志</span><br></pre></td></tr></table></figure>

<h4 id="查看容器进程信息"><a href="#查看容器进程信息" class="headerlink" title="查看容器进程信息"></a>查看容器进程信息</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看容器中进程信息ps</span></span><br><span class="line">docker top 容器id</span><br></pre></td></tr></table></figure>

<h4 id="查看镜像的元数据"><a href="#查看镜像的元数据" class="headerlink" title="查看镜像的元数据"></a>查看镜像的元数据</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker inspect 容器id</span><br><span class="line">docker inspect 镜像id</span><br></pre></td></tr></table></figure>

<h4 id="进入当前正在运行的容器"><a href="#进入当前正在运行的容器" class="headerlink" title="进入当前正在运行的容器"></a>进入当前正在运行的容器</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 方式一</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入当前正在运行的容器</span></span><br><span class="line">docker exec -it 容器id bashshell</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 方式二</span></span><br><span class="line">docker attach 容器id</span><br><span class="line"><span class="meta">#</span><span class="bash">测试</span></span><br><span class="line">docker attach 55321bcae33d </span><br><span class="line">正在执行当前的代码...</span><br><span class="line">区别</span><br><span class="line"><span class="meta">#</span><span class="bash">docker <span class="built_in">exec</span> <span class="comment">#进入当前容器后开启一个新的终端，可以在里面操作。（常用）</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">docker attach <span class="comment"># 进入容器正在执行的终端</span></span></span><br></pre></td></tr></table></figure>

<h4 id="从容器内拷贝内容到主机上"><a href="#从容器内拷贝内容到主机上" class="headerlink" title="从容器内拷贝内容到主机上"></a>从容器内拷贝内容到主机上</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">先进入到容器中</span></span><br><span class="line">docker exec -it 56a5583b25b4 /bin/bash</span><br><span class="line"><span class="meta">#</span><span class="bash">再创建一个新文件</span></span><br><span class="line">echo &quot;hello&quot; &gt; hello.java # &quot;hello&quot;是内容 hello.java是文件名（souce命令用不了）</span><br><span class="line"><span class="meta">#</span><span class="bash">测试文件是否存在了</span></span><br><span class="line">cat hello.java </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">将容器中的文件拷贝到主机上</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker cp 容器名:容器内文件 主机上的路径</span></span><br><span class="line">docker cp 9035020356a4:/java.java /home</span><br></pre></td></tr></table></figure>

<h4 id="命令大全"><a href="#命令大全" class="headerlink" title="命令大全"></a>命令大全</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">attach      Attach local standard input, output, and error streams to a running container</span><br><span class="line"><span class="meta">#</span><span class="bash">当前shell下 attach连接指定运行的镜像</span></span><br><span class="line">build       Build an image from a Dockerfile # 通过Dockerfile定制镜像</span><br><span class="line">commit      Create a new image from a container&#x27;s changes #提交当前容器为新的镜像</span><br><span class="line">cp          Copy files/folders between a container and the local filesystem #拷贝文件</span><br><span class="line">create      Create a new container #创建一个新的容器</span><br><span class="line">diff        Inspect changes to files or directories on a container&#x27;s filesystem #查看docker容器的变化</span><br><span class="line">events      Get real time events from the server # 从服务获取容器实时时间</span><br><span class="line">exec        Run a command in a running container # 在运行中的容器上运行命令</span><br><span class="line">export      Export a container&#x27;s filesystem as a tar archive #导出容器文件系统作为一个tar归档文件[对应import]</span><br><span class="line">history     Show the history of an image # 展示一个镜像形成历史</span><br><span class="line">docker      List docker #列出系统当前的镜像</span><br><span class="line">import      Import the contents from a tarball to create a filesystem image #从tar包中导入内容创建一个文件系统镜像</span><br><span class="line">info        Display system-wide information # 显示全系统信息</span><br><span class="line">inspect     Return low-level information on Docker objects #查看容器详细信息</span><br><span class="line">kill        Kill one or more running containers # kill指定docker容器</span><br><span class="line">load        Load an image from a tar archive or STDIN #从一个tar包或标准输入中加载一个镜像[对应save]</span><br><span class="line">login       Log in to a Docker registry #</span><br><span class="line">logout      Log out from a Docker registry</span><br><span class="line">logs        Fetch the logs of a container</span><br><span class="line">pause       Pause all processes within one or more containers</span><br><span class="line">port        List port mappings or a specific mapping for the container</span><br><span class="line">ps          List containers</span><br><span class="line">pull        Pull an image or a repository from a registry</span><br><span class="line">push        Push an image or a repository to a registry</span><br><span class="line">rename      Rename a container</span><br><span class="line">restart     Restart one or more containers</span><br><span class="line">rm          Remove one or more containers</span><br><span class="line">rmi         Remove one or more docker</span><br><span class="line">run         Run a command in a new container</span><br><span class="line">save        Save one or more docker to a tar archive (streamed to STDOUT by default)</span><br><span class="line">search      Search the Docker Hub for docker</span><br><span class="line">start       Start one or more stopped containers</span><br><span class="line">stats       Display a live stream of container(s) resource usage statistics</span><br><span class="line">stop        Stop one or more running containers</span><br><span class="line">tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE</span><br><span class="line">top         Display the running processes of a container</span><br><span class="line">unpause     Unpause all processes within one or more containers</span><br><span class="line">update      Update configuration of one or more containers</span><br><span class="line">version     Show the Docker version information</span><br><span class="line">wait        Block until one or more containers stop, then print their exit codes</span><br></pre></td></tr></table></figure>

<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/docker/8.png"></p>
<h2 id="Docker镜像讲解"><a href="#Docker镜像讲解" class="headerlink" title="Docker镜像讲解"></a>Docker镜像讲解</h2><h3 id="镜像是什么"><a href="#镜像是什么" class="headerlink" title="镜像是什么"></a><strong>镜像是什么</strong></h3><p>镜像是一种轻量级、可执行的独立软件保，用来打包软件运行环境和基于运行环境开发的软件，他包含运行某个软件所需的所有内容，包括代码、运行时库、环境变量和配置文件</p>
<h2 id="Docker镜像加载原理"><a href="#Docker镜像加载原理" class="headerlink" title="Docker镜像加载原理"></a><strong>Docker镜像加载原理</strong></h2><h3 id="UnionFs-（联合文件系统）"><a href="#UnionFs-（联合文件系统）" class="headerlink" title="UnionFs （联合文件系统）"></a>UnionFs （联合文件系统）</h3><p>UnionFs（联合文件系统）：Union文件系统（UnionFs）是一种分层、轻量级并且高性能的文件系统，他支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下（ unite several directories into a single virtual filesystem)。Union文件系统是 Docker镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像<br>特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录</p>
<h3 id="Docker镜像加载原理-1"><a href="#Docker镜像加载原理-1" class="headerlink" title="Docker镜像加载原理"></a>Docker镜像加载原理</h3><p>docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS。<br>boots(boot file system）主要包含 bootloader和 Kernel, bootloader主要是引导加 kernel, Linux刚启动时会加bootfs文件系统，在 Docker镜像的最底层是 boots。这一层与我们典型的Linux/Unix系统是一样的，包含boot加載器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由 bootfs转交给内核，此时系统也会卸载bootfs。<br>rootfs（root file system),在 bootfs之上。包含的就是典型 Linux系统中的/dev,/proc,/bin,/etc等标准目录和文件。 rootfs就是各种不同的操作系统发行版，比如 Ubuntu, Centos等等。<br><img data-src="https://gitee.com/codeyunzhou/images/raw/master/docker/3.png"></p>
<h3 id="分层的镜像"><a href="#分层的镜像" class="headerlink" title="分层的镜像"></a>分层的镜像</h3><p>我们可以去下载一个镜像，注意观察下载的日志输出，可以看到是一层层的在下载</p>
<p>最大的好处，我觉得莫过于资源共享了！比如有多个镜像都从相同的Base镜像构建而来，那么宿主机只需在磁盘上保留一份base镜像，同时内存中也只需要加载一份base镜像，这样就可以为所有的容器服务了，而且镜像的每一层都可以被共享。</p>
<p>查看镜像分层的方式可以通过<code>docker image inspect</code> 命令</p>
<h2 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h2><h3 id="什么是容器数据卷"><a href="#什么是容器数据卷" class="headerlink" title="什么是容器数据卷"></a>什么是容器数据卷</h3><p>当我们在使用docker容器的时候，会产生一系列的数据文件，这些数据文件在我们关闭docker容器时是会消失的，但是其中产生的部分内容我们是希望能够把它给保存起来另作用途的，Docker将应用与运行环境打包成容器发布，我们希望在运行过程钟产生的部分数据是可以持久化的的，而且容器之间我们希望能够实现数据共享。</p>
<p>通俗地来说，docker容器数据卷可以看成使我们生活中常用的u盘，它存在于一个或多个的容器中，由docker挂载到容器，但不属于联合文件系统，Docker不会在容器删除时删除其挂载的数据卷。</p>
<h3 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h3><p>添加数据卷的方式有两种</p>
<ul>
<li>第一种是直接通过命令行挂载，<code>-v, --volume list                    Bind mount a volume</code></li>
<li>第二种是通过dockerFile添加</li>
</ul>
<blockquote>
<p>通过命令挂载</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it -v  /宿主机绝对路径目录:  /容器内目录  -p 主机端口:容器内端口</span><br><span class="line">docker run -it -v /home/ceshi:/home centos /bin/bash</span><br><span class="line"><span class="meta">#</span><span class="bash">通过 docker inspect 容器id 查看</span></span><br></pre></td></tr></table></figure>

<h3 id="具名和匿名挂载"><a href="#具名和匿名挂载" class="headerlink" title="具名和匿名挂载"></a>具名和匿名挂载</h3><h4 id="1-匿名挂载"><a href="#1-匿名挂载" class="headerlink" title="1. 匿名挂载"></a>1. 匿名挂载</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker run -d -P --name nginx01 -v /etc/nginx nginx</span></span><br><span class="line"> </span><br><span class="line">//端口映射-p(小写)、-P(大写)区别</span><br><span class="line">-p指定要映射的端口，一个指定端口上只可以绑定一个容器</span><br><span class="line">-P将容器内部开放的网络端口随机映射到宿主机的一个端口上</span><br></pre></td></tr></table></figure>

<p>查看所有volume情况，-v 只写了容器内的路径，没有写容器的路径</p>
<img data-src="4.png" style="zoom: 80%;" />

<h4 id="2-具名挂载"><a href="#2-具名挂载" class="headerlink" title="2. 具名挂载"></a>2. 具名挂载</h4><p>具名挂载：就是挂载的卷定义一个自己的名字，可以方便的查找</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker run -d -P --name nginx02 -v Bertram:/etc/nginx nginx</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker volume ls</span></span><br><span class="line">DRIVER              VOLUME NAME</span><br><span class="line">.....</span><br><span class="line">local               Bertram</span><br></pre></td></tr></table></figure>

<p>查看卷所对应的路径</p>
<img data-src="5.png" style="zoom: 80%;" />

<p>所有的docker容器内的卷，没有指定目录的情况下都是在 <strong>/data/volumes</strong>目录下</p>
<h4 id="3-设置权限"><a href="#3-设置权限" class="headerlink" title="3.  设置权限"></a>3.  设置权限</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 通过 -v 容器内路径，ro rw改变读写权限</span></span><br><span class="line">ro readonly  #只读</span><br><span class="line">rw readwrite #可读可写</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 一旦这个设置了容器权限，容器对我们挂载出来的内容就有了限定</span></span><br><span class="line">docker run -d -P --name nginx02 -v Bertram:/etc/nginx:ro nginx</span><br><span class="line">docker run -d -P --name nginx02 -v Bertram:/etc/nginx:rw nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"> 只要看到ro就说明这个路径只能通过宿主机来操作，容器内无法操作。</span></span><br></pre></td></tr></table></figure>



<h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>Dockerfile 就是用来构建docker镜像的构建文件！命令脚本</p>
<h3 id="构建步骤："><a href="#构建步骤：" class="headerlink" title="构建步骤："></a>构建步骤：</h3><ul>
<li><p>编写一个dockerfile文件</p>
</li>
<li><p>docker build 构建称为一个镜像</p>
</li>
<li><p>docker run运行镜像</p>
</li>
<li><p>docker push发布镜像（DockerHub 、阿里云仓库)</p>
</li>
</ul>
<h3 id="DockerFile构建过程"><a href="#DockerFile构建过程" class="headerlink" title="DockerFile构建过程"></a>DockerFile构建过程</h3><p><strong>基础知识：</strong></p>
<p>1、每个保留关键字(指令）都是必须是大写字母</p>
<p>2、执行从上到下顺序</p>
<p>3、#表示注释</p>
<p>4、每一个指令都会创建提交一个新的镜像层，并提交！</p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/docker/6.png"></p>
<h3 id="DockerFile的指令"><a href="#DockerFile的指令" class="headerlink" title="DockerFile的指令"></a>DockerFile的指令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM				# 基础镜像，一切从这里开始构建</span><br><span class="line">MAINTAINER			# 镜像是谁写的， 姓名+邮箱</span><br><span class="line">RUN					# 镜像构建的时候需要运行的命令</span><br><span class="line">ADD					# 步骤，tomcat镜像，这个tomcat压缩包！添加内容 添加同目录</span><br><span class="line">WORKDIR				# 镜像的工作目录</span><br><span class="line">VOLUME				# 挂载的目录</span><br><span class="line">EXPOSE				# 保留端口配置</span><br><span class="line">CMD					# 指定这个容器启动的时候要运行的命令，只有最后一个会生效，可被替代。</span><br><span class="line">ENTRYPOINT			# 指定这个容器启动的时候要运行的命令，可以追加命令</span><br><span class="line">ONBUILD				# 当构建一个被继承 DockerFile 这个时候就会运行ONBUILD的指令，触发指令。</span><br><span class="line">COPY				# 类似ADD，将我们文件拷贝到镜像中</span><br><span class="line">ENV					# 构建的时候设置环境变量！</span><br></pre></td></tr></table></figure>

<h4 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h4><blockquote>
<p>创建一个自己的centos</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.编写Dockerfile文件</span></span><br><span class="line">vim mydockerfile-centos</span><br><span class="line">FROM centos</span><br><span class="line">MAINTAINER qyz&lt;15086314018@163.com&gt;</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">CMD echo $MYPATH</span><br><span class="line">CMD echo &quot;-----end----&quot;</span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 2、通过这个文件构建镜像</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令 docker build -f 文件路径 -t 镜像名:[tag] .</span></span><br><span class="line">docker build -f mydockerfile-centos -t mycentos:0.1 .</span><br></pre></td></tr></table></figure>

<p><strong>测试运行</strong></p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/docker/7.png"></p>
<h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><table>
<thead>
<tr>
<th>关键字</th>
<th>作用</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>FROM</td>
<td>指定父镜像</td>
<td>指定dockerfile基于那个image构建</td>
</tr>
<tr>
<td>MAINTAINER</td>
<td>作者信息</td>
<td>用来标明这个dockerfile谁写的</td>
</tr>
<tr>
<td>LABEL</td>
<td>标签</td>
<td>用来标明dockerfile的标签 可以使用Label代替Maintainer 最终都是在docker image基本信息中可以查看</td>
</tr>
<tr>
<td>RUN</td>
<td>执行命令</td>
<td>执行一段命令 默认是/bin/sh 格式: RUN command 或者 RUN [“command” , “param1”,”param2”]</td>
</tr>
<tr>
<td>CMD</td>
<td>容器启动命令</td>
<td>提供启动容器时候的默认命令 和ENTRYPOINT配合使用.格式 CMD command param1 param2 或者 CMD [“command” , “param1”,”param2”]</td>
</tr>
<tr>
<td>ENTRYPOINT</td>
<td>入口</td>
<td>一般在制作一些执行就关闭的容器中会使用</td>
</tr>
<tr>
<td>COPY</td>
<td>复制文件</td>
<td>build的时候复制文件到image中</td>
</tr>
<tr>
<td>ADD</td>
<td>添加文件</td>
<td>build的时候添加文件到image中 不仅仅局限于当前build上下文 可以来源于远程服务</td>
</tr>
<tr>
<td>ENV</td>
<td>环境变量</td>
<td>指定build时候的环境变量 可以在启动的容器的时候 通过-e覆盖 格式ENV name=value</td>
</tr>
<tr>
<td>ARG</td>
<td>构建参数</td>
<td>构建参数 只在构建的时候使用的参数 如果有ENV 那么ENV的相同名字的值始终覆盖arg的参数</td>
</tr>
<tr>
<td>VOLUME</td>
<td>定义外部可以挂载的数据卷</td>
<td>指定build的image那些目录可以启动的时候挂载到文件系统中 启动容器的时候使用 -v 绑定 格式 VOLUME [“目录”]</td>
</tr>
<tr>
<td>EXPOSE</td>
<td>暴露端口</td>
<td>定义容器运行的时候监听的端口 启动容器的使用-p来绑定暴露端口 格式: EXPOSE 8080 或者 EXPOSE 8080/udp</td>
</tr>
<tr>
<td>WORKDIR</td>
<td>工作目录</td>
<td>指定容器内部的工作目录 如果没有创建则自动创建 如果指定/ 使用的是绝对地址 如果不是/开头那么是在上一条workdir的路径的相对路径</td>
</tr>
<tr>
<td>USER</td>
<td>指定执行用户</td>
<td>指定build或者启动的时候 用户 在RUN CMD ENTRYPONT执行的时候的用户</td>
</tr>
<tr>
<td>HEALTHCHECK</td>
<td>健康检查</td>
<td>指定监测当前容器的健康监测的命令 基本上没用 因为很多时候 应用本身有健康监测机制</td>
</tr>
<tr>
<td>ONBUILD</td>
<td>触发器</td>
<td>当存在ONBUILD关键字的镜像作为基础镜像的时候 当执行FROM完成之后 会执行 ONBUILD的命令 但是不影响当前镜像 用处也不怎么大</td>
</tr>
<tr>
<td>STOPSIGNAL</td>
<td>发送信号量到宿主机</td>
<td>该STOPSIGNAL指令设置将发送到容器的系统调用信号以退出。</td>
</tr>
<tr>
<td>SHELL</td>
<td>指定执行脚本的shell</td>
<td>指定RUN CMD ENTRYPOINT 执行命令的时候 使用的shell</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>容器</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>linux常用命令</title>
    <url>/post/1/</url>
    <content><![CDATA[<h2 id="关机-重启-注销"><a href="#关机-重启-注销" class="headerlink" title="关机/重启/注销"></a>关机/重启/注销</h2><table>
<thead>
<tr>
<th>常用命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>shutdown-h now</td>
<td>即刻关机</td>
</tr>
<tr>
<td>shutdown-h 10</td>
<td>10分钟后关机</td>
</tr>
<tr>
<td>shutdown-h 11: 00</td>
<td>11:00关机</td>
</tr>
<tr>
<td>shutdown-h +10</td>
<td>预定时间关机(10分钟后)</td>
</tr>
<tr>
<td>shutdown-c</td>
<td>取消指定时间关机</td>
</tr>
<tr>
<td>shutdown-r now</td>
<td>重启</td>
</tr>
<tr>
<td>shutdown-r 10</td>
<td>10分钟之后重启</td>
</tr>
<tr>
<td>shutdown-r 11-00</td>
<td>定时重启</td>
</tr>
<tr>
<td>reboot</td>
<td>重启</td>
</tr>
<tr>
<td>init 6</td>
<td>重启</td>
</tr>
<tr>
<td>init 0</td>
<td>立刻关机</td>
</tr>
<tr>
<td>telinit 0</td>
<td>关机</td>
</tr>
<tr>
<td>poweroff</td>
<td>⽴刻关机</td>
</tr>
<tr>
<td>halt</td>
<td>关机</td>
</tr>
<tr>
<td>sync</td>
<td>buff数据同步到磁盘</td>
</tr>
<tr>
<td>logout</td>
<td>退出登录Shell</td>
</tr>
</tbody></table>
<span id="more"></span>

<h2 id="系统信息和性能查看"><a href="#系统信息和性能查看" class="headerlink" title="系统信息和性能查看"></a>系统信息和性能查看</h2><table>
<thead>
<tr>
<th>常用命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>uname -a</td>
<td>查看内核/OS/CPU信息</td>
</tr>
<tr>
<td>uname -r</td>
<td>查看内核版本</td>
</tr>
<tr>
<td>uname -m</td>
<td>查看处理器架构</td>
</tr>
<tr>
<td>arch</td>
<td>查看处理器架构</td>
</tr>
<tr>
<td>hostname</td>
<td>查看计算机名</td>
</tr>
<tr>
<td>who</td>
<td>显示当前登录系统的⽤户</td>
</tr>
<tr>
<td>who am i</td>
<td>显示登录时的⽤户名</td>
</tr>
<tr>
<td>whoami</td>
<td>显示当前⽤户名</td>
</tr>
<tr>
<td>cat /proc/version</td>
<td>查看linux版本信息</td>
</tr>
<tr>
<td>cat /proc/cpuinfo</td>
<td>查看CPU信息</td>
</tr>
<tr>
<td>cat /proc/interrupts</td>
<td>查看中断</td>
</tr>
<tr>
<td>cat /proc/loadavg</td>
<td>查看系统负载</td>
</tr>
<tr>
<td>uptime</td>
<td>查看系统运⾏时间、⽤户数、负载</td>
</tr>
<tr>
<td>env</td>
<td>查看系统的环境变量</td>
</tr>
<tr>
<td>lsusb -tv</td>
<td>查看系统USB设备信息</td>
</tr>
<tr>
<td>lspci -tv</td>
<td>查看系统PCI设备信息</td>
</tr>
<tr>
<td>lsmod</td>
<td>查看已加载的系统模块</td>
</tr>
<tr>
<td>grep MemTotal /proc/meminfo</td>
<td>查看内存总量</td>
</tr>
<tr>
<td>grep MemFree /proc/meminfo</td>
<td>查看空闲内存量</td>
</tr>
<tr>
<td>free -m</td>
<td>查看内存⽤量和交换区⽤量</td>
</tr>
<tr>
<td>date</td>
<td>显示系统⽇期时间</td>
</tr>
<tr>
<td>cal 2021</td>
<td>显示2021⽇历表</td>
</tr>
<tr>
<td>top</td>
<td>动态显示cpu/内存/进程等情况</td>
</tr>
<tr>
<td>vmstat 1 20</td>
<td>每1秒采⼀次系统状态，采20次</td>
</tr>
<tr>
<td>iostat</td>
<td>查看io读写/cpu使⽤情况</td>
</tr>
<tr>
<td>sar -u 1 10</td>
<td>查询cpu使⽤情况（1秒⼀次，共10次）</td>
</tr>
<tr>
<td>sar -d 1 10</td>
<td>查询磁盘性能</td>
</tr>
</tbody></table>
<h2 id="磁盘和分区"><a href="#磁盘和分区" class="headerlink" title="磁盘和分区"></a>磁盘和分区</h2><table>
<thead>
<tr>
<th>常用命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>fdisk -l</td>
<td>查看所有磁盘分区</td>
</tr>
<tr>
<td>swapon -s</td>
<td>查看所有交换分区</td>
</tr>
<tr>
<td>df -h</td>
<td>查看磁盘使⽤情况及挂载点</td>
</tr>
<tr>
<td>df -hl</td>
<td>同上</td>
</tr>
<tr>
<td>du -sh /dir</td>
<td>查看指定某个⽬录的⼤⼩</td>
</tr>
<tr>
<td>du -sk * |sort -rn</td>
<td>从⾼到低依次显示⽂件和⽬录⼤⼩</td>
</tr>
<tr>
<td>mount /dev/hda2 /mnt/hda2</td>
<td>挂载hda2盘</td>
</tr>
<tr>
<td>mount -t ntfs /dev/sdc1 /mnt/usbhd1</td>
<td>指定⽂件系统类型挂载（如ntfs）</td>
</tr>
<tr>
<td>mount -o loop xxx.iso /mnt/cdrom</td>
<td>挂载iso⽂件</td>
</tr>
<tr>
<td>mount /dev/sda1 /mnt/usbdisk</td>
<td>挂载usb盘/闪存设备</td>
</tr>
<tr>
<td>umount -v /dev/sda1</td>
<td>通过设备名卸载</td>
</tr>
<tr>
<td>umount -v /mnt/mymnt</td>
<td>通过挂载点卸载</td>
</tr>
<tr>
<td>fuser -km /mnt/hda1</td>
<td>强制卸载(慎⽤)</td>
</tr>
</tbody></table>
<h2 id="⽤户和⽤户组"><a href="#⽤户和⽤户组" class="headerlink" title="⽤户和⽤户组"></a>⽤户和⽤户组</h2><table>
<thead>
<tr>
<th>常用命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>useradd codesheep</td>
<td>创建⽤户</td>
</tr>
<tr>
<td>userdel -r codesheep</td>
<td>删除⽤户</td>
</tr>
<tr>
<td>usermod -g group_name user_name</td>
<td>修改⽤户的组</td>
</tr>
<tr>
<td>usermod -aG group_name user_name</td>
<td>将⽤户添加到组</td>
</tr>
<tr>
<td>usermod -s /bin/ksh -d /home/codepig –g dev “用户名”</td>
<td>修改⽤户codesheep的登录Shell、主⽬录以及⽤户组</td>
</tr>
<tr>
<td>groups test</td>
<td>查看test⽤户所在的组</td>
</tr>
<tr>
<td>groupadd group_name</td>
<td>创建⽤户组</td>
</tr>
<tr>
<td>groupdel group_name</td>
<td>删除⽤户组</td>
</tr>
<tr>
<td>groupmod -n new_name old_name</td>
<td>重命名⽤户组</td>
</tr>
<tr>
<td>su - user_name</td>
<td>完整切换到⼀个⽤户环境</td>
</tr>
<tr>
<td>passwd</td>
<td>修改⼝令</td>
</tr>
<tr>
<td>passwd codesheep</td>
<td>修改某⽤户的⼝令</td>
</tr>
<tr>
<td>w</td>
<td>查看活动⽤户</td>
</tr>
<tr>
<td>id codesheep</td>
<td>查看指定⽤户codesheep信息</td>
</tr>
<tr>
<td>last</td>
<td>查看⽤户登录⽇志</td>
</tr>
<tr>
<td>crontab -l</td>
<td>查看当前⽤户的计划任务</td>
</tr>
<tr>
<td>cut -d: -f1 /etc/passwd</td>
<td>查看系统所有⽤户</td>
</tr>
<tr>
<td>cut -d: -f1 /etc/group</td>
<td>查看系统所有组</td>
</tr>
</tbody></table>
<h2 id="⽹络和进程管理"><a href="#⽹络和进程管理" class="headerlink" title="⽹络和进程管理"></a>⽹络和进程管理</h2><table>
<thead>
<tr>
<th>常用命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>ifconfig</td>
<td>查看⽹络接⼝属性</td>
</tr>
<tr>
<td>ifconfig eth0</td>
<td>查看某⽹卡的配置</td>
</tr>
<tr>
<td>route -n</td>
<td>查看路由表</td>
</tr>
<tr>
<td>netstat -lntp</td>
<td>查看所有监听端⼝</td>
</tr>
<tr>
<td>netstat -antp</td>
<td>查看已经建⽴的TCP连接</td>
</tr>
<tr>
<td>netstat -lutp</td>
<td>查看TCP/UDP的状态信息</td>
</tr>
<tr>
<td>ifup eth0</td>
<td>启⽤eth0⽹络设备</td>
</tr>
<tr>
<td>ifdown eth0</td>
<td>禁⽤eth0⽹络设备</td>
</tr>
<tr>
<td>iptables -L</td>
<td>查看iptables规则</td>
</tr>
<tr>
<td>ifconfig eth0 192.168.1.1 netmask 255.255.255.0</td>
<td>配置ip地址</td>
</tr>
<tr>
<td>dhclient eth0</td>
<td>以dhcp模式启⽤eth0</td>
</tr>
<tr>
<td>route add -net 0/0 gw Gateway_IP</td>
<td>配置默认⽹关</td>
</tr>
<tr>
<td>route add -net 192.168.0.0 netmask 255.255.0.0 gw 192.168.1.1</td>
<td>配置静态路由到达⽹络’192.168.0.0/16’</td>
</tr>
<tr>
<td>route del 0/0 gw Gateway_IP</td>
<td>删除静态路由</td>
</tr>
<tr>
<td>hostname</td>
<td>查看主机名</td>
</tr>
<tr>
<td>host <a href="http://www.qiyunzhou.top/">www.qiyunzhou.top</a></td>
<td>解析主机名</td>
</tr>
<tr>
<td>nslookup <a href="http://www.qiyunzhou.top/">www.qiyunzhou.top</a></td>
<td>查询DNS记录，查看域名解 析是否正常</td>
</tr>
<tr>
<td>ps -ef</td>
<td>查看所有进程</td>
</tr>
<tr>
<td>ps -ef |grep 进程名</td>
<td>过滤出你需要的进程</td>
</tr>
<tr>
<td>kill -s name kill</td>
<td>指定名称的进程</td>
</tr>
<tr>
<td>kill -s pid kill</td>
<td>指定pid的进程</td>
</tr>
<tr>
<td>top</td>
<td>实时显示进程状态</td>
</tr>
<tr>
<td>vmstat 1 20</td>
<td>每1秒采⼀次系统状态，采20次</td>
</tr>
<tr>
<td>iostat</td>
<td>查看io读写/cpu使⽤情况</td>
</tr>
<tr>
<td>sar -u 1 10</td>
<td>查询cpu使⽤情况（1秒⼀ 次，共10次）</td>
</tr>
<tr>
<td>sar -d 1 10</td>
<td>查询磁盘性能</td>
</tr>
</tbody></table>
<h2 id="常⻅系统服务命令"><a href="#常⻅系统服务命令" class="headerlink" title="常⻅系统服务命令"></a>常⻅系统服务命令</h2><table>
<thead>
<tr>
<th>常用命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>chkconfig –list</td>
<td>列出系统服务</td>
</tr>
<tr>
<td>service &lt;服务名&gt; status</td>
<td>查看某个服务</td>
</tr>
<tr>
<td>service &lt;服务名&gt; start</td>
<td>启动某个服务</td>
</tr>
<tr>
<td>service &lt;服务名&gt; stop</td>
<td>终⽌某个服务</td>
</tr>
<tr>
<td>service &lt;服务名&gt; restart</td>
<td>重启某个服务</td>
</tr>
<tr>
<td>systemctl status &lt;服务名&gt;</td>
<td>查看某个服务</td>
</tr>
<tr>
<td>systemctl start &lt;服务名&gt;</td>
<td>启动某个服务</td>
</tr>
<tr>
<td>systemctl stop &lt;服务名&gt;</td>
<td>终⽌某个服务</td>
</tr>
<tr>
<td>systemctl restart &lt;服务名&gt;</td>
<td>重启某个服务</td>
</tr>
<tr>
<td>systemctl enable &lt;服务名&gt;</td>
<td>开启⾃启动</td>
</tr>
<tr>
<td>systemctl disable &lt;服务名&gt;</td>
<td>关闭⾃启动</td>
</tr>
</tbody></table>
<h2 id="⽂件和⽬录操作"><a href="#⽂件和⽬录操作" class="headerlink" title="⽂件和⽬录操作"></a>⽂件和⽬录操作</h2><table>
<thead>
<tr>
<th>常用命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>cd &lt;⽬录名&gt;</td>
<td>进⼊某个⽬录</td>
</tr>
<tr>
<td>cd ..</td>
<td>回上级⽬录</td>
</tr>
<tr>
<td>cd ../..</td>
<td>回上两级⽬录</td>
</tr>
<tr>
<td>cd</td>
<td>进个⼈主⽬录</td>
</tr>
<tr>
<td>cd -</td>
<td>回上⼀步所在⽬录</td>
</tr>
<tr>
<td>pwd</td>
<td>显示当前路径</td>
</tr>
<tr>
<td>ls</td>
<td>查看⽂件⽬录列表</td>
</tr>
<tr>
<td>ls -F</td>
<td>查看⽬录中内容（显示是⽂件还是⽬录）</td>
</tr>
<tr>
<td>ls -l</td>
<td>查看⽂件和⽬录的详情列表</td>
</tr>
<tr>
<td>ls -a</td>
<td>查看隐藏⽂件</td>
</tr>
<tr>
<td>ls -lh</td>
<td>查看⽂件和⽬录的详情列表（增强⽂件⼤⼩易读性）</td>
</tr>
<tr>
<td>ls -lSr</td>
<td>查看⽂件和⽬录列表（以⽂件⼤⼩升序查看）</td>
</tr>
<tr>
<td>tree</td>
<td>查看⽂件和⽬录的树形结构</td>
</tr>
<tr>
<td>mkdir &lt;⽬录名&gt;</td>
<td>创建⽬录</td>
</tr>
<tr>
<td>mkdir dir1 dir2</td>
<td>同时创建两个⽬录</td>
</tr>
<tr>
<td>mkdir -p /tmp/dir1/dir2</td>
<td>创建⽬录树</td>
</tr>
<tr>
<td>rm -f file1</td>
<td>删除’file1’⽂件</td>
</tr>
<tr>
<td>rmdir dir1</td>
<td>删除’dir1’⽬录</td>
</tr>
<tr>
<td>rm -rf dir1</td>
<td>删除’dir1’⽬录和其内容</td>
</tr>
<tr>
<td>rm -rf dir1 dir2</td>
<td>同时删除两个⽬录及其内容</td>
</tr>
<tr>
<td>mv old_dir new_dir</td>
<td>重命名/移动⽬录</td>
</tr>
<tr>
<td>cp file1 file2</td>
<td>复制⽂件</td>
</tr>
<tr>
<td>cp dir/* .</td>
<td>复制某⽬录下的所有⽂件⾄当前⽬录</td>
</tr>
<tr>
<td>cp -a dir1 dir2</td>
<td>复制⽬录</td>
</tr>
<tr>
<td>cp -a /tmp/dir1 .</td>
<td>复制⼀个⽬录⾄当前⽬录</td>
</tr>
<tr>
<td>ln -s file1 link1</td>
<td>创建指向⽂件/⽬录的软链接</td>
</tr>
<tr>
<td>ln file1 lnk1</td>
<td>创建指向⽂件/⽬录的物理链接</td>
</tr>
<tr>
<td>find / -name file1</td>
<td>从跟⽬录开始搜索⽂件/⽬录</td>
</tr>
<tr>
<td>find / -user user1</td>
<td>搜索⽤户user1的⽂件/⽬录</td>
</tr>
<tr>
<td>find /dir -name *.bin</td>
<td>在⽬录/dir中搜带有.bin后缀的⽂件</td>
</tr>
<tr>
<td>locate &lt;关键词&gt;</td>
<td>快速定位⽂件</td>
</tr>
<tr>
<td>locate *.mp4</td>
<td>寻找.mp4结尾的⽂件</td>
</tr>
<tr>
<td>whereis &lt; 关键词&gt;</td>
<td>显示某⼆进制⽂件/可执⾏⽂件的路径</td>
</tr>
<tr>
<td>which &lt;关键词&gt;</td>
<td>查找系统⽬录下某的⼆进制⽂件</td>
</tr>
<tr>
<td>chmod ugo+rwx dir1</td>
<td>设置⽬录所有者(u)、群组(g)及其他⼈(o)的读（r）写 (w)执⾏(x)权限</td>
</tr>
<tr>
<td>chmod go-rwx dir1</td>
<td>移除群组(g)与其他⼈(o)对⽬录的读写执⾏权限</td>
</tr>
<tr>
<td>chown user1 file1</td>
<td>改变⽂件的所有者属性</td>
</tr>
<tr>
<td>chown -R user1 dir1</td>
<td>改变⽬录的所有者属性</td>
</tr>
<tr>
<td>chgrp group1 file1</td>
<td>改变⽂件群组</td>
</tr>
<tr>
<td>chown user1:group1 file1</td>
<td>改变⽂件的所有⼈和群组</td>
</tr>
</tbody></table>
<h2 id="⽂件查看和处理"><a href="#⽂件查看和处理" class="headerlink" title="⽂件查看和处理"></a>⽂件查看和处理</h2><table>
<thead>
<tr>
<th>常用命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>cat file1</td>
<td>查看⽂件内容</td>
</tr>
<tr>
<td>cat -n file1</td>
<td>查看内容并标示⾏数</td>
</tr>
<tr>
<td>tac file1</td>
<td>从最后⼀⾏开始反看⽂件内容</td>
</tr>
<tr>
<td>more file1</td>
<td>查看⼀个⻓⽂件的内容</td>
</tr>
<tr>
<td>less file1</td>
<td>类似more命令，但允许反向操作</td>
</tr>
<tr>
<td>head -2 file1</td>
<td>查看⽂件前两⾏</td>
</tr>
<tr>
<td>tail -2 file1</td>
<td>查看⽂件后两⾏</td>
</tr>
<tr>
<td>tail -f /log/msg</td>
<td>实时查看添加到⽂件中的内容</td>
</tr>
<tr>
<td>grep code hello.txt</td>
<td>在⽂件hello.txt中查找关键词code</td>
</tr>
<tr>
<td>grep ^sheep hello.txt</td>
<td>在⽂件hello.txt中查找以sheep开头的内容</td>
</tr>
<tr>
<td>grep [0-9] hello.txt</td>
<td>选择hello.txt⽂件中所有包含数字的⾏</td>
</tr>
<tr>
<td>sed ‘s/s1/s2/g’ hello.txt</td>
<td>将hello.txt⽂件中的s1替换成s2</td>
</tr>
<tr>
<td>sed ‘/^$/d’ hello.txt</td>
<td>从hello.txt⽂件中删除所有空⽩⾏</td>
</tr>
<tr>
<td>sed ‘/ *#/d; /^$/d’ hello.txt</td>
<td>从hello.txt⽂件中删除所有注释和空⽩⾏</td>
</tr>
<tr>
<td>sed -e ‘1d’ hello.txt</td>
<td>从⽂件hello.txt 中排除第⼀⾏</td>
</tr>
<tr>
<td>sed -n ‘/s1/p’ hello.txt</td>
<td>查看只包含关键词”s1”的⾏</td>
</tr>
<tr>
<td>sed -e ‘s/ *$//‘ hello.txt</td>
<td>删除每⼀⾏最后的空⽩字符</td>
</tr>
<tr>
<td>sed -e ‘s/s1//g’ hello.txt</td>
<td>从⽂档中只删除词汇s1并保留剩余全部</td>
</tr>
<tr>
<td>sed -n ‘1,5p;5q’ hello.txt</td>
<td>查看从第⼀⾏到第5⾏内容</td>
</tr>
<tr>
<td>sed -n ‘5p;5q’ hello.txt</td>
<td>查看第5⾏</td>
</tr>
<tr>
<td>paste file1 file2</td>
<td>合并两个⽂件或两栏的内容</td>
</tr>
<tr>
<td>paste -d ‘+’ file1 file2</td>
<td>合并两个⽂件或两栏的内容，中间⽤”+”区分</td>
</tr>
<tr>
<td>sort file1 file2</td>
<td>排序两个⽂件的内容</td>
</tr>
<tr>
<td>comm -1 file1 file2</td>
<td>⽐ 较两个⽂件的内容(去除’file1’所含内容)</td>
</tr>
<tr>
<td>comm -2 file1 file2</td>
<td>⽐较两个⽂件的内容(去除’file2’所含内容)</td>
</tr>
<tr>
<td>comm -3 file1 file2</td>
<td>⽐ 较两个⽂件的内容(去除两⽂件共有部分)</td>
</tr>
</tbody></table>
<h2 id="打包和解压"><a href="#打包和解压" class="headerlink" title="打包和解压"></a>打包和解压</h2><table>
<thead>
<tr>
<th>常用命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>zip xxx.zip file</td>
<td>压缩⾄zip包</td>
</tr>
<tr>
<td>zip -r xxx.zip file1 file2 dir1</td>
<td>将多个⽂件+⽬录压成zip包</td>
</tr>
<tr>
<td>unzip xxx.zip</td>
<td>解压zip包</td>
</tr>
<tr>
<td>tar -cvf xxx.tar file</td>
<td>创建⾮压缩tar包</td>
</tr>
<tr>
<td>tar -cvf xxx.tar file1 file2 dir1</td>
<td>将多个⽂件+⽬录打tar包</td>
</tr>
<tr>
<td>tar -tf xxx.tar</td>
<td>查看tar包的内容</td>
</tr>
<tr>
<td>tar -xvf xxx.tar</td>
<td>解压tar包</td>
</tr>
<tr>
<td>tar -xvf xxx.tar -C /dir</td>
<td>将tar包解压⾄指定⽬录</td>
</tr>
<tr>
<td>tar -cvfj xxx.tar.bz2 dir</td>
<td>创建bz2压缩包</td>
</tr>
<tr>
<td>tar -jxvf xxx.tar.bz2</td>
<td>解压bz2压缩包</td>
</tr>
<tr>
<td>tar -cvfz xxx.tar.gz dir</td>
<td>创建gzip压缩包</td>
</tr>
<tr>
<td>tar -zxvf xxx.tar.gz</td>
<td>解压gzip压缩包</td>
</tr>
<tr>
<td>bunzip2 xxx.bz2</td>
<td>解压bz2压缩包</td>
</tr>
<tr>
<td>bzip2 filename</td>
<td>压缩⽂件</td>
</tr>
<tr>
<td>gunzip xxx.gz</td>
<td>解压gzip压缩包</td>
</tr>
<tr>
<td>gzip filename</td>
<td>压缩⽂件</td>
</tr>
<tr>
<td>gzip -9 filename</td>
<td>最⼤程度压缩</td>
</tr>
</tbody></table>
<h2 id="RPM包管理命令"><a href="#RPM包管理命令" class="headerlink" title="RPM包管理命令"></a>RPM包管理命令</h2><table>
<thead>
<tr>
<th>常用命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>rpm -qa</td>
<td>查看已安装的rpm包</td>
</tr>
<tr>
<td>rpm -q pkg_name</td>
<td>查询某个rpm包</td>
</tr>
<tr>
<td>rpm -q –whatprovides xxx</td>
<td>显示xxx功能是由哪个包提供的</td>
</tr>
<tr>
<td>rpm -q –whatrequires xxx</td>
<td>显示xxx功能被哪个程序包依赖的</td>
</tr>
<tr>
<td>rpm -q –changelog xxx</td>
<td>显示xxx包的更改记录</td>
</tr>
<tr>
<td>rpm -qi pkg_name</td>
<td>查看⼀个包的详细信息</td>
</tr>
<tr>
<td>rpm -qd pkg_name</td>
<td>查询⼀个包所提供的⽂档</td>
</tr>
<tr>
<td>rpm -qc pkg_name</td>
<td>查看已安装rpm包提供的配置⽂件</td>
</tr>
<tr>
<td>rpm -ql pkg_name</td>
<td>查看⼀个包安装了哪些⽂件</td>
</tr>
<tr>
<td>rpm -qf filename</td>
<td>查看某个⽂件属于哪个包</td>
</tr>
<tr>
<td>rpm -qR pkg_name</td>
<td>查询包的依赖关系</td>
</tr>
<tr>
<td>rpm -ivh xxx.rpm</td>
<td>安装rpm包</td>
</tr>
<tr>
<td>rpm -ivh –test xxx.rpm</td>
<td>测试安装rpm包</td>
</tr>
<tr>
<td>rpm -ivh –nodeps xxx.rpm</td>
<td>安装rpm包时忽略依赖关系</td>
</tr>
<tr>
<td>rpm -e xxx</td>
<td>卸载程序包</td>
</tr>
<tr>
<td>rpm -Fvh pkg_name</td>
<td>升级确定已安装的rpm包</td>
</tr>
<tr>
<td>rpm -Uvh pkg_name</td>
<td>升级rpm包(若未安装则会安装)</td>
</tr>
<tr>
<td>rpm -V pkg_name RPM</td>
<td>包详细信息校验</td>
</tr>
</tbody></table>
<h2 id="YUM包管理命令"><a href="#YUM包管理命令" class="headerlink" title="YUM包管理命令"></a>YUM包管理命令</h2><table>
<thead>
<tr>
<th>常用命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>yum repolist enabled</td>
<td>显示可⽤的源仓库</td>
</tr>
<tr>
<td>yum search pkg_name</td>
<td>搜索软件包</td>
</tr>
<tr>
<td>yum install pkg_name</td>
<td>下载并安装软件包</td>
</tr>
<tr>
<td>yum install –downloadonly pkg_name</td>
<td>只下载不安装</td>
</tr>
<tr>
<td>yum list</td>
<td>显示所有程序包</td>
</tr>
<tr>
<td>yum list installed</td>
<td>查看当前系统已安装包</td>
</tr>
<tr>
<td>yum list updates</td>
<td>查看可以更新的包列表</td>
</tr>
<tr>
<td>yum check-update</td>
<td>查看可升级的软件包</td>
</tr>
<tr>
<td>yum update</td>
<td>更新所有软件包</td>
</tr>
<tr>
<td>yum update pkg_name</td>
<td>升级指定软件包</td>
</tr>
<tr>
<td>yum deplist pkg_name</td>
<td>列出软件包依赖关系</td>
</tr>
<tr>
<td>yum remove pkg_name</td>
<td>删除软件包</td>
</tr>
<tr>
<td>yum clean all</td>
<td>清除缓存</td>
</tr>
<tr>
<td>yum clean packages</td>
<td>清除缓存的软件包</td>
</tr>
<tr>
<td>yum clean headers</td>
<td>清除缓存的header</td>
</tr>
</tbody></table>
<h2 id="DPKG包管理命令"><a href="#DPKG包管理命令" class="headerlink" title="DPKG包管理命令"></a>DPKG包管理命令</h2><table>
<thead>
<tr>
<th>常用命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>dpkg -c xxx.deb</td>
<td>列出deb包的内容</td>
</tr>
<tr>
<td>dpkg -i xxx.deb</td>
<td>安装/更新deb包</td>
</tr>
<tr>
<td>dpkg -r pkg_name</td>
<td>移除deb包</td>
</tr>
<tr>
<td>dpkg -P pkg_name</td>
<td>移除deb包(不保留配置)</td>
</tr>
<tr>
<td>dpkg -l</td>
<td>查看系统中已安装deb包</td>
</tr>
<tr>
<td>dpkg -l pkg_name</td>
<td>显示包的⼤致信息</td>
</tr>
<tr>
<td>dpkg -L pkg_name</td>
<td>查看deb包安装的⽂件</td>
</tr>
<tr>
<td>dpkg -s pkg_name</td>
<td>查看包的详细信息</td>
</tr>
<tr>
<td>dpkg –unpack xxx.deb</td>
<td>解开deb包的内容</td>
</tr>
</tbody></table>
<h2 id="APT软件⼯具"><a href="#APT软件⼯具" class="headerlink" title="APT软件⼯具"></a>APT软件⼯具</h2><table>
<thead>
<tr>
<th>常用命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>apt-cache search pkg_name</td>
<td>搜索程序包</td>
</tr>
<tr>
<td>apt-cache show pkg_name</td>
<td>获取包的概览信息</td>
</tr>
<tr>
<td>apt-get install pkg_name</td>
<td>安装/升级软件包</td>
</tr>
<tr>
<td>apt-get purge pkg_name</td>
<td>卸载软件（包括配置）</td>
</tr>
<tr>
<td>apt-get remove pkg_name</td>
<td>卸载软件（不包括配置）</td>
</tr>
<tr>
<td>apt-get update</td>
<td>更新包索引信息</td>
</tr>
<tr>
<td>apt-get upgrade</td>
<td>更新已安装软件包</td>
</tr>
<tr>
<td>apt-get clean</td>
<td>清理缓存</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>css</title>
    <url>/post/0/</url>
    <content><![CDATA[<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="CSS规范"><a href="#CSS规范" class="headerlink" title="CSS规范"></a>CSS规范</h2><h3 id="1-CSS属性书写顺序"><a href="#1-CSS属性书写顺序" class="headerlink" title="1.CSS属性书写顺序"></a>1.CSS属性书写顺序</h3><p>建议遵循以下顺序：</p>
<ol>
<li><strong>布局定位属性</strong>：display / position / float / clear / visibility / overflow（建议 display 第一个写，毕竟关系到模式）</li>
<li><strong>自身属性</strong>：width / height / margin / padding / border / background</li>
<li><strong>文本属性</strong>：color / font / text-decoration / text-align / vertical-align / white- space / break-word</li>
<li><strong>其他属性（CSS3）</strong>：content / cursor / border-radius / box-shadow / text-shadow / background:linear-gradient …</li>
</ol>
<p><strong>举例：</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.css</span> &#123;</span><br><span class="line">   <span class="attribute">display</span>: block;</span><br><span class="line">   <span class="attribute">position</span>: relative;</span><br><span class="line">   <span class="attribute">float</span>: left;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">   <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">   <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">font-family</span>: Arial, <span class="string">&#x27;Helvetica Neue&#x27;</span>, Helvetica, sans-serif;</span><br><span class="line">   <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">   <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">5</span>);</span><br><span class="line">   <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="一-选择器"><a href="#一-选择器" class="headerlink" title="一.选择器"></a>一.选择器</h2><table>
<thead>
<tr>
<th>选择器</th>
<th>示例</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>.class</td>
<td>.intro</td>
<td>选择所有class=”intro”的元素</td>
</tr>
<tr>
<td>#*id</td>
<td>#firstname</td>
<td>选择所有id=”firstname”的元素</td>
</tr>
<tr>
<td>*</td>
<td>*</td>
<td>选择所有元素</td>
</tr>
<tr>
<td>element</td>
<td>p</td>
<td>选择所有<p>元素</td>
</tr>
<tr>
<td>element,element</td>
<td>div,p</td>
<td>选择所有<div>元素和<p>元素</td>
</tr>
<tr>
<td>element element</td>
<td>div p</td>
<td>选择<div>元素内的所有<p>元素</td>
</tr>
<tr>
<td>element&gt;element</td>
<td>div&gt;p</td>
<td>选择所有父级是 <div> 元素的 <p> 元素</td>
</tr>
<tr>
<td>element+element</td>
<td>div+p</td>
<td>选择所有紧接着<div>元素之后的<p>元素</td>
</tr>
<tr>
<td>[attribute]</td>
<td>[target]</td>
<td>选择所有带有target属性元素</td>
</tr>
<tr>
<td>[attribute=value]</td>
<td>[target=-blank]</td>
<td>选择所有使用target=”-blank”的元素</td>
</tr>
<tr>
<td>[attribute~=value]</td>
<td>[title~=flower]</td>
<td>选择标题属性包含单词”flower”的所有元素</td>
</tr>
<tr>
<td>[attribute|=language]</td>
<td>[lang|=en]</td>
<td>选择 lang 属性以 en 为开头的所有元素</td>
</tr>
<tr>
<td>:link</td>
<td>a:link</td>
<td>选择所有未访问链接</td>
</tr>
<tr>
<td>:visited</td>
<td>a:visited</td>
<td>选择所有访问过的链接</td>
</tr>
<tr>
<td>:active</td>
<td>a:active</td>
<td>选择活动链接</td>
</tr>
<tr>
<td>:hover</td>
<td>a:hover</td>
<td>选择鼠标在链接上面时</td>
</tr>
<tr>
<td>:focus</td>
<td>input:focus</td>
<td>选择具有焦点的输入元素</td>
</tr>
<tr>
<td>:first-letter</td>
<td>p:first-letter</td>
<td>选择每一个<p>元素的第一个字母</td>
</tr>
<tr>
<td>:first-line</td>
<td>p:first-line</td>
<td>选择每一个<p>元素的第一行</td>
</tr>
<tr>
<td>:first-child</td>
<td>p:first-child</td>
<td>指定只有当<p>元素是其父级的第一个子级的样式。</td>
</tr>
<tr>
<td>:before</td>
<td>p:before</td>
<td>在每个<p>元素之前插入内容</td>
</tr>
<tr>
<td>:after</td>
<td>p:after</td>
<td>在每个<p>元素之后插入内容</td>
</tr>
<tr>
<td>:lang(language)</td>
<td>p:lang(it)</td>
<td>选择一个lang属性的起始值=”it”的所有<p>元素</td>
</tr>
<tr>
<td>element1~element2</td>
<td>p~ul</td>
<td>选择p元素之后的每一个ul元素</td>
</tr>
<tr>
<td>[attribute^=value]</td>
<td>a[src^=”https”]</td>
<td>选择每一个src属性的值以”https”开头的元素</td>
</tr>
<tr>
<td>[attribute$=value]</td>
<td>a[src$=”.pdf”]</td>
<td>选择每一个src属性的值以”.pdf”结尾的元素</td>
</tr>
<tr>
<td>[attribute**=value*]</td>
<td>a[src*=”runoob”]</td>
<td>选择每一个src属性的值包含子字符串”runoob”的元素</td>
</tr>
<tr>
<td>:first-of-type</td>
<td>p:first-of-type</td>
<td>选择每个p元素是其父级的第一个p元素</td>
</tr>
<tr>
<td>:last-of-type</td>
<td>p:last-of-type</td>
<td>选择每个p元素是其父级的最后一个p元素</td>
</tr>
<tr>
<td>:only-of-type</td>
<td>p:only-of-type</td>
<td>选择每个p元素是其父级的唯一p元素</td>
</tr>
<tr>
<td>:only-child</td>
<td>p:only-child</td>
<td>选择每个p元素是其父级的唯一子元素</td>
</tr>
<tr>
<td>:nth-child(n)</td>
<td>p:nth-child(2)</td>
<td>选择每个p元素是其父级的第二个子元素</td>
</tr>
<tr>
<td>:nth-last-child(n)</td>
<td>p:nth-last-child(2)</td>
<td>选择每个p元素的是其父级的第二个子元素，从最后一个子项计数</td>
</tr>
<tr>
<td>:nth-of-type(n)</td>
<td>p:nth-of-type(2)</td>
<td>选择每个p元素是其父级的第二个p元素</td>
</tr>
<tr>
<td>:nth-last-of-type(n)</td>
<td>p:nth-last-of-type(2)</td>
<td>选择每个p元素的是其父级的第二个p元素，从最后一个子项计数</td>
</tr>
<tr>
<td>:last-child</td>
<td>p:last-child</td>
<td>选择每个p元素是其父级的最后一个子级。</td>
</tr>
<tr>
<td>:root</td>
<td>:root</td>
<td>选择文档的根元素</td>
</tr>
<tr>
<td>:empty</td>
<td>p:empty</td>
<td>选择每个没有任何子级的p元素（包括文本节点）</td>
</tr>
<tr>
<td>:target</td>
<td>#news:target</td>
<td>选择当前活动的#news元素（包含该锚名称的点击的URL）</td>
</tr>
<tr>
<td>:enabled</td>
<td>input:enabled</td>
<td>选择每一个已启用的输入元素</td>
</tr>
<tr>
<td>:disabled</td>
<td>input:disabled</td>
<td>选择每一个禁用的输入元素</td>
</tr>
<tr>
<td>:checked</td>
<td>input:checked</td>
<td>选择每个选中的输入元素</td>
</tr>
<tr>
<td>:not(selector)</td>
<td>:not(p)</td>
<td>选择每个并非p元素的元素</td>
</tr>
<tr>
<td>::selection</td>
<td>::selection</td>
<td>匹配元素中被用户选中或处于高亮状态的部分</td>
</tr>
<tr>
<td>:out-of-range</td>
<td>:out-of-range</td>
<td>匹配值在指定区间之外的input元素</td>
</tr>
<tr>
<td>:in-range</td>
<td>:in-range</td>
<td>匹配值在指定区间之内的input元素</td>
</tr>
<tr>
<td>:read-write</td>
<td>:read-write</td>
<td>用于匹配可读及可写的元素</td>
</tr>
<tr>
<td>:read-only</td>
<td>:read-only</td>
<td>用于匹配设置 “readonly”（只读） 属性的元素</td>
</tr>
<tr>
<td>:optional</td>
<td>:optional</td>
<td>用于匹配可选的输入元素</td>
</tr>
<tr>
<td>:required</td>
<td>:required</td>
<td>用于匹配设置了 “required” 属性的元素</td>
</tr>
<tr>
<td>:valid</td>
<td>:valid</td>
<td>用于匹配输入值为合法的元素</td>
</tr>
<tr>
<td>:invalid</td>
<td>:invalid</td>
<td>用于匹配输入值为非法的元素</td>
</tr>
</tbody></table>
<h2 id="三-css的显示模式"><a href="#三-css的显示模式" class="headerlink" title="三.css的显示模式"></a>三.css的显示模式</h2><h3 id="1-块元素"><a href="#1-块元素" class="headerlink" title="1.块元素"></a>1.块元素</h3><ul>
<li>比较霸道，自己独占一行。</li>
<li>高度，宽度、外边距以及内边距都可以控制。</li>
<li>宽度默认是容器（父级宽度）的100%。</li>
<li>是一个容器及盒子，里面可以放行内或者块级元素。</li>
</ul>
<h3 id="2-行内元素"><a href="#2-行内元素" class="headerlink" title="2.行内元素"></a>2.行内元素</h3><ul>
<li>相邻行内元素在一行上，一行可以显示多个。</li>
<li>高、宽直接设置是无效的。</li>
<li>默认宽度就是它本身内容的宽度。</li>
<li>行内元素只能容纳文本或其他行内元素。</li>
</ul>
<p><font color='red'>注意：</font><br>        链接里面不能再放链接<br>        特殊情况链接 <a> 里面可以放块级元素，但是给 <a> 转换一下块级模式最安全</p>
<h3 id="3-行内块元素"><a href="#3-行内块元素" class="headerlink" title="3.行内块元素"></a>3.行内块元素</h3><ul>
<li>和相邻行内元素（行内块）在一行上，但是他们之间会有空白缝隙。</li>
<li>一行可以显示多个（行内元素特点）。</li>
<li>默认宽度就是它本身内容的宽度（行内元素特点）。</li>
<li>高度，行高、外边距以及内边距都可以控制（块级元素特点）。</li>
</ul>
<h3 id="4、单行文字垂直居中的代码"><a href="#4、单行文字垂直居中的代码" class="headerlink" title="4、单行文字垂直居中的代码"></a>4、单行文字垂直居中的代码</h3><p><strong>解决方案</strong>:    </p>
<p>​        让文字的行高等于盒子的高度  就可以让文字在当前盒子内垂直居中</p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1.png" alt="1"></p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/2.png" alt="2"></p>
<h2 id="四-css的背景"><a href="#四-css的背景" class="headerlink" title="四.css的背景"></a>四.css的背景</h2><p>通过 CSS 背景属性，可以给页面元素添加背景样式。<br>背景属性可以设置背景颜色、背景图片、背景平铺、背景图片位置、背景图像固定等。</p>
<h3 id="1、背景颜色"><a href="#1、背景颜色" class="headerlink" title="1、背景颜色"></a>1、背景颜色</h3><p><strong>样式名称</strong>：</p>
<p>​        background-color 定义元素的背景颜色</p>
<p><strong>使用方式</strong>：</p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1570886137899.png" alt="1570886137899"></p>
<p><strong>其他说明</strong>：</p>
<p>​        元素背景颜色默认值是 transparent（透明）</p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1570886176292.png" alt="1570886176292"></p>
<h3 id="2、背景图片"><a href="#2、背景图片" class="headerlink" title="2、背景图片"></a>2、背景图片</h3><p><strong>样式名称</strong>：</p>
<p>​        background-image  定义元素的背景图片</p>
<p><strong>使用方式</strong>：</p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1570886322557.png" alt="1570886322557"></p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1570886362813.png" alt="1570886362813"></p>
<p><strong>其他说明</strong>：</p>
<p>​        实际开发常见于 logo 或者一些装饰性的小图片或者是超大的背景图片, 优点是非常便于控制位置. (精灵图也是一种运用场景)</p>
<p>​        注意：背景图片后面的地址，千万不要忘记加 URL， 同时里面的路径<strong>不要加引号</strong>。</p>
<h3 id="3、背景平铺"><a href="#3、背景平铺" class="headerlink" title="3、背景平铺"></a>3、背景平铺</h3><p><strong>样式名称：</strong></p>
<p>​        background-repeat 设置元素背景图像的平铺 </p>
<p><strong>使用方式：</strong></p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1570886648887.png" alt="1570886648887"></p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1570886688306.png" alt="1570886688306"></p>
<h3 id="4、背景图片位置"><a href="#4、背景图片位置" class="headerlink" title="4、背景图片位置"></a>4、背景图片位置</h3><p><strong>样式名称：</strong></p>
<p>​        background-position 属性可以改变图片在背景中的位置</p>
<p><strong>使用方式：</strong></p>
<p>​        <img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1570886973530.png" alt="1570886973530"></p>
<p>​        参数代表的意思是：x 坐标和 y 坐标。 可以使用 方位名词 或者 精确单位</p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1570887034135.png" alt="1570887034135"></p>
<p><strong>其他说明：</strong></p>
<p>1、参数是方位名词</p>
<p>​        如果指定的两个值都是方位名词，则两个值前后顺序无关，比如 left  top 和 top  left 效果一致</p>
<p>​        如果只指定了一个方位名词，另一个值省略，则第二个值默认居中对齐</p>
<p>2、参数是精确单位</p>
<p>​        如果参数值是精确坐标，那么第一个肯定是 x 坐标，第二个一定是 y 坐标</p>
<p>​        如果只指定一个数值，那该数值一定是 x 坐标，另一个默认垂直居中</p>
<p>3、参数是混合单位</p>
<p>​        如果指定的两个值是精确单位和方位名词混合使用，则第一个值是 x 坐标，第二个值是 y 坐标</p>
<h3 id="5、背景图片固定"><a href="#5、背景图片固定" class="headerlink" title="5、背景图片固定"></a>5、背景图片固定</h3><p><strong>样式名称：</strong></p>
<p>​        background-attachment 属性设置背景图像是否固定或者随着页面的其余部分滚动。</p>
<p><strong>使用方式：</strong></p>
<p>​        <img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1570887652404.png" alt="1570887652404"></p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1570887699177.png" alt="1570887699177"></p>
<p><strong>其他说明：</strong></p>
<p>​        background-attachment 后期可以制作视差滚动的效果。</p>
<h3 id="6、背景样式合写"><a href="#6、背景样式合写" class="headerlink" title="6、背景样式合写"></a>6、背景样式合写</h3><p><strong>背景合写样式：</strong></p>
<p>​        background: 背景颜色 背景图片地址 背景平铺 背景图像滚动 背景图片位置;</p>
<p><strong>使用方式：</strong></p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1570887809455.png" alt="1570887809455"></p>
<h3 id="7、背景色半透明"><a href="#7、背景色半透明" class="headerlink" title="7、背景色半透明"></a>7、背景色半透明</h3><p>CSS3 提供了背景颜色半透明的效果。 </p>
<p><strong>使用方式：</strong></p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1570887978061.png" alt="1570887978061"></p>
<ul>
<li>最后一个参数是 alpha 透明度，取值范围在 0~1之间</li>
<li>我们习惯把 0.3 的 0 省略掉，写为 background: rgba(0, 0, 0, .3);</li>
</ul>
<p><strong>注意</strong>：</p>
<ul>
<li>背景半透明是指盒子背景半透明，盒子里面的内容不受影响</li>
<li>CSS3 新增属性，是 IE9+ 版本浏览器才支持的，但是现在实际开发,我们不太关注兼容性写法了,可以放心使用</li>
</ul>
<h3 id="8、背景总结"><a href="#8、背景总结" class="headerlink" title="8、背景总结"></a>8、背景总结</h3><p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/3.png" alt="3"></p>
<h3 id="9-背景渐变色"><a href="#9-背景渐变色" class="headerlink" title="9.背景渐变色"></a>9.背景渐变色</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 背景渐变必须添加浏览器私有前缀 */</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(起始方向, 颜色<span class="number">1</span>,颜色<span class="number">2</span>);</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(left, red, blue);</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(left top, red, blue);</span><br></pre></td></tr></table></figure>

<p>背景渐变必须添加浏览器私有前缀</p>
<p>起始方向可以是：方位名词或者度数，如果省略就是top</p>
<h2 id="五-CSS三大特性"><a href="#五-CSS三大特性" class="headerlink" title="五.CSS三大特性"></a>五.CSS三大特性</h2><h3 id="1、层叠性"><a href="#1、层叠性" class="headerlink" title="1、层叠性"></a>1、层叠性</h3><p>​        相同选择器给设置相同的样式，此时一个样式就会覆盖（层叠）另一个冲突的样式。层叠性主要解决样式冲突的问题</p>
<p>​        层叠性原则:</p>
<ul>
<li>样式冲突，遵循的原则是就近原则，哪个样式离结构近，就执行哪个样式</li>
<li>样式不冲突，不会层叠</li>
</ul>
<h3 id="2、继承性"><a href="#2、继承性" class="headerlink" title="2、继承性"></a>2、继承性</h3><p>​        CSS中的继承: 子标签会继承父标签的某些样式，如文本颜色和字号。</p>
<p>​        子元素可以继承父元素的样式：</p>
<p>​    （text-，font-，line-这些元素开头的可以继承，以及color属性）</p>
<p>行高的继承性：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>:<span class="number">12px</span>/<span class="number">1.5</span> Microsoft YaHei；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>行高可以跟单位也可以不跟单位</li>
<li>如果子元素没有设置行高，则会继承父元素的行高为 1.5</li>
<li>此时子元素的行高是：当前子元素的文字大小 * 1.5</li>
<li>body 行高 1.5  这样写法最大的优势就是里面子元素可以根据自己文字大小自动调整行高</li>
</ul>
<h3 id="3、优先级"><a href="#3、优先级" class="headerlink" title="3、优先级"></a>3、优先级</h3><p>当同一个元素指定多个选择器，就会有优先级的产生。</p>
<ul>
<li>选择器相同，则执行层叠性</li>
<li>选择器不同，则根据选择器权重执行</li>
</ul>
<p>选择器优先级计算表格：</p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1571490129794.png" alt="1571490129794"></p>
<p>优先级注意点:</p>
<ol>
<li><p>权重是有4组数字组成,但是不会有进位。</p>
</li>
<li><p>可以理解为类选择器永远大于元素选择器, id选择器永远大于类选择器,以此类推..</p>
</li>
<li><p>等级判断从左向右，如果某一位数值相同，则判断下一位数值。</p>
</li>
<li><p>可以简单记忆法:  通配符和继承权重为0, 标签选择器为1,类(伪类)选择器为 10, id选择器 100, 行内样式表为 1000, !important 无穷大.</p>
</li>
<li><p>继承的权重是0， 如果该元素没有直接选中，不管父元素权重多高，子元素得到的权重都是 0。</p>
</li>
</ol>
<p>权重叠加：如果是复合选择器，则会有权重叠加，需要计算权重。</p>
<ul>
<li>div ul  li   ——&gt;      0,0,0,3</li>
<li>.nav ul li   ——&gt;      0,0,1,2</li>
<li>a:hover      —–&gt;   0,0,1,1</li>
<li>.nav a       ——&gt;      0,0,1,1</li>
</ul>
<h2 id="六-盒子模型"><a href="#六-盒子模型" class="headerlink" title="六.盒子模型"></a>六.盒子模型</h2><h3 id="1、网页布局的本质"><a href="#1、网页布局的本质" class="headerlink" title="1、网页布局的本质"></a>1、网页布局的本质</h3><p>网页布局的核心本质： 就是利用 CSS 摆盒子。</p>
<p>网页布局过程：</p>
<ol>
<li>先准备好相关的网页元素，网页元素基本都是盒子 Box 。</li>
<li>利用 CSS 设置好盒子样式，然后摆放到相应位置。</li>
<li>往盒子里面装内容</li>
</ol>
<h3 id="2、盒子模型（Box-Model）组成"><a href="#2、盒子模型（Box-Model）组成" class="headerlink" title="2、盒子模型（Box Model）组成"></a>2、盒子模型（Box Model）组成</h3><p>盒子模型：把 HTML 页面中的布局元素看作是一个矩形的盒子，也就是一个盛装内容的容器。</p>
<p>CSS 盒子模型本质上是一个盒子，封装周围的 HTML 元素，它包括：<strong>边框</strong>、<strong>外边距</strong>、<strong>内边距</strong>、和 <strong>实际内容</strong></p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1571492536942.png" alt="1571492536942"></p>
<h3 id="3、边框（border）"><a href="#3、边框（border）" class="headerlink" title="3、边框（border）"></a>3、边框（border）</h3><h4 id="3-1、边框的使用"><a href="#3-1、边框的使用" class="headerlink" title="3.1、边框的使用"></a>3.1、边框的使用</h4><p>1、border可以设置元素的边框。边框有三部分组成：边框宽度(粗细) 边框样式  边框颜色；</p>
<p>2、语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border</span> : border-width || border-style || border-color;   </span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1571492659260.png" alt="1571492659260"></p>
<p>边框样式 border-style 可以设置如下值：</p>
<ul>
<li>none：没有边框即忽略所有边框的宽度（默认值）</li>
<li>solid：边框为单实线(最为常用的)</li>
<li>dashed：边框为虚线  </li>
<li>dotted：边框为点线</li>
</ul>
<p>3、边框的合写分写</p>
<p>边框简写：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid red;  </span><br></pre></td></tr></table></figure>

<p>边框分开写法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-top</span>: <span class="number">1px</span> solid red;  <span class="comment">/* 只设定上边框， 其余同理 */</span>   </span><br></pre></td></tr></table></figure>

<h4 id="3-2、表格的细线边框"><a href="#3-2、表格的细线边框" class="headerlink" title="3.2、表格的细线边框"></a>3.2、表格的细线边框</h4><p>1、border-collapse 属性控制浏览器绘制表格边框的方式。它控制相邻单元格的边框。</p>
<p>2、语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-collapse</span>:collapse; </span><br></pre></td></tr></table></figure>

<p>collapse 单词是合并的意思</p>
<p>border-collapse: collapse; 表示相邻边框合并在一起</p>
<h4 id="3-3、边框会影响盒子实际大小"><a href="#3-3、边框会影响盒子实际大小" class="headerlink" title="3.3、边框会影响盒子实际大小"></a>3.3、边框会影响盒子实际大小</h4><p>边框会额外增加盒子的实际大小。因此我们有两种方案解决：</p>
<ul>
<li>测量盒子大小的时候,不量边框。</li>
<li>如果测量的时候包含了边框,则需要 width/height 减去边框宽度</li>
</ul>
<h3 id="4、内边距（padding）"><a href="#4、内边距（padding）" class="headerlink" title="4、内边距（padding）"></a>4、内边距（padding）</h3><h4 id="4-1、内边距的使用方式"><a href="#4-1、内边距的使用方式" class="headerlink" title="4.1、内边距的使用方式"></a>4.1、内边距的使用方式</h4><p>1、padding 属性用于设置内边距，即边框与内容之间的距离。</p>
<p>2、语法：</p>
<p>合写属性：</p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1571493298248.png" alt="1571493298248"></p>
<p>分写属性：</p>
<h4 id="4-2、内边距会影响盒子实际大小"><a href="#4-2、内边距会影响盒子实际大小" class="headerlink" title="4.2、内边距会影响盒子实际大小"></a>4.2、内边距会影响盒子实际大小</h4><p>1、当我们给盒子指定 padding 值之后，发生了 2 件事情：</p>
<ol>
<li>内容和边框有了距离，添加了内边距。</li>
<li>padding影响了盒子实际大小。</li>
</ol>
<p>2、内边距对盒子大小的影响：</p>
<ul>
<li>如果盒子已经有了宽度和高度，此时再指定内边框，会撑大盒子。</li>
<li>如何盒子本身没有指定width/height属性, 则此时padding不会撑开盒子大小。</li>
</ul>
<p>3、解决方案：</p>
<p>​        如果保证盒子跟效果图大小保持一致，则让 width/height 减去多出来的内边距大小即可。</p>
<h3 id="5、外边距（margin）"><a href="#5、外边距（margin）" class="headerlink" title="5、外边距（margin）"></a>5、外边距（margin）</h3><h4 id="5-1、外边距的使用方式"><a href="#5-1、外边距的使用方式" class="headerlink" title="5.1、外边距的使用方式"></a>5.1、外边距的使用方式</h4><p>margin 属性用于设置外边距，即控制盒子和盒子之间的距离。</p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1571493260536.png" alt="1571493260536"></p>
<h4 id="5-2、外边距典型应用"><a href="#5-2、外边距典型应用" class="headerlink" title="5.2、外边距典型应用"></a>5.2、外边距典型应用</h4><p>外边距可以让块级盒子水平居中的两个条件：</p>
<ul>
<li>盒子必须指定了宽度（width）。</li>
<li>盒子左右的外边距都设置为 auto 。</li>
</ul>
<p>常见的写法，以下三种都可以：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">margin-left</span>: auto;   <span class="attribute">margin-right</span>: auto;</span><br><span class="line"><span class="attribute">margin</span>: auto;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br></pre></td></tr></table></figure>

<p><font color='red'>注意：</font>以上方法是让块级元素水平居中，行内元素或者行内块元素水平居中给其父元素添加 text-align:center 即可。</p>
<h4 id="5-3、外边距合并"><a href="#5-3、外边距合并" class="headerlink" title="5.3、外边距合并"></a>5.3、外边距合并</h4><p>使用 margin 定义块元素的垂直外边距时，可能会出现外边距的合并。</p>
<p>主要有两种情况:</p>
<p>1、相邻块元素垂直外边距的合并</p>
<p>​        当上下相邻的两个块元素（兄弟关系）相遇时，如果上面的元素有下外边距 margin-bottom，下面的元素有上外边距 margin-top ，则他们之间的垂直间距不是 margin-bottom 与 margin-top 之和。取两个值中的较大者这种现象被称为相邻块元素垂直外边距的合并。</p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1571494239103.png" alt="1571494239103"></p>
<p>解决方案：<br>        尽量只给一个盒子添加 margin 值。</p>
<p>2、嵌套块元素垂直外边距的塌陷</p>
<p>​        对于两个嵌套关系（父子关系）的块元素，父元素有上外边距同时子元素也有上外边距，此时父元素会塌陷较大的外边距值。</p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1571494373778.png" alt="1571494373778"></p>
<p>解决方案：</p>
<ul>
<li>可以为父元素定义上边框。</li>
<li>可以为父元素定义上内边距。</li>
<li>可以为父元素添加 overflow:hidden。</li>
</ul>
<h4 id="5-4、清除内外边距"><a href="#5-4、清除内外边距" class="headerlink" title="5.4、清除内外边距"></a>5.4、清除内外边距</h4><p>​        网页元素很多都带有默认的内外边距，而且不同浏览器默认的也不一致。因此我们在布局前，首先要清除下网页元素的内外边距。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">   <span class="attribute">padding</span>:<span class="number">0</span>;   <span class="comment">/* 清除内边距 */</span></span><br><span class="line">   <span class="attribute">margin</span>:<span class="number">0</span>;    <span class="comment">/* 清除外边距 */</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>​        注意：行内元素为了照顾兼容性，尽量只设置左右内外边距，不要设置上下内外边距。但是转换为块级和行内块元素就可以了</p>
<h2 id="七-其它样式"><a href="#七-其它样式" class="headerlink" title="七.其它样式"></a>七.其它样式</h2><h3 id="1、圆角边框"><a href="#1、圆角边框" class="headerlink" title="1、圆角边框"></a>1、圆角边框</h3><p>在 CSS3 中，新增了圆角边框样式，这样我们的盒子就可以变圆角了。</p>
<p>border-radius 属性用于设置元素的外边框圆角。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>:length;    </span><br></pre></td></tr></table></figure>

<ul>
<li>参数值可以为数值或百分比的形式</li>
<li>如果是正方形，想要设置为一个圆，把数值修改为高度或者宽度的一半即可，或者直接写为 50%</li>
<li>该属性是一个简写属性，可以跟四个值，分别代表左上角、右上角、右下角、左下角</li>
<li>分开写：border-top-left-radius、border-top-right-radius、border-bottom-right-radius 和border-bottom-left-radius</li>
<li>兼容性 ie9+ 浏览器支持, 但是不会影响页面布局,可以放心使用</li>
</ul>
<h3 id="2、盒子阴影"><a href="#2、盒子阴影" class="headerlink" title="2、盒子阴影"></a>2、盒子阴影</h3><p>CSS3 中新增了盒子阴影，我们可以使用 box-shadow 属性为盒子添加阴影。<br>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: h-shadow v-shadow blur spread color inset; </span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1571541874805.png" alt="1571541874805"></p>
<h3 id="3、文字阴影"><a href="#3、文字阴影" class="headerlink" title="3、文字阴影"></a>3、文字阴影</h3><p>在 CSS3 中，我们可以使用 text-shadow 属性将阴影应用于文本。<br>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-shadow</span>: h-shadow v-shadow blur color;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1571541954222.png" alt="1571541954222"></p>
<h2 id="八-浮动"><a href="#八-浮动" class="headerlink" title="八.浮动"></a>八.浮动</h2><h3 id="1、传统网页布局的三种方式"><a href="#1、传统网页布局的三种方式" class="headerlink" title="1、传统网页布局的三种方式"></a>1、传统网页布局的三种方式</h3><p>​    CSS 提供了三种传统布局方式(简单说,就是盒子如何进行排列顺序)：</p>
<ul>
<li><p>普通流（标准流）</p>
</li>
<li><p>浮动</p>
</li>
<li><p>定位</p>
<p>这三种布局方式都是用来摆放盒子的，盒子摆放到合适位置，布局自然就完成了。</p>
</li>
</ul>
<p>注意：实际开发中，一个页面基本都包含了这三种布局方式（后面移动端学习新的布局方式） 。</p>
<h3 id="2、标准流（普通流-文档流）"><a href="#2、标准流（普通流-文档流）" class="headerlink" title="2、标准流（普通流/文档流）"></a>2、标准流（普通流/文档流）</h3><p>所谓的标准流:  就是标签按照规定好默认方式排列</p>
<ol>
<li>块级元素会独占一行，从上向下顺序排列。常用元素：div、hr、p、h1~h6、ul、ol、dl、form、table</li>
<li>行内元素会按照顺序，从左到右顺序排列，碰到父元素边缘则自动换行。常用元素：span、a、i、em 等 </li>
</ol>
<p>以上都是标准流布局，我们前面学习的就是标准流，标准流是最基本的布局方式。</p>
<h3 id="3、为什么需要浮动？"><a href="#3、为什么需要浮动？" class="headerlink" title="3、为什么需要浮动？"></a>3、为什么需要浮动？</h3><p>​        总结： 有很多的布局效果，标准流没有办法完成，此时就可以利用浮动完成布局。 因为浮动可以改变元素标签默认的排列方式.</p>
<p>​        浮动最典型的应用：可以让多个块级元素一行内排列显示。</p>
<p>​        网页布局第一准则：<strong>多个块级元素纵向排列找标准流，多个块级元素横向排列找浮动</strong>。</p>
<h3 id="4、什么是浮动？"><a href="#4、什么是浮动？" class="headerlink" title="4、什么是浮动？"></a>4、什么是浮动？</h3><p>​        float 属性用于创建浮动框，将其移动到一边，直到左边缘或右边缘触及包含块或另一个浮动框的边缘。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">选择器 &#123; <span class="attribute">float</span>: 属性值; &#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1571543209934.png" alt="1571543209934"></p>
<h3 id="5、浮动特性"><a href="#5、浮动特性" class="headerlink" title="5、浮动特性"></a>5、浮动特性</h3><p>加了浮动之后的元素,会具有很多特性,需要我们掌握的.</p>
<p>1、浮动元素会脱离标准流(脱标：浮动的盒子不再保留原先的位置)</p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1571544664994.png" alt="1571544664994"></p>
<p>2、浮动的元素会一行内显示并且元素顶部对齐</p>
<p><font color='red'>注意：</font> </p>
<p>​        浮动的元素是互相贴靠在一起的（不会有缝隙），如果父级宽度装不下这些浮动的盒子，多出的盒子会另起一行对齐。</p>
<p>3、浮动的元素会具有行内块元素的特性</p>
<p>​        浮动元素的大小根据内容来决定</p>
<p>​        浮动的盒子中间是没有缝隙的</p>
<h3 id="6、浮动元素经常和标准流父级搭配使用"><a href="#6、浮动元素经常和标准流父级搭配使用" class="headerlink" title="6、浮动元素经常和标准流父级搭配使用"></a>6、浮动元素经常和标准流父级搭配使用</h3><p>为了约束浮动元素位置, 我们网页布局一般采取的策略是:</p>
<p>​        先用标准流父元素排列上下位置, 之后内部子元素采取浮动排列左右位置.  符合网页布局第一准侧</p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1571544991989.png" alt="1571544991989"></p>
<h3 id="7、浮动布局注意点"><a href="#7、浮动布局注意点" class="headerlink" title="7、浮动布局注意点"></a>7、浮动布局注意点</h3><p>1、浮动和标准流的父盒子搭配。</p>
<p>先用标准流的父元素排列上下位置, 之后内部子元素采取浮动排列左右位置</p>
<p>2、一个元素浮动了，理论上其余的兄弟元素也要浮动。</p>
<p>一个盒子里面有多个子盒子，如果其中一个盒子浮动了，其他兄弟也应该浮动，以防止引起问题。</p>
<p>浮动的盒子只会影响浮动盒子后面的标准流,不会影响前面的标准流</p>
<h2 id="九-清除浮动"><a href="#九-清除浮动" class="headerlink" title="九.清除浮动"></a>九.清除浮动</h2><h3 id="1、为什么需要清除浮动？"><a href="#1、为什么需要清除浮动？" class="headerlink" title="1、为什么需要清除浮动？"></a>1、为什么需要清除浮动？</h3><p>​        由于父级盒子很多情况下，不方便给高度，但是子盒子浮动又不占有位置，最后父级盒子高度为 0 时，就会影响下面的标准流盒子。</p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1571555883628.png" alt="1571555883628"></p>
<h3 id="2、清除浮动本质"><a href="#2、清除浮动本质" class="headerlink" title="2、清除浮动本质"></a>2、清除浮动本质</h3><p>清除浮动的本质是清除浮动元素造成的影响：浮动的子标签无法撑开父盒子的高度</p>
<p>注意：</p>
<ul>
<li>如果父盒子本身有高度，则不需要清除浮动</li>
<li>清除浮动之后，父级就会根据浮动的子盒子自动检测高度。</li>
<li>父级有了高度，就不会影响下面的标准流了</li>
</ul>
<h3 id="3、清除浮动样式"><a href="#3、清除浮动样式" class="headerlink" title="3、清除浮动样式"></a>3、清除浮动样式</h3><p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">选择器&#123;<span class="attribute">clear</span>:属性值;&#125; </span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1571555980419.png" alt="1571555980419"></p>
<p>我们实际工作中， 几乎只用 clear: both;</p>
<p>清除浮动的策略是:  闭合浮动. </p>
<h3 id="4、清除浮动的多种方式"><a href="#4、清除浮动的多种方式" class="headerlink" title="4、清除浮动的多种方式"></a>4、清除浮动的多种方式</h3><h4 id="4-1、额外标签法"><a href="#4-1、额外标签法" class="headerlink" title="4.1、额外标签法"></a>4.1、额外标签法</h4><p>额外标签法也称为隔墙法，是 W3C 推荐的做法。</p>
<p>使用方式：</p>
<p>​        额外标签法会在浮动元素末尾添加一个空的标签。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">例如 <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;clear:both&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>，或者其他标签（如<span class="tag">&lt;<span class="name">br</span> /&gt;</span>等）。</span><br></pre></td></tr></table></figure>

<p>​        优点： 通俗易懂，书写方便</p>
<p>​        缺点： 添加许多无意义的标签，结构化较差</p>
<p>​        注意： 要求这个新的空标签必须是块级元素。</p>
<p>总结:</p>
<p>​    1、清除浮动本质是?</p>
<p>​            清除浮动的本质是清除浮动元素脱离标准流造成的影响</p>
<p>​    2、清除浮动策略是?</p>
<p>​            闭合浮动.  只让浮动在父盒子内部影响,不影响父盒子外面的其他盒子.</p>
<p>​    3、额外标签法?</p>
<p>​            隔墙法, 就是在最后一个浮动的子元素后面添</p>
<p>​    4、加一个额外标签, 添加 清除浮动样式.</p>
<p>​            实际工作可能会遇到,但是不常用</p>
<h4 id="4-2、父级添加-overflow-属性"><a href="#4-2、父级添加-overflow-属性" class="headerlink" title="4.2、父级添加 overflow 属性"></a>4.2、父级添加 overflow 属性</h4><p>可以给父级添加 overflow 属性，将其属性值设置为 hidden、 auto 或 scroll 。</p>
<p>例如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">overflow</span>:hidden | auto | scroll;</span><br></pre></td></tr></table></figure>

<p>优点：代码简洁</p>
<p>缺点：无法显示溢出的部分</p>
<p>注意：是给父元素添加代码</p>
<h4 id="4-3、父级添加after伪元素"><a href="#4-3、父级添加after伪元素" class="headerlink" title="4.3、父级添加after伪元素"></a>4.3、父级添加after伪元素</h4><p>:after 方式是额外标签法的升级版。给父元素添加：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span>:after &#123;  </span><br><span class="line">  content: <span class="string">&quot;&quot;</span>; </span><br><span class="line">  <span class="attribute">display</span>: block; </span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>; </span><br><span class="line">  <span class="attribute">clear</span>: both; </span><br><span class="line">  <span class="attribute">visibility</span>: hidden;  </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;  <span class="comment">/* IE6、7 专有 */</span> </span><br><span class="line">  *zoom: <span class="number">1</span>;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>

<p>优点：没有增加标签，结构更简单</p>
<p>缺点：照顾低版本浏览器</p>
<p>代表网站： 百度、淘宝网、网易等</p>
<h4 id="4-4、父级添加双伪元素"><a href="#4-4、父级添加双伪元素" class="headerlink" title="4.4、父级添加双伪元素"></a>4.4、父级添加双伪元素</h4><p>给父元素添加</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span>:before,.clearfix:after &#123;</span><br><span class="line">  content:<span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">display</span>:table; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span>:after &#123;</span><br><span class="line">  clear:both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">   *zoom:<span class="number">1</span>;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>

<p>优点：代码更简洁</p>
<p>缺点：照顾低版本浏览器</p>
<p>代表网站：小米、腾讯等</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>为什么需要清除浮动？</p>
<ol>
<li>父级没高度。</li>
<li>子盒子浮动了。</li>
<li>影响下面布局了，我们就应该清除浮动了。</li>
</ol>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1571556500074.png" alt="1571556500074"></p>
<h2 id="十-定位"><a href="#十-定位" class="headerlink" title="十.定位"></a>十.定位</h2><h3 id="1-1-为什么使用定位"><a href="#1-1-为什么使用定位" class="headerlink" title="1.1 为什么使用定位"></a>1.1 为什么使用定位</h3><blockquote>
<p>我们先来看一个效果，同时思考一下<strong>用标准流或浮动能否实现类似的效果</strong>？</p>
</blockquote>
<p><strong>场景1</strong>： 某个元素可以自由的在一个盒子内移动位置，并且压住其他盒子.</p>
<img data-src="images/01_定位示例1.gif" />



<p><strong>场景2</strong>：当我们滚动窗口的时候，盒子是固定屏幕某个位置的。</p>
<img data-src="images/ding.png" />



<blockquote>
<p>结论<strong>：要实现以上效果，</strong>标准流 或 浮动都无法快速实现</p>
</blockquote>
<p>所以：</p>
<p>1.浮动可以让多个块级盒子一行没有缝隙排列显示， 经常用于横向排列盒子。</p>
<p>2.定位则是可以让盒子自由的在某个盒子内移动位置或者固定屏幕中某个位置，并且可以压住其他盒子。</p>
<h3 id="1-2-定位组成"><a href="#1-2-定位组成" class="headerlink" title="1.2 定位组成"></a>1.2 定位组成</h3><p><strong>定位</strong>：将盒子<strong>定</strong>在某一个位置，所以<strong>定位也是在摆放盒子， 按照定位的方式移动盒子</strong></p>
<p>定位也是用来布局的，它有两部分组成：</p>
<blockquote>
<p><strong>定位 = 定位模式 + 边偏移</strong>  </p>
</blockquote>
<p><strong>定位模式</strong> 用于指定一个元素在文档中的定位方式。<strong>边偏移</strong>则决定了该元素的最终位置。</p>
<h4 id="1-2-1-边偏移（方位名词）"><a href="#1-2-1-边偏移（方位名词）" class="headerlink" title="1.2.1 边偏移（方位名词）"></a>1.2.1 边偏移（方位名词）</h4><p><strong>边偏移</strong> 就是定位的盒子移动到最终位置。有 top、bottom、left 和 right  4 个属性。</p>
<table>
<thead>
<tr>
<th>边偏移属性</th>
<th align="left">示例</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>top</code></td>
<td align="left"><code>top: 80px</code></td>
<td><strong>顶端</strong>偏移量，定义元素相对于其父元素<strong>上边线的距离</strong>。</td>
</tr>
<tr>
<td><code>bottom</code></td>
<td align="left"><code>bottom: 80px</code></td>
<td><strong>底部</strong>偏移量，定义元素相对于其父元素<strong>下边线的距离</strong>。</td>
</tr>
<tr>
<td><code>left</code></td>
<td align="left"><code>left: 80px</code></td>
<td><strong>左侧</strong>偏移量，定义元素相对于其父元素<strong>左边线的距离</strong>。</td>
</tr>
<tr>
<td><code>right</code></td>
<td align="left"><code>right: 80px</code></td>
<td><strong>右侧</strong>偏移量，定义元素相对于其父元素<strong>右边线的距离</strong></td>
</tr>
</tbody></table>
<p>定位的盒子有了边偏移才有价值。 一般情况下，凡是有定位地方必定有边偏移。</p>
<h4 id="1-2-2-定位模式-position"><a href="#1-2-2-定位模式-position" class="headerlink" title="1.2.2 定位模式 (position)"></a>1.2.2 定位模式 (position)</h4><p>在 CSS 中，通过 <code>position</code> 属性定义元素的<strong>定位模式</strong>，语法如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">选择器 &#123; </span><br><span class="line">    <span class="attribute">position</span>: 属性值; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定位模式是有不同分类的，在不同情况下，我们用到不同的定位模式。</p>
<p>定位模式决定元素的定位方式 ，它通过 CSS 的 position 属性来设置，其值可以分为四个：</p>
<table>
<thead>
<tr>
<th>值</th>
<th align="center">语义</th>
</tr>
</thead>
<tbody><tr>
<td><code>static</code></td>
<td align="center"><strong>静态</strong>定位</td>
</tr>
<tr>
<td><code>relative</code></td>
<td align="center"><strong>相对</strong>定位</td>
</tr>
<tr>
<td><code>absolute</code></td>
<td align="center"><strong>绝对</strong>定位</td>
</tr>
<tr>
<td><code>fixed</code></td>
<td align="center"><strong>固定</strong>定位</td>
</tr>
</tbody></table>
 <img data-src='./images/26定位的概念.png'>

<h3 id="1-3-定位模式介绍"><a href="#1-3-定位模式介绍" class="headerlink" title="1.3 定位模式介绍"></a>1.3 定位模式介绍</h3><h4 id="1-3-1-静态定位-static-了解"><a href="#1-3-1-静态定位-static-了解" class="headerlink" title="1.3.1.  静态定位(static) - 了解"></a>1.3.1.  静态定位(static) - 了解</h4><ul>
<li><p><strong>静态定位</strong>是元素的<strong>默认</strong>定位方式，<strong>无定位的意思</strong>。它相当于 border 里面的none，静态定位static，不要定位的时候用。</p>
</li>
<li><p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">选择器 &#123; </span><br><span class="line">    position: static; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>静态定位 按照标准流特性摆放位置，它没有边偏移。</p>
</li>
<li><p>静态定位在布局时我们几乎不用的 </p>
</li>
</ul>
<h4 id="1-3-2-相对定位-relative-重要"><a href="#1-3-2-相对定位-relative-重要" class="headerlink" title="1.3.2. 相对定位(relative) - 重要"></a>1.3.2. 相对定位(relative) - 重要</h4><ul>
<li><strong>相对定位</strong>是元素在移动位置的时候，是相对于它自己<strong>原来的位置</strong>来说的（自恋型）。</li>
<li>语法：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">选择器 &#123; </span><br><span class="line">	position: relative; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>相对定位的特点：（务必记住）</p>
<ul>
<li><p>1.它是相对于自己原来的位置来移动的（移动位置的时候参照点是自己原来的位置）。</p>
</li>
<li><p>2.<strong>原来</strong>在标准流的<strong>位置</strong>继续占有，后面的盒子仍然以标准流的方式对待它。</p>
<p>因此，<strong>相对定位并没有脱标</strong>。它最典型的应用是给绝对定位当爹的。。。</p>
</li>
</ul>
</li>
<li><p>效果图：</p>
</li>
</ul>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/images/04_%E7%9B%B8%E5%AF%B9%E5%AE%9A%E4%BD%8D%E6%A1%88%E4%BE%8B.png" alt="相对定位案例"></p>
<h4 id="1-3-3-绝对定位-absolute-重要"><a href="#1-3-3-绝对定位-absolute-重要" class="headerlink" title="1.3.3. 绝对定位(absolute) - 重要"></a>1.3.3. 绝对定位(absolute) - 重要</h4><h5 id="1-3-3-1-绝对定位的介绍"><a href="#1-3-3-1-绝对定位的介绍" class="headerlink" title="1.3.3.1 绝对定位的介绍"></a>1.3.3.1 绝对定位的介绍</h5><ul>
<li><p><strong>绝对定位</strong>是元素在移动位置的时候，是相对于它<strong>祖先元素</strong>来说的（拼爹型）。</p>
</li>
<li><p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">选择器 &#123; </span><br><span class="line">	<span class="attribute">position</span>: absolute; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ol>
<li><p><strong>完全脱标</strong> —— 完全不占位置；  </p>
</li>
<li><p><strong>父元素没有定位</strong>，则以<strong>浏览器</strong>为准定位（Document 文档）。</p>
<img data-src="./images/05_绝对定位_父级无定位.png" width="600" /></li>
<li><p><strong>父元素要有定位</strong></p>
<ul>
<li>元素将依据最近的已经定位（绝对、固定或相对定位）的父元素（祖先）进行定位。</li>
</ul>
</li>
</ol>
<img data-src="./images/06_绝对定位_父级有定位.png" width="600" />





<ul>
<li><p><strong>绝对定位的特点总结</strong>：（务必记住）</p>
<p>1.如果<strong>没有祖先元素</strong>或者<strong>祖先元素没有定位</strong>，则以浏览器为基准定位（Document 文档）。</p>
<p>2.如果祖先元素有定位（相对、绝对、固定定位），则以最近一级的有定位祖先元素为参考点移动位置。</p>
<p>3.绝对定位<strong>不再占有原先的位置</strong>。所以绝对定位是脱离标准流的。（脱标）</p>
<p>4.定位后的元素生成一个块级框，所以定位后的行内元素可以设置宽高</p>
</li>
</ul>
<h5 id="1-3-3-2-定位口诀-——-子绝父相"><a href="#1-3-3-2-定位口诀-——-子绝父相" class="headerlink" title="1.3.3.2 定位口诀 —— 子绝父相"></a>1.3.3.2 定位口诀 —— 子绝父相</h5><p>弄清楚这个口诀，就明白了绝对定位和相对定位的使用场景。</p>
<p>这个<strong>“子绝父相”</strong>太重要了，是我们学习定位的<strong>口诀</strong>，是定位中最常用的一种方式这句话的意思是：<strong>子级是绝对定位的话，父级要用相对定位。</strong></p>
<p>因为绝对定位的盒子是拼爹的，所以要和父级搭配一起来使用。</p>
<p>①子级绝对定位，不会占有位置，可以放到父盒子里面的任何一个地方，不会影响其他的兄弟盒子。</p>
<p>②父盒子需要加定位限制子盒子在父盒子内显示。</p>
<p>③父盒子布局时，需要占有位置，因此父亲只能是相对定位。</p>
<p>这就是子绝父相的由来，所以<strong>相对定位经常用来作为绝对定位的父级</strong>。</p>
<p>总结： <strong>因为父级需要占有位置，因此是相对定位， 子盒子不需要占有位置，则是绝对定位</strong></p>
<p>当然，子绝父相不是永远不变的，如果父元素不需要占有位置，<strong>子绝父绝</strong>也会遇到。</p>
<h5 id="1-3-3-3-绝对定位盒子的居中算法"><a href="#1-3-3-3-绝对定位盒子的居中算法" class="headerlink" title="1.3.3.3 绝对定位盒子的居中算法"></a>1.3.3.3 绝对定位盒子的居中算法</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/* 1.left走50% 父容器宽度的一半 */</span></span><br><span class="line"><span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="comment">/* 2.margin 负值往左边走 自己盒子宽度的一半 */</span></span><br><span class="line"><span class="attribute">margin-left</span>: -<span class="number">50px</span>;</span><br></pre></td></tr></table></figure>





<p><strong>疑问</strong>：为什么在布局时，<strong>子级元素</strong>使用<strong>绝对定位</strong>时，<strong>父级元素</strong>就要用<strong>相对定位</strong>呢？</p>
<p>观察下图，思考一下在布局时，<strong>左右两个方向的箭头图片</strong>以及<strong>父级盒子</strong>的定位方式。</p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/images/07_%E5%AD%90%E7%BB%9D%E7%88%B6%E7%9B%B8%E6%88%AA%E5%9B%BE.png" alt="子绝父相截图"></p>
<img data-src='./images/27子绝父相.png'>

<p><strong>分析</strong>：</p>
<ol>
<li><strong>方向箭头</strong>叠加在其他图片上方，应该使用<strong>绝对定位</strong>，因为<strong>绝对定位完全脱标</strong>，完全不占位置。</li>
<li><strong>父级盒子</strong>应该使用<strong>相对定位</strong>，因为<strong>相对定位不脱标</strong>，后续盒子仍然以标准流的方式对待它。<ul>
<li>如果父级盒子也使用<strong>绝对定位</strong>，会完全脱标，那么下方的<strong>广告盒子</strong>会上移，这显然不是我们想要的。</li>
</ul>
</li>
</ol>
<p><strong>结论</strong>：<strong>父级要占有位置，子级要任意摆放</strong>，这就是<strong>子绝父相</strong>的由来。</p>
<h4 id="1-3-4-固定定位-fixed-重要"><a href="#1-3-4-固定定位-fixed-重要" class="headerlink" title="1.3.4. 固定定位(fixed) - 重要"></a>1.3.4. 固定定位(fixed) - 重要</h4><ul>
<li><p><strong>固定定位</strong>是元素<strong>固定于浏览器可视区的位置</strong>。（认死理型）   主要使用场景： 可以在浏览器页面滚动时元素的位置不会改变。</p>
</li>
<li><p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">选择器 &#123; </span><br><span class="line">	position: fixed; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>固定定位的特点：（务必记住）：</p>
<p>1.以浏览器的可视窗口为参照点移动元素。</p>
<ul>
<li>跟父元素没有任何关系</li>
<li>不随滚动条滚动。</li>
</ul>
<p>2.固定定位<strong>不在占有原先的位置</strong>。</p>
</li>
<li><p>固定定位也是<strong>脱标</strong>的，其实<strong>固定定位也可以看做是一种特殊的绝对定位</strong>。（认死理型） </p>
<ul>
<li><strong>完全脱标</strong>—— 完全不占位置；</li>
<li>只认<strong>浏览器的可视窗口</strong> —— <code>浏览器可视窗口 + 边偏移属性</code> 来设置元素的位置；<ul>
<li>跟父元素没有任何关系；单独使用的</li>
<li>不随滚动条滚动。</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>提示</strong>：IE 6 等低版本浏览器不支持固定定位。</p>
<h4 id="1-3-5-粘性定位-sticky-了解"><a href="#1-3-5-粘性定位-sticky-了解" class="headerlink" title="1.3.5 粘性定位(sticky) - 了解"></a>1.3.5 粘性定位(sticky) - 了解</h4><ul>
<li><p><strong>粘性定位</strong>可以被认为是相对定位和固定定位的混合。 Sticky  粘性的 </p>
</li>
<li><p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">选择器 &#123; </span><br><span class="line">    position: sticky; </span><br><span class="line">    top: 10px; </span><br><span class="line">&#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure></li>
<li><p>粘性定位的特点：</p>
<p>1.以浏览器的可视窗口为参照点移动元素（固定定位特点）</p>
<p>2.粘性定位占有原先的位置（相对定位特点）</p>
<p>3.必须添加 top 、left、right、bottom <strong>其中一个</strong>才有效</p>
<p>跟页面滚动搭配使用。 兼容性较差，IE 不支持。</p>
</li>
</ul>
<h4 id="1-3-6-定位总结"><a href="#1-3-6-定位总结" class="headerlink" title="1.3.6 定位总结"></a>1.3.6 定位总结</h4><table>
<thead>
<tr>
<th><strong>定位模式</strong></th>
<th><strong>是否脱标</strong></th>
<th><strong>移动位置</strong></th>
<th><strong>是否常用</strong></th>
</tr>
</thead>
<tbody><tr>
<td>static   静态定位</td>
<td>否</td>
<td>不能使用边偏移</td>
<td>很少</td>
</tr>
<tr>
<td><strong>relative 相对定位</strong></td>
<td><strong>否 (占有位置)</strong></td>
<td><strong>相对于自身位置移动</strong></td>
<td><strong>基本单独使用</strong></td>
</tr>
<tr>
<td><strong>absolute绝对定位</strong></td>
<td><strong>是（不占有位置）</strong></td>
<td><strong>带有定位的父级</strong></td>
<td><strong>要和定位父级元素搭配使用</strong></td>
</tr>
<tr>
<td><strong>fixed 固定定位</strong></td>
<td><strong>是（不占有位置）</strong></td>
<td><strong>浏览器可视区</strong></td>
<td><strong>单独使用，不需要父级</strong></td>
</tr>
<tr>
<td>sticky 粘性定位</td>
<td>否   (占有位置)</td>
<td>浏览器可视区</td>
<td>少</td>
</tr>
</tbody></table>
<ul>
<li><p>一定记住 相对定位、固定定位、绝对定位 两个大的特点： 1. 是否占有位置（脱标否） 2. 以谁为基准点移动位置。</p>
</li>
<li><p>学习定位重点学会子绝父相。</p>
</li>
<li><p>注意：</p>
</li>
</ul>
<ol>
<li><strong>边偏移</strong>需要和<strong>定位模式</strong>联合使用，<strong>单独使用无效</strong>；</li>
<li><code>top</code> 和 <code>bottom</code> 不要同时使用；</li>
<li><code>left</code> 和 <code>right</code> 不要同时使用。</li>
<li>如果一个盒子既有left，又有right，则默认执行left属性，同理top和bottom会执行top。先左后右，先上后下。</li>
<li><font color='red'>浮动的元素不会压住下面标准流的文字；绝对（固定）定位会压住下面标准流所有的内容</font></li>
</ol>
<h2 id="十一-精灵图（重点）"><a href="#十一-精灵图（重点）" class="headerlink" title="十一. 精灵图（重点）"></a>十一. 精灵图（重点）</h2><h3 id="1-1-为什么需要精灵图"><a href="#1-1-为什么需要精灵图" class="headerlink" title="1.1 为什么需要精灵图"></a>1.1 为什么需要精灵图</h3><p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1571482435259.png" alt="1571482435259"></p>
<p>一个网页中往往会应用很多小的背景图像作为修饰，当网页中的图像过多时，服务器就会频繁地接收和发送请求图片，造成服务器请求压力过大，这将大大降低页面的加载速度。</p>
<p><strong>为什么使用精灵图（目的）：</strong></p>
<p>​    <strong>为了有效地减少服务器接收和发送请求的次数</strong>，<strong>提高</strong>页面的<strong>加载速度</strong>，出现了 <strong>CSS 精灵技术</strong>（也称 CSS Sprites、CSS 雪碧）。</p>
<p><strong>核心原理</strong>：</p>
<p>​    将网页中的一些小背景图像整合到一张大图中 ，这样服务器只需要一次请求就可以了。</p>
<p><strong>精灵图举例</strong>:</p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1571519067073.png" alt="1571519067073"></p>
<h3 id="1-2-精灵图（sprites）的使用"><a href="#1-2-精灵图（sprites）的使用" class="headerlink" title="1.2 精灵图（sprites）的使用"></a>1.2 精灵图（sprites）的使用</h3><p>使用精灵图核心：</p>
<ol>
<li>精灵技术主要针对于背景图片使用。就是把多个小背景图片整合到一张大图片中。</li>
<li>这个大图片也称为 sprites  精灵图  或者 雪碧图</li>
<li>移动背景图片位置， 此时可以使用 background-position 。</li>
<li>移动的距离就是这个目标图片的 x 和 y 坐标。注意网页中的坐标有所不同</li>
<li>因为一般情况下都是往上往左移动，所以数值是负值。</li>
<li>使用精灵图的时候需要精确测量，每个小背景图片的大小和位置。</li>
</ol>
<p>使用精灵图核心总结：</p>
<ol>
<li><p>精灵图主要<strong>针对于小的背景图片</strong>使用。</p>
</li>
<li><p>主要借助于背景位置来实现—<strong>background-position</strong> 。</p>
</li>
<li><p>一般情况下精灵图都是<strong>负值</strong>。（千万注意网页中的坐标： x轴右边走是正值，左边走是负值， y轴同理。）</p>
</li>
</ol>
<h3 id="1-3-案例：拼出自己名字"><a href="#1-3-案例：拼出自己名字" class="headerlink" title="1.3 案例：拼出自己名字"></a>1.3 案例：拼出自己名字</h3><h4 id="1-3-1-案例效果"><a href="#1-3-1-案例效果" class="headerlink" title="1.3.1 案例效果"></a>1.3.1 案例效果</h4><p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1571519368229.png" alt="1571519368229"></p>
<h4 id="1-3-2-代码参考"><a href="#1-3-2-代码参考" class="headerlink" title="1.3.2 代码参考"></a>1.3.2 代码参考</h4><p>结构</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;p&quot;</span>&gt;</span>p<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;i&quot;</span>&gt;</span>i<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;n&quot;</span>&gt;</span>n<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;k&quot;</span>&gt;</span>k<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">images/abcd.jpg</span>) no-repeat;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.p</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">112px</span>;</span><br><span class="line">    <span class="comment">/* background-color: pink; */</span></span><br><span class="line">    <span class="attribute">background-position</span>:  -<span class="number">493px</span> -<span class="number">276px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.i</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">108px</span>;</span><br><span class="line">    <span class="comment">/* background-color: pink; */</span></span><br><span class="line">    <span class="attribute">background-position</span>: -<span class="number">327px</span> -<span class="number">142px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.n</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">108px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">109px</span>;</span><br><span class="line">    <span class="comment">/* background-color: pink; */</span></span><br><span class="line">    <span class="attribute">background-position</span>: -<span class="number">215px</span> -<span class="number">141px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.k</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">105px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">114px</span>;</span><br><span class="line">    <span class="comment">/* background-color: pink; */</span></span><br><span class="line">    <span class="attribute">background-position</span>: -<span class="number">495px</span> -<span class="number">142px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-4-ps测量精灵图距离"><a href="#1-4-ps测量精灵图距离" class="headerlink" title="1.4 ps测量精灵图距离"></a>1.4 ps测量精灵图距离</h3><p>视图选项卡新建x轴和y轴参考线，窗口选项卡打开信箱选项（F8），用矩形边框工具选中图形，ctrl+T自由变换模式，在信息窗口有到原点的距离。</p>
<h2 id="十二-字体图标"><a href="#十二-字体图标" class="headerlink" title="十二. 字体图标"></a>十二. 字体图标</h2><h3 id="1-1-字体图标的产生"><a href="#1-1-字体图标的产生" class="headerlink" title="1.1 字体图标的产生"></a>1.1 字体图标的产生</h3><p>字体图标使用场景：  主要用于显示网页中通用、常用的一些小图标。</p>
<p>精灵图是有诸多优点的，但是缺点很明显。</p>
<p>1.图片文件还是比较大的。</p>
<p>2.图片本身放大和缩小会失真。</p>
<p>3.一旦图片制作完毕想要更换非常复杂。</p>
<p>此时，有一种技术的出现很好的解决了以上问题，就是<strong>字体图标 iconfont</strong>。</p>
<p><strong>字体图标</strong>可以为前端工程师提供一种方便高效的图标使用方式，<strong>展示的是图标，本质属于字体</strong>。</p>
<h3 id="1-2-字体图标的优点"><a href="#1-2-字体图标的优点" class="headerlink" title="1.2 字体图标的优点"></a>1.2 字体图标的优点</h3><p><strong>轻量级</strong>：一个图标字体要比一系列的图像要小。一旦字体加载了，图标就会马上渲染出来，减少了服务器请求</p>
<ul>
<li>灵活性：本质其实是文字，可以很随意的改变颜色、产生阴影、透明效果、旋转等</li>
<li>兼容性：几乎支持所有的浏览器，请放心使用</li>
<li>注意： 字体图标不能替代精灵技术，只是对工作中图标部分技术的提升和优化。</li>
</ul>
<p><strong>总结：</strong></p>
<p>1.如果遇到一些结构和样式比较简单的小图标，就用字体图标。<img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1571519724473.png" alt="1571519724473"></p>
<p>2.如果遇到一些结构和样式复杂一点的小图片，就用精灵图。</p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1571519739775.png" alt="1571519739775"></p>
<p><strong>使用步骤</strong></p>
<p>字体图标是一些网页常见的小图标，我们直接网上下载即可。 因此使用可以分为：</p>
<p>1.字体图标的下载 </p>
<p>2.字体图标的引入 （引入到我们html页面中）</p>
<p>3.字体图标的追加 （以后添加新的小图标）</p>
<h3 id="1-3-字体图标的下载"><a href="#1-3-字体图标的下载" class="headerlink" title="1.3 字体图标的下载"></a><strong>1.3</strong> <strong>字体图标的下载</strong></h3><p><strong>推荐下载网站：</strong></p>
<ul>
<li><strong>icomoon</strong> <strong>字库</strong>  <a href="http://icomoon.io/">http://icomoon.io</a>    推荐指数  <strong>★★★★★</strong></li>
</ul>
<p>IcoMoon 成立于 2011 年，推出了第一个自定义图标字体生成器，它允许用户选择所需要的图标，使它们成一字型。该字库内容种类繁多，非常全面，唯一的遗憾是国外服务器，打开网速较慢。</p>
<ul>
<li><strong>阿里</strong> <strong>iconfont</strong> <strong>字库</strong>   <a href="http://www.iconfont.cn/">http://www.iconfont.cn/</a>   推荐指数   <strong>★★★★★</strong> </li>
</ul>
<p>这个是阿里妈妈 M2UX 的一个 iconfont 字体图标字库，包含了淘宝图标库和阿里妈妈图标库。可以使用 AI制作图标上传生成。 重点是，免费！</p>
<p><font color='red'>tips：阿里巴巴矢量图标库全选技巧  打开控制台，运行下列代码</font></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> span = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.icon-cover&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = span.length; i &lt; len; i++) &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(span[i].querySelector(<span class="string">&#x27;span&#x27;</span>).click());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1-4-字体图标的引入"><a href="#1-4-字体图标的引入" class="headerlink" title="1.4 字体图标的引入"></a><strong>1.4</strong> <strong>字体图标的引入</strong></h3><p><strong>下载完毕之后，注意原先的文件不要删，后面会用</strong>。</p>
<ol>
<li>把下载包里面的 <strong>fonts</strong> 文件夹放入页面根目录下</li>
</ol>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1571520092646.png" alt="1571520092646"></p>
<ul>
<li><strong>字体文件格式</strong></li>
</ul>
<p>不同浏览器所支持的字体格式是不一样的，字体图标之所以兼容，就是因为包含了主流浏览器支持的字体文件。</p>
<p>1).TureType(  <strong>.ttf</strong>  )格式.ttf字体是Windows和Mac的最常见的字体，支持这种字体的浏览器有IE9+、Firefox3.5+、Chrome4+、Safari3+、Opera10+、iOS Mobile、Safari4.2+；</p>
<p>2).Web Open Font Format( <strong>.woff</strong> )格式woff字体，支持这种字体的浏览器有IE9+、Firefox3.5+、Chrome6+、Safari3.6+、Opera11.1+；</p>
<p>3).Embedded Open Type( <strong>.eot</strong> )格式.eot字体是IE专用字体，支持这种字体的浏览器有IE4+；</p>
<p>4).SVG(  .<strong>svg</strong>  )格式.svg字体是基于SVG字体渲染的一种格式，支持这种字体的浏览器有Chrome4+、Safari3.1+、Opera10.0+、iOS Mobile Safari3.2+；</p>
<p>2.在 CSS 样式中全局声明字体： 简单理解把这些字体文件通过css引入到我们页面中。</p>
<p>一定注意字体文件路径的问题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@font-face &#123;</span><br><span class="line">  font-family: &#x27;icomoon&#x27;;</span><br><span class="line">  src:  url(&#x27;fonts/icomoon.eot?7kkyc2&#x27;);</span><br><span class="line">  src:  url(&#x27;fonts/icomoon.eot?7kkyc2#iefix&#x27;) format(&#x27;embedded-opentype&#x27;),</span><br><span class="line">    url(&#x27;fonts/icomoon.ttf?7kkyc2&#x27;) format(&#x27;truetype&#x27;),</span><br><span class="line">    url(&#x27;fonts/icomoon.woff?7kkyc2&#x27;) format(&#x27;woff&#x27;),</span><br><span class="line">    url(&#x27;fonts/icomoon.svg?7kkyc2#icomoon&#x27;) format(&#x27;svg&#x27;);</span><br><span class="line">  font-weight: normal;</span><br><span class="line">  font-style: normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ol start="3">
<li>html 标签内添加小图标。</li>
</ol>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1571520411345.png" alt="1571520411345"></p>
<ol start="4">
<li>给标签定义字体。</li>
</ol>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">span &#123;</span><br><span class="line">  font-family: &quot;icomoon&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  注意：务必保证 这个字体和上面@font-face里面的字体保持一致 </p>
<p>  <img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1571520485350.png" alt="1571520485350"></p>
<h3 id="1-5-字体图标的追加"><a href="#1-5-字体图标的追加" class="headerlink" title="1.5 字体图标的追加"></a>1.5 字体图标的追加</h3><p>如果工作中，原来的字体图标不够用了，我们需要添加新的字体图标到原来的字体文件中。</p>
<p>把压缩包里面的 <strong>selection.json</strong> 从新上传，然后选中自己想要新的图标，从新下载压缩包，并替换原来的文件即可。</p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1571520554317.png" alt="1571520554317"></p>
<h3 id="1-6-字体图标加载的原理："><a href="#1-6-字体图标加载的原理：" class="headerlink" title="1.6 字体图标加载的原理："></a>1.6 字体图标加载的原理：</h3><p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/%E5%AD%97%E4%BD%93%E5%9B%BE%E6%A0%87%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%8E%9F%E7%90%86.gif" alt="1571520617270"></p>
<h2 id="十三-CSS-三角"><a href="#十三-CSS-三角" class="headerlink" title="十三. CSS 三角"></a>十三. CSS 三角</h2><h3 id="1-1-介绍"><a href="#1-1-介绍" class="headerlink" title="1.1 介绍"></a>1.1 介绍</h3><p>网页中常见一些三角形，使用 CSS 直接画出来就可以，不必做成图片或者字体图标。</p>
<p>一张图， 你就知道 CSS 三角是怎么来的了, 做法如下：</p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1571520965966.png" alt="1571520965966"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">0</span>; </span><br><span class="line">   <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">border</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line"><span class="attribute">border-color</span>: red green blue black;</span><br><span class="line"><span class="attribute">line-height</span>:<span class="number">0</span>;</span><br><span class="line">   <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>我们用css 边框可以模拟三角效果</li>
<li>宽度高度为0</li>
<li>我们4个边框都要写， 只保留需要的边框颜色，其余的不能省略，都改为 transparent 透明就好了</li>
<li>为了照顾兼容性 低版本的浏览器，加上 font-size: 0;  line-height: 0;</li>
</ol>
<h3 id="1-2-案例：京东三角"><a href="#1-2-案例：京东三角" class="headerlink" title="1.2 案例：京东三角"></a>1.2 案例：京东三角</h3><h4 id="1-2-1效果图"><a href="#1-2-1效果图" class="headerlink" title="1.2.1效果图"></a>1.2.1效果图</h4><p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1571521183026.png" alt="1571521183026"></p>
<h4 id="1-2-2-代码参考"><a href="#1-2-2-代码参考" class="headerlink" title="1.2.2 代码参考"></a>1.2.2 代码参考</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS 三角制作<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/* border: 10px solid pink; */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">border-top</span>: <span class="number">10px</span> solid pink;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-right</span>: <span class="number">10px</span> solid red;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-bottom</span>: <span class="number">10px</span> solid blue;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-left</span>: <span class="number">10px</span> solid green;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">50px</span> solid transparent;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-left-color</span>: pink;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.jd</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">249px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.jd</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">            <span class="attribute">right</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">top</span>: -<span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 为了照顾兼容性 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">0</span>;  </span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">5px</span> solid transparent;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-bottom-color</span>: pink;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;jd&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="十四-CSS-用户界面样式"><a href="#十四-CSS-用户界面样式" class="headerlink" title="十四. CSS 用户界面样式"></a>十四. CSS 用户界面样式</h2><p><strong>什么是界面样式</strong></p>
<p>所谓的界面样式，就是更改一些用户操作样式，以便提高更好的用户体验。</p>
<ul>
<li>更改用户的鼠标样式 </li>
<li>表单轮廓</li>
<li>防止表单域拖拽</li>
</ul>
<h3 id="1-1-鼠标样式-cursor"><a href="#1-1-鼠标样式-cursor" class="headerlink" title="1.1 鼠标样式 cursor"></a>1.1 鼠标样式 cursor</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">	<span class="attribute">cursor</span>: pointer; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状。</p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1571521805183.png" alt="1571521805183"></p>
<h3 id="1-2-轮廓线-outline"><a href="#1-2-轮廓线-outline" class="headerlink" title="1.2 轮廓线 outline"></a>1.2 轮廓线 outline</h3><p>给表单添加 outline: 0;   或者  outline: none; 样式之后，就可以去掉默认的蓝色边框。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line">	<span class="attribute">outline</span>: none; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3-防止拖拽文本域-resize"><a href="#1-3-防止拖拽文本域-resize" class="headerlink" title="1.3 防止拖拽文本域 resize"></a>1.3 防止拖拽文本域 resize</h3><p> 实际开发中，我们文本域右下角是不可以拖拽的。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">textarea</span>&#123;  	<span class="attribute">resize</span>: none; &#125;</span><br></pre></td></tr></table></figure>

<p>vertical-align 属性应用</p>
<h2 id="十五-vertical-align-属性应用"><a href="#十五-vertical-align-属性应用" class="headerlink" title="十五. vertical-align 属性应用"></a>十五. vertical-align 属性应用</h2><p>CSS 的 <strong>vertical-align</strong> 属性使用场景： 经常用于设置图片或者表单(行内块元素）和文字垂直对齐。</p>
<p>官方解释： 用于设置一个元素的<strong>垂直对齐方式</strong>，但是它只针对于行内元素或者行内块元素有效。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">vertical-align</span> : baseline | top | middle | bottom </span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1571522023413.png" alt="1571522023413"></p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1571522040645.png" alt="1571522040645"></p>
<h3 id="1-1-图片、表单和文字对齐"><a href="#1-1-图片、表单和文字对齐" class="headerlink" title="1.1 图片、表单和文字对齐"></a><strong>1.1</strong> <strong>图片、表单和文字对齐</strong></h3><p>图片、表单都属于行内块元素，默认的 vertical-align 是基线对齐。</p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1571522093729.png" alt="1571522093729"></p>
<p>此时可以给图片、表单这些行内块元素的 <strong>vertical-align 属性设置为 middle</strong> 就可以让文字和图片垂直居中对齐了。</p>
<h3 id="1-2-解决图片底部默认空白缝隙问题"><a href="#1-2-解决图片底部默认空白缝隙问题" class="headerlink" title="1.2 解决图片底部默认空白缝隙问题"></a>1.2 解决图片底部默认空白缝隙问题</h3><p>bug：图片底侧会有一个空白缝隙，原因是行内块元素会和文字的基线对齐。</p>
<p>主要解决方法有两种：</p>
<p>1.<strong>给图片</strong>添加 <strong>vertical-align:middle | top| bottom</strong> 等。 （提倡使用的）</p>
<p>2.把图片转换为块级元素  <strong>display: block</strong>; </p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1571522162225.png" alt="1571522162225"></p>
<h2 id="十六-溢出的文字省略号显示"><a href="#十六-溢出的文字省略号显示" class="headerlink" title="十六. 溢出的文字省略号显示"></a>十六. 溢出的文字省略号显示</h2><h3 id="1-1-单行文本溢出显示省略号"><a href="#1-1-单行文本溢出显示省略号" class="headerlink" title="1.1 单行文本溢出显示省略号"></a>1.1 单行文本溢出显示省略号</h3><p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1571522317809.png" alt="1571522317809"></p>
<p>单行文本溢出显示省略号–必须满足三个条件：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">  <span class="comment">/*1. 先强制一行内显示文本*/</span>   </span><br><span class="line"><span class="attribute">white-space</span>: nowrap;  （ 默认 <span class="attribute">normal</span> 自动换行）     </span><br><span class="line"><span class="comment">/*2. 超出的部分隐藏*/</span>   </span><br><span class="line"><span class="attribute">overflow</span>: hidden;     </span><br><span class="line"><span class="comment">/*3. 文字用省略号替代超出的部分*/</span>   </span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br></pre></td></tr></table></figure>



<h3 id="1-2-多行文本溢出显示省略号（了解）"><a href="#1-2-多行文本溢出显示省略号（了解）" class="headerlink" title="1.2 多行文本溢出显示省略号（了解）"></a>1.2 多行文本溢出显示省略号（了解）</h3><p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1571522334591.png" alt="1571522334591"></p>
<p>多行文本溢出显示省略号，<strong>有较大兼容性问题</strong>，适合于webKit浏览器或移动端（移动端大部分是webkit内核）</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*1. 超出的部分隐藏 */</span></span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="comment">/*2. 文字用省略号替代超出的部分 */</span></span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line"><span class="comment">/* 3. 弹性伸缩盒子模型显示 */</span></span><br><span class="line"><span class="attribute">display</span>: -webkit-box;</span><br><span class="line"><span class="comment">/* 4. 限制在一个块元素显示的文本的行数 */</span></span><br><span class="line">-webkit-line-clamp: <span class="number">2</span>;</span><br><span class="line"><span class="comment">/* 5. 设置或检索伸缩盒对象的子元素的排列方式 */</span></span><br><span class="line">-webkit-box-orient: vertical;</span><br></pre></td></tr></table></figure>

<p><strong>更推荐让后台人员来做这个效果，因为后台人员可以设置显示多少个字，操作更简单。</strong></p>
<h2 id="十七-常见布局技巧"><a href="#十七-常见布局技巧" class="headerlink" title="十七. 常见布局技巧"></a>十七. 常见布局技巧</h2><p><strong>巧妙利用一个技术更快更好的布局：</strong></p>
<ol>
<li>margin负值的运用</li>
<li>文字围绕浮动元素</li>
<li>行内块的巧妙运用</li>
<li>CSS三角强化</li>
</ol>
<h3 id="1-1-margin负值运用"><a href="#1-1-margin负值运用" class="headerlink" title="1.1. margin负值运用"></a>1.1. margin负值运用</h3><p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1571522666082.png" alt="1571522666082"></p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1571522683897.png" alt="1571522683897"></p>
<p>1.让每个盒子margin 往左侧移动 -1px 正好压住相邻盒子边框</p>
<p>2.鼠标经过某个盒子的时候，提高当前盒子的层级即可（如果没有有定位，则加相对定位（保留位置），如果有定位，则加z-index）</p>
<h3 id="1-2-文字围绕浮动元素"><a href="#1-2-文字围绕浮动元素" class="headerlink" title="1.2 文字围绕浮动元素"></a>1.2 文字围绕浮动元素</h3><p><strong>效果</strong></p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1571522777745.png" alt="1571522777745"></p>
<p><strong>布局示意图</strong></p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1571522761996.png" alt="1571522761996"></p>
<p><strong>巧妙运用浮动元素不会压住文字的特性</strong></p>
<h3 id="1-3-行内块巧妙运用"><a href="#1-3-行内块巧妙运用" class="headerlink" title="1.3 行内块巧妙运用"></a>1.3 行内块巧妙运用</h3><p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1571522898744.png" alt="1571522898744"></p>
<p>页码在页面中间显示:</p>
<ol>
<li>把这些链接盒子转换为行内块， 之后给父级指定  text-align:center;</li>
<li>利用行内块元素中间有缝隙，并且给父级添加 text-align:center; 行内块元素会水平会居中</li>
</ol>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1571522910580.png" alt="1571522910580"></p>
<h3 id="1-4-CSS-三角强化-案例"><a href="#1-4-CSS-三角强化-案例" class="headerlink" title="1.4. CSS 三角强化 案例"></a>1.4. CSS 三角强化 案例</h3><h4 id="1-4-1-原理"><a href="#1-4-1-原理" class="headerlink" title="1.4.1 原理"></a><strong>1.4.1 原理</strong></h4><p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1571550959181.png" alt="1571550959181"></p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1571551000391.png" alt="1571551000391"></p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1571548058053.png" alt="1571548058053"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    <span class="comment">/* 把上边框宽度调大 */</span></span></span><br><span class="line"><span class="css">    <span class="comment">/* border-top: 100px solid transparent;        border-right: 50px solid skyblue; */</span></span></span><br><span class="line"><span class="css">    <span class="comment">/* 左边和下边的边框宽度设置为0 */</span></span></span><br><span class="line"><span class="css">    <span class="comment">/* border-bottom: 0 solid blue;        border-left: 0 solid green; */</span></span></span><br><span class="line"><span class="css">    <span class="comment">/* 1.只保留右边的边框有颜色 */</span></span></span><br><span class="line"><span class="css">    <span class="attribute">border-color</span>: transparent red transparent transparent;</span></span><br><span class="line"><span class="css">    <span class="comment">/* 2. 样式都是solid */</span></span></span><br><span class="line"><span class="css">    <span class="attribute">border-style</span>: solid;</span></span><br><span class="line"><span class="css">    <span class="comment">/* 3. 上边框宽度要大， 右边框 宽度稍小， 其余的边框该为 0 */</span></span></span><br><span class="line"><span class="css">    <span class="attribute">border-width</span>: <span class="number">100px</span> <span class="number">50px</span> <span class="number">0</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-4-2-案例效果"><a href="#1-4-2-案例效果" class="headerlink" title="1.4.2 案例效果"></a>1.4.2 案例效果</h4><p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/1571548099631.png" alt="1571548099631"></p>
<h4 id="1-4-3-代码参考"><a href="#1-4-3-代码参考" class="headerlink" title="1**.4.3 代码参考**"></a>1**.4.3 代码参考**</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS三角强化的巧妙运用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.price</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">160px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">line-height</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.miaosha</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">      <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">90px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">      <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">font-weight</span>: <span class="number">700</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin-right</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.miaosha</span> <span class="selector-tag">i</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">      <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">border-color</span>: transparent <span class="number">#fff</span> transparent transparent;</span></span><br><span class="line"><span class="css">      <span class="attribute">border-style</span>: solid;</span></span><br><span class="line"><span class="css">      <span class="attribute">border-width</span>: <span class="number">24px</span> <span class="number">10px</span> <span class="number">0</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.origin</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">color</span>: gray;</span></span><br><span class="line"><span class="css">      <span class="attribute">text-decoration</span>: line-through;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;price&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;miaosha&quot;</span>&gt;</span> ¥1650 <span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> <span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;origin&quot;</span>&gt;</span>¥5650<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="十八-CSS-初始化"><a href="#十八-CSS-初始化" class="headerlink" title="十八. CSS 初始化"></a>十八. CSS 初始化</h2><p>不同浏览器对有些标签的默认值是不同的，为了消除不同浏览器对HTML文本呈现的差异，照顾浏览器的兼容，我们需要对CSS 初始化</p>
<p>简单理解： CSS初始化是指重设浏览器的样式。 (也称为CSS reset）</p>
<p>每个网页都必须首先进行 CSS初始化。</p>
<p>这里我们以 京东CSS初始化代码为例。</p>
<p><strong>Unicode编码字体：</strong></p>
<p>把中文字体的名称用相应的Unicode编码来代替，这样就可以有效的避免浏览器解释CSS代码时候出现乱码的问题。</p>
<p>比如：</p>
<p>黑体 \9ED1\4F53<br>宋体 \5B8B\4F53<br>微软雅黑 \5FAE\8F6F\96C5\9ED1</p>
<h2 id="十九-HTML5新特性"><a href="#十九-HTML5新特性" class="headerlink" title="十九.HTML5新特性"></a>十九.HTML5新特性</h2><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>HTML5 的新增特性主要是针对于以前的不足，增加了一些新的标签、新的表单和新的表单属性等。 </p>
<p>这些新特性都有兼容性问题，基本是 <strong>IE9+ 以上版本的浏览器</strong>才支持，如果不考虑兼容性问题，可以大量使用这些新特性。</p>
<h2 id="语义化标签-（★★）"><a href="#语义化标签-（★★）" class="headerlink" title="语义化标签 （★★）"></a>语义化标签 （★★）</h2><p>以前布局，我们基本用 div 来做。div 对于搜索引擎来说，是没有语义的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">“header”</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">“nav”</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">“content”</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">“footer”</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>发展到了HTML5后，新增了一些语义化标签，这样的话更加有利于浏览器的搜索引擎搜索，也方便了网站的seo（Search Engine Optimization，搜索引擎优化），下面就是新增的一些语义化标签</p>
<ul>
<li><code>&lt;header&gt;</code> 头部标签</li>
<li><code>&lt;nav&gt;</code> 导航标签</li>
<li><code>&lt;article&gt;</code> 内容标签</li>
<li><code>&lt;section&gt;</code> 定义文档某个区域</li>
<li><code>&lt;aside&gt;</code> 侧边栏标签</li>
<li><code>&lt;footer&gt;</code> 尾部标签</li>
</ul>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/http://www.qiyunzhou.top/images/docker/%E8%AF%AD%E4%B9%89%E5%8C%96%E6%A0%87%E7%AD%BE.png"></p>
<h2 id="多媒体标签"><a href="#多媒体标签" class="headerlink" title="多媒体标签"></a>多媒体标签</h2><p>多媒体标签分为 音频 <strong>audio</strong> 和视频 <strong>video</strong> 两个标签 使用它们，我们可以很方便的在页面中嵌入音频和视频，而不再去使用落后的flash和其他浏览器插件了。</p>
<p>因为多媒体标签的 属性、方法、事件比较多，因此我们需要什么功能的时候，就需要去查找相关的文档进行学习使用。</p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/http://www.qiyunzhou.top/images/docker/%E5%A4%9A%E5%AA%92%E4%BD%93%E6%A0%87%E7%AD%BE.png"></p>
<h3 id="视频标签-video（★★★）"><a href="#视频标签-video（★★★）" class="headerlink" title="视频标签- video（★★★）"></a>视频标签- video（★★★）</h3><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p>当前 <strong><video></strong> 元素支持三种视频格式： 尽量使用 <strong>mp4格式</strong></p>
<p><strong>使用语法：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;media/mi.mp4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/http://www.qiyunzhou.top/images/docker/video%E6%94%AF%E6%8C%81%E6%A0%BC%E5%BC%8F.png"></p>
<h4 id="兼容写法"><a href="#兼容写法" class="headerlink" title="兼容写法"></a>兼容写法</h4><p>由于各个浏览器的支持情况不同，所以我们会有一种兼容性的写法，这种写法了解一下即可</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span>  <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span>  <span class="attr">width</span>=<span class="string">&quot;300&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;move.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/ogg&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;move.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span> &gt;</span></span><br><span class="line">    您的浏览器暂不支持 <span class="tag">&lt;<span class="name">video</span>&gt;</span> 标签播放视频</span><br><span class="line">&lt;/ video &gt;</span><br></pre></td></tr></table></figure>

<p><strong>上面这种写法，浏览器会匹配video标签中的source，如果支持就播放，如果不支持往下匹配，直到没有匹配的格式，就提示文本</strong></p>
<h4 id="video-常用属性"><a href="#video-常用属性" class="headerlink" title="video 常用属性"></a>video 常用属性</h4><p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/http://www.qiyunzhou.top/images/docker/video%E5%B8%B8%E7%94%A8%E5%B1%9E%E6%80%A7.png"></p>
<p><strong>属性很多，有一些属性需要大家重点掌握：</strong></p>
<ul>
<li><code>autoplay</code>  自动播放<ul>
<li>注意： 在google浏览器上面，默认禁止了自动播放，如果想要自动播放的效果，需要设置 muted属性</li>
</ul>
</li>
<li><code>width</code>  宽度</li>
<li><code>height</code>  高度</li>
<li><code>loop</code>  循环播放</li>
<li><code>src</code>  播放源</li>
<li><code>muted</code> 静音播放</li>
</ul>
<p><strong>示例代码：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;media/mi.mp4&quot;</span> <span class="attr">autoplay</span>=<span class="string">&quot;autoplay&quot;</span> <span class="attr">muted</span>=<span class="string">&quot;muted&quot;</span>  <span class="attr">loop</span>=<span class="string">&quot;loop&quot;</span> <span class="attr">poster</span>=<span class="string">&quot;media/mi9.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="音频标签-audio"><a href="#音频标签-audio" class="headerlink" title="音频标签- audio"></a>音频标签- audio</h3><h4 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h4><p>当前 <strong><audio></strong> 元素支持三种视频格式： 尽量使用 <strong>mp3格式</strong></p>
<p><strong>使用语法：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;media/music.mp3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/http://www.qiyunzhou.top/images/docker/audio%E6%94%AF%E6%8C%81%E6%A0%BC%E5%BC%8F.png"></p>
<h4 id="兼容写法-1"><a href="#兼容写法-1" class="headerlink" title="兼容写法"></a>兼容写法</h4><p>由于各个浏览器的支持情况不同，所以我们会有一种兼容性的写法，这种写法了解一下即可</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt; audio controls=&quot;controls&quot;  &gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;happy.mp3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/mpeg&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;happy.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/ogg&quot;</span> &gt;</span></span><br><span class="line">    您的浏览器暂不支持 <span class="tag">&lt;<span class="name">audio</span>&gt;</span> 标签。</span><br><span class="line">&lt;/ audio&gt;</span><br></pre></td></tr></table></figure>

<p><strong>上面这种写法，浏览器会匹配audio标签中的source，如果支持就播放，如果不支持往下匹配，直到没有匹配的格式，就提示文本</strong></p>
<h4 id="audio-常用属性"><a href="#audio-常用属性" class="headerlink" title="audio 常用属性"></a>audio 常用属性</h4><p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/http://www.qiyunzhou.top/images/docker/audio%E5%B8%B8%E7%94%A8%E5%B1%9E%E6%80%A7.png"></p>
<p><strong>示例代码：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;media/music.mp3&quot;</span> <span class="attr">autoplay</span>=<span class="string">&quot;autoplay&quot;</span> <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul>
<li>音频标签和视频标签使用方式基本一致</li>
<li>浏览器支持情况不同</li>
<li>谷歌浏览器把音频和视频自动播放禁止了</li>
<li>我们可以给视频标签添加 muted 属性来静音播放视频，音频不可以（可以通过JavaScript解决）</li>
<li>视频标签是重点，我们经常设置自动播放，不使用 controls 控件，循环和设置大小属性</li>
</ul>
<h2 id="新增的表单元素-（★★）"><a href="#新增的表单元素-（★★）" class="headerlink" title="新增的表单元素 （★★）"></a>新增的表单元素 （★★）</h2><p>在H5中，帮我们新增加了很多类型的表单，这样方便了程序员的开发</p>
<p><strong>课堂案例：在这个案例中，熟练了新增表单的用法</strong></p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/http://www.qiyunzhou.top/images/docker/input%E6%A1%88%E4%BE%8B.png"></p>
<p><strong>案例代码：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 我们验证的时候必须添加form表单域 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>邮箱: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>网址: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;url&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>日期: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>时间: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;time&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>数量: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>手机号码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;tel&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>搜索: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>颜色: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;color&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 当我们点击提交按钮就可以验证表单了 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <strong>常见输入类型</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">text password radio checkbox button file hidden submit reset image</span><br></pre></td></tr></table></figure>

<p><strong>新的输入类型</strong></p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/http://www.qiyunzhou.top/images/docker/%E6%96%B0%E5%A2%9Einput%E8%A1%A8%E5%8D%95.png"></p>
<p>类型很多，我们现阶段<strong>重点记忆三个</strong>： <strong><code>number</code>   <code>tel</code>   <code>search</code></strong></p>
<h2 id="二十-CSS3新特性"><a href="#二十-CSS3新特性" class="headerlink" title="二十.CSS3新特性"></a>二十.CSS3新特性</h2><h3 id="1-1-CSS3-的现状"><a href="#1-1-CSS3-的现状" class="headerlink" title="1.1 CSS3 的现状"></a>1.1 CSS3 的现状</h3><ul>
<li>新增的CSS3特性有兼容性问题，ie9+才支持</li>
<li>移动端支持优于 PC 端 </li>
<li>不断改进中 </li>
<li>应用相对广泛</li>
<li>现阶段主要学习：新增选择器和盒子模型以及其他特性 </li>
</ul>
<h3 id="1-2-CSS3-新增选择器"><a href="#1-2-CSS3-新增选择器" class="headerlink" title="1.2 CSS3  新增选择器"></a>1.2 CSS3  新增选择器</h3><p>CSS3 给我们新增了选择器，可以更加便捷，更加自由的选择目标元素。 </p>
<ul>
<li>属性选择器</li>
<li>结构伪类选择器</li>
<li>伪元素选择器</li>
</ul>
<h4 id="1-2-1-属性选择器（★★）"><a href="#1-2-1-属性选择器（★★）" class="headerlink" title="1.2.1 属性选择器（★★）"></a>1.2.1 属性选择器（★★）</h4><p>属性选择器，按照字面意思，都是根据标签中的属性来选择元素</p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/http://www.qiyunzhou.top/images/docker/%E5%B1%9E%E6%80%A7%E9%80%89%E6%8B%A9%E5%99%A8.png"></p>
<p><strong>示例代码：</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 只选择 type =text 文本框的input 选取出来 */</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=text]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 选择首先是div 然后 具有class属性 并且属性值 必须是 icon开头的这些元素</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[class^=icon]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 选择首先是section 然后 具有class属性 并且属性值 必须是 data结尾的这些元素 */</span></span><br><span class="line"><span class="selector-tag">section</span><span class="selector-attr">[class$=data]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>:</span><br><span class="line">    blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>属性选择器，按照字面意思，都是根据标签中的属性来选择元素</li>
<li>属性选择器可以根据元素特定属性的来选择元素。 这样就可以不用借助于类或者id选择器</li>
<li>属性选择器也可以选择出来自定义的属性</li>
<li><strong>注意：</strong>类选择器、属性选择器、伪类选择器，权重为 10。</li>
</ul>
<h4 id="1-2-2-结构伪类选择器"><a href="#1-2-2-结构伪类选择器" class="headerlink" title="1.2.2 结构伪类选择器"></a>1.2.2 结构伪类选择器</h4><p>结构伪类选择器主要根据文档结构来选择器元素， 常用于根据父级选择器里面的子元素</p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/http://www.qiyunzhou.top/images/docker/%E7%BB%93%E6%9E%84%E4%BC%AA%E7%B1%BB%E9%80%89%E6%8B%A9%E5%99%A8-01.png"></p>
<h4 id="1-2-3-E-first-child"><a href="#1-2-3-E-first-child" class="headerlink" title="1.2.3 E:first-child"></a>1.2.3 E:first-child</h4><p>匹配父元素的第一个子元素E</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css">    <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first</span>-child&#123;      <span class="attribute">background-color</span>: red;    &#125;  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span>  <span class="tag">&lt;<span class="name">ul</span>&gt;</span>    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项一<span class="tag">&lt;/<span class="name">li</span>&gt;</span>    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项二<span class="tag">&lt;/<span class="name">li</span>&gt;</span>    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项三<span class="tag">&lt;/<span class="name">li</span>&gt;</span>    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项四<span class="tag">&lt;/<span class="name">li</span>&gt;</span>  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/http://www.qiyunzhou.top/images/docker/first-child.png"></p>
<p><strong>E:last-child</strong>  则是选择到了最后一个li标签</p>
<h4 id="E-nth-child-n-（★★★）"><a href="#E-nth-child-n-（★★★）" class="headerlink" title="E:nth-child(n)（★★★）"></a>E:nth-child(n)（★★★）</h4><p>匹配到父元素的第n个元素</p>
<ul>
<li><p>匹配到父元素的第2个子元素  </p>
<p><code>ul li:nth-child(2)&#123;&#125;</code></p>
</li>
<li><p>匹配到父元素的序号为奇数的子元素</p>
<p><code>ul li:nth-child(odd)&#123;&#125;</code>    <strong>odd</strong> 是关键字  奇数的意思（3个字母 ）</p>
</li>
<li><p>匹配到父元素的序号为偶数的子元素</p>
<p><code>ul li:nth-child(even)&#123;&#125;</code>   <strong>even</strong>（4个字母 ）</p>
</li>
<li><p><strong>匹配到父元素的前3个子元素</strong></p>
<p><code>ul li:nth-child(-n+3)&#123;&#125;</code>    </p>
<p>选择器中的  <strong>n</strong> 是怎么变化的呢？</p>
<p>因为 n是从 0 ，1，2，3.. 一直递增</p>
<p>所以 -n+3 就变成了   </p>
<ul>
<li>n=0 时   -0+3=3</li>
<li>n=1时    -1+3=2</li>
<li>n=2时    -2+3=1</li>
<li>n=3时    -3+3=0 </li>
<li>…</li>
</ul>
</li>
</ul>
<p><strong>一些常用的公式： 公式不是死的，在这里列举出来让大家能够找寻到这个模式，能够理解代码，这样才能写出满足自己功能需求的代码</strong></p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/http://www.qiyunzhou.top/images/docker/nth-child%E5%85%AC%E5%BC%8F.png"></p>
<p><strong>常用的结构伪类选择器是：</strong> <code>nth-child(n) &#123;...&#125;</code></p>
<h4 id="E-nth-child-与-E-nth-of-type-的区别"><a href="#E-nth-child-与-E-nth-of-type-的区别" class="headerlink" title="E:nth-child 与 E:nth-of-type 的区别"></a>E:nth-child 与 E:nth-of-type 的区别</h4><p>这里只讲明  <strong>E:nth-child(n)</strong>  和 <strong>E:nth-of-type(n)</strong>  的区别  剩下的 <strong>E:first-of-type</strong>     <strong>E:last-of-type</strong>  <strong>E:nth-last-of-type(n)</strong>   同理做推导即可</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="css">      <span class="comment">/* 字体变成红色 */</span></span></span><br><span class="line"><span class="css">      <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="css">      <span class="comment">/* 背景变成绿色 */</span></span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项一<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>乱来的p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项二<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项三<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项四<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/http://www.qiyunzhou.top/images/docker/nth-child%E4%B8%8Enth-of-type%E5%8C%BA%E5%88%AB.png"></p>
<p>也就是说：</p>
<ul>
<li><code>E:nth-child(n)</code>     匹配父元素的第n个子元素E，也就是说，nth-child 对父元素里面所有孩子排序选择（序号是固定的）  先找到第n个孩子，然后看看是否和E匹配</li>
<li><code>E:nth-of-type(n)</code> 匹配同类型中的第n个同级兄弟元素E，也就是说，对父元素里面指定子元素进行排序选择。 先去匹配E ，然后再根据E 找第n个孩子</li>
</ul>
<h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><ul>
<li>结构伪类选择器一般用于选择父级里面的第几个孩子</li>
<li>nth-child 对父元素里面所有孩子排序选择（序号是固定的）  先找到第n个孩子，然后看看是否和E匹配</li>
<li>nth-of-type 对父元素里面指定子元素进行排序选择。 先去匹配E ，然后再根据E 找第n个孩子</li>
<li>关于 nth-child（n） 我们要知道 n 是从 0 开始计算的，要记住常用的公式</li>
<li>如果是无序列表，我们肯定用 nth-child 更多</li>
<li>类选择器、属性选择器、伪类选择器，权重为 10</li>
</ul>
<h4 id="1-2-4-伪元素选择器（★★★）"><a href="#1-2-4-伪元素选择器（★★★）" class="headerlink" title="1.2.4 伪元素选择器（★★★）"></a>1.2.4 伪元素选择器（★★★）</h4><p>伪元素选择器可以帮助我们利用CSS创建新标签元素，而不需要HTML标签，从而简化HTML结构</p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/http://www.qiyunzhou.top/images/docker/%E4%BC%AA%E5%85%83%E7%B4%A0.png"></p>
<p><strong>示例demo</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  <span class="comment">/* div::before 权重是2 */</span></span></span><br><span class="line"><span class="css">  <span class="selector-tag">div</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="comment">/* 这个content是必须要写的 */</span></span></span><br><span class="line"><span class="css">    <span class="attribute">content</span>: <span class="string">&#x27;我&#x27;</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">content</span>: <span class="string">&#x27;小猪佩奇&#x27;</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span> 是 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>before 和 after 创建一个元素，但是属于行内元素</li>
<li>新创建的这个元素在文档树中是找不到的，所以我们称为伪元素</li>
<li>语法：  element::before {}   </li>
<li>before 和 after 必须有 content 属性 </li>
<li>before 在父元素内容的前面创建元素，after 在父元素内容的后面插入元素<br>伪元素选择器和标签选择器一样，权重为 1</li>
</ul>
<h4 id="应用场景一：-字体图标"><a href="#应用场景一：-字体图标" class="headerlink" title="应用场景一： 字体图标"></a>应用场景一： 字体图标</h4><p>在实际工作中，字体图标基本上都是用伪元素来实现的，好处在于我们不需要在结构中额外去定义字体图标的标签，通过content属性来设置字体图标的 编码</p>
<p><strong>步骤：</strong></p>
<ul>
<li>结构中定义div盒子</li>
<li>在style中先申明字体  @font-face</li>
<li>在style中定义after伪元素 div::after{…}</li>
<li>在after伪元素中 设置content属性，属性的值就是字体编码</li>
<li>在after伪元素中 设置font-family的属性</li>
<li>利用定位的方式，让伪元素定位到相应的位置；记住定位口诀：子绝父相</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> ... <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="keyword">@font-face</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">font-family</span>: <span class="string">&#x27;icomoon&#x27;</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.eot?1lv3na&#x27;</span>);</span></span><br><span class="line"><span class="css">      <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.eot?1lv3na#iefix&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;embedded-opentype&#x27;</span>), <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.ttf?1lv3na&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;truetype&#x27;</span>), <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.woff?1lv3na&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>), <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.svg?1lv3na#icomoon&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;svg&#x27;</span>);</span></span><br><span class="line"><span class="css">      <span class="attribute">font-weight</span>: normal;</span></span><br><span class="line"><span class="css">      <span class="attribute">font-style</span>: normal;</span></span><br><span class="line"><span class="css">      <span class="attribute">font-display</span>: block;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">      <span class="attribute">top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">font-family</span>: <span class="string">&#x27;icomoon&#x27;</span>;</span></span><br><span class="line"><span class="css">      <span class="comment">/* content: &#x27;&#x27;; */</span></span></span><br><span class="line"><span class="css">      <span class="attribute">content</span>: <span class="string">&#x27;\e91e&#x27;</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">      <span class="attribute">font-size</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="应用场景二：-仿土豆效果"><a href="#应用场景二：-仿土豆效果" class="headerlink" title="应用场景二： 仿土豆效果"></a>应用场景二： 仿土豆效果</h4><p>把之前的代码进行了改善</p>
<p><strong>步骤：</strong></p>
<ul>
<li>找到之前写过的仿土豆的结构和样式，拷贝到自己的页面中</li>
<li>删除之前的mask遮罩</li>
<li>在style中，给大的div盒子（类名叫tudou的），设置 before伪元素</li>
<li>这个伪元素充当的是遮罩的角色，所以我们不用设置内容，但是需要设置content属性，属性的值为空字符串</li>
<li>给这个遮罩设置宽高，背景颜色，默认是隐藏的</li>
<li>当鼠标移入到 div盒子时候，让遮罩显示，利用 hover 来实现</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> ... <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.tudou</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">444px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">320px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin</span>: <span class="number">30px</span> auto;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.tudou</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.tudou</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="css">      <span class="comment">/* 隐藏遮罩层 */</span></span></span><br><span class="line"><span class="css">      <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">      <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">4</span>) <span class="built_in">url</span>(<span class="string">images/arr.png</span>) no-repeat center;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="comment">/* 当我们鼠标经过了 土豆这个盒子，就让里面before遮罩层显示出来 */</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.tudou</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="comment">/* 而是显示元素 */</span></span></span><br><span class="line"><span class="css">      <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tudou&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/tudou.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tudou&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/tudou.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tudou&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/tudou.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tudou&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/tudou.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="应用场景三：-清除浮动"><a href="#应用场景三：-清除浮动" class="headerlink" title="应用场景三： 清除浮动"></a>应用场景三： 清除浮动</h4><p>回忆一下清除浮动的方式：</p>
<ul>
<li>额外标签法也称为隔墙法，是 W3C 推荐的做法。</li>
<li>父级添加 overflow 属性</li>
<li>父级添加after伪元素</li>
<li>父级添加双伪元素</li>
</ul>
<p><strong>额外标签法</strong>也称为隔墙法，是 W3C 推荐的做法</p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/http://www.qiyunzhou.top/images/docker/%E9%A2%9D%E5%A4%96%E6%A0%87%E7%AD%BE%E6%B3%95.png"></p>
<p><strong>注意：</strong> 要求这个新的空标签必须是块级元素</p>
<p>后面两种伪元素清除浮动算是第一种额外标签法的一个<strong>升级</strong>和<strong>优化</strong></p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/http://www.qiyunzhou.top/images/docker/%E5%8D%95%E4%BC%AA%E5%85%83%E7%B4%A0.png"></p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/http://www.qiyunzhou.top/images/docker/%E5%8F%8C%E4%BC%AA%E5%85%83%E7%B4%A0.png"></p>
<h3 id="1-3-盒子模型（★★★）"><a href="#1-3-盒子模型（★★★）" class="headerlink" title="1.3 盒子模型（★★★）"></a>1.3 盒子模型（★★★）</h3><p>CSS3 中可以通过 box-sizing 来指定盒模型，有2个值：即可指定为 content-box、border-box，这样我们计算盒子大小的方式就发生了改变</p>
<p>可以分成两种情况：</p>
<ul>
<li>box-sizing: content-box  盒子大小为 width + padding + border  （以前默认的）</li>
<li>box-sizing: border-box  盒子大小为 width</li>
</ul>
<p>如果盒子模型我们改为了box-sizing: border-box  ， 那padding和border就不会撑大盒子了（前提padding和border不会超过width宽度）</p>
<h3 id="1-4-其他特性（★）"><a href="#1-4-其他特性（★）" class="headerlink" title="1.4 其他特性（★）"></a>1.4 其他特性（★）</h3><h4 id="1-1-图标变模糊-–-CSS3滤镜filter"><a href="#1-1-图标变模糊-–-CSS3滤镜filter" class="headerlink" title="1.1 图标变模糊  – CSS3滤镜filter"></a>1.1 图标变模糊  – CSS3滤镜filter</h4><p>filter CSS属性将模糊或颜色偏移等图形效果应用于元素</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">filter</span>:   函数(); --&gt;  例如： <span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">5px</span>);  --&gt;  blur模糊处理  数值越大越模糊</span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/http://www.qiyunzhou.top/images/docker/filter.png"></p>
<h4 id="1-2-计算盒子宽度-–-calc-函数"><a href="#1-2-计算盒子宽度-–-calc-函数" class="headerlink" title="1.2 计算盒子宽度 – calc 函数"></a>1.2 计算盒子宽度 – calc 函数</h4><p>calc() 此CSS函数让你在声明CSS属性值时执行一些计算</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">80px</span>);</span><br></pre></td></tr></table></figure>

<p>括号里面可以使用 + - *  / 来进行计算</p>
<p><font color='red'>注意：中间要有空格</font></p>
<h4 id="1-3-CSS3-过渡（★★★）"><a href="#1-3-CSS3-过渡（★★★）" class="headerlink" title="1.3 CSS3 过渡（★★★）"></a>1.3 CSS3 过渡（★★★）</h4><p>过渡（transition)是CSS3中具有颠覆性的特征之一，我们可以在不使用 Flash 动画或 JavaScript 的情况下，当元素从一种样式变换为另一种样式时为元素添加效果。</p>
<p><strong>过渡动画：</strong> 是从一个状态 渐渐的过渡到另外一个状态</p>
<p>可以让我们页面更好看，更动感十足，虽然 低版本浏览器不支持（ie9以下版本） 但是不会影响页面布局。</p>
<p>我们现在经常和 :hover 一起 搭配使用。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transition</span>: 要过渡的属性  花费时间  运动曲线  何时开始;</span><br></pre></td></tr></table></figure>

<ul>
<li>属性 ： 想要变化的 css 属性， 宽度高度 背景颜色 内外边距都可以 。如果想要所有的属性都变化过渡， 写一个all 就可以</li>
<li>花费时间： 单位是 秒（必须写单位） 比如 0.5s </li>
<li>运动曲线： 默认是 ease （可以省略）</li>
<li>何时开始：单位是 秒（必须写单位）可以设置延迟触发时间  默认是 0s  （可以省略）</li>
<li><strong>后面两个属性可以省略</strong></li>
<li><strong>记住过渡的使用口诀： 谁做过渡给谁加</strong></li>
</ul>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/http://www.qiyunzhou.top/images/docker/%E8%BF%90%E5%8A%A8%E6%9B%B2%E7%BA%BF.png"></p>
<h4 id="过渡练习"><a href="#过渡练习" class="headerlink" title="过渡练习"></a>过渡练习</h4><p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/http://www.qiyunzhou.top/images/docker/%E8%BF%9B%E5%BA%A6%E6%9D%A1.png"></p>
<p>步骤：</p>
<ul>
<li>创建两个div的盒子，属于的嵌套关系，外层类名叫 bar，里层类名叫 bar_in</li>
<li>给外层的bar 这个盒子设置边框，宽高，圆角边框</li>
<li>给里层的bar_in  设置 初试的宽度，背景颜色，过渡效果</li>
<li>给外层的 bar 添加 hover事件，当触发了hover事件 让里层的bar_in 来进行宽度的变化</li>
</ul>
<p>代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> ... <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.bar</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="css">      <span class="attribute">border-radius</span>: <span class="number">7px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">padding</span>: <span class="number">1px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.bar_in</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css">      <span class="comment">/* 谁做过渡给谁加 */</span></span></span><br><span class="line"><span class="css">      <span class="attribute">transition</span>: all .<span class="number">7s</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.bar</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.bar_in</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bar&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bar_in&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="广义H5说法-了解"><a href="#广义H5说法-了解" class="headerlink" title="广义H5说法 了解"></a>广义H5说法 了解</h3><h4 id="狭隘H5"><a href="#狭隘H5" class="headerlink" title="狭隘H5"></a>狭隘H5</h4><p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/http://www.qiyunzhou.top/images/docker/%E5%B9%BF%E4%B9%89H5.png"></p>
<h4 id="广义H5"><a href="#广义H5" class="headerlink" title="广义H5"></a>广义H5</h4><ul>
<li>广义的 HTML5 是 HTML5 本身 + CSS3 + JavaScript 。</li>
<li>这个集合有时称为 HTML5 和朋友，通常缩写为 HTML5 。</li>
<li>虽然 HTML5 的一些特性仍然不被某些浏览器支持，但是它是一种发展趋势。</li>
<li>HTML5 MDN 介绍：<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/HTML/HTML">https://developer.mozilla.org/zh-CN/docs/Web/Guide/HTML/HTML</a></li>
</ul>
<h3 id="1-5-2D转换"><a href="#1-5-2D转换" class="headerlink" title="1.5 2D转换"></a>1.5 2D转换</h3><h4 id="1-5-1-2D-转换之移动-translate"><a href="#1-5-1-2D-转换之移动-translate" class="headerlink" title="1.5.1 2D 转换之移动 translate"></a>1.5.1 2D 转换之移动 translate</h4><p><strong>转换（transform）</strong>是CSS3中具有颠覆性的特征之一，可以实现元素的位移、旋转、缩放等效果 （transform）你可以简单理解为变形</p>
<ul>
<li>移动：translate</li>
<li>旋转：rotate</li>
<li>缩放：scale</li>
</ul>
<p>2D移动是2D转换里面的一种功能，可以改变元素在页面中的位置，类似定位。</p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/http://www.qiyunzhou.top/images/docker/images/2d-1.png"></p>
<p>1.5.1.1 语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(x,y); 或者分开写</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateX</span>(n);</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateY</span>(n)</span><br></pre></td></tr></table></figure>

<p>1.5.1.2 重点</p>
<ul>
<li>定义 2D 转换中的移动，沿着 X 和 Y 轴移动元素</li>
<li>translate最大的优点：不会影响到其他元素的位置</li>
<li>translate中的百分比单位是相对于自身元素的 translate:(50%,50%)</li>
<li>对行内标签没有效果</li>
</ul>
<h4 id="1-5-2-2D-转换之旋转-rotate"><a href="#1-5-2-2D-转换之旋转-rotate" class="headerlink" title="1.5.2 2D 转换之旋转 rotate"></a>1.5.2 2D 转换之旋转 rotate</h4><p>1.5.2.1 语法</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform</span>:<span class="built_in">rotate</span>(度数）</span><br></pre></td></tr></table></figure>

<p>1.5.2.2 重点</p>
<ul>
<li>rotate里面跟度数， 单位是 <strong>deg</strong> 比如 rotate(45deg)</li>
<li>角度为正时，顺时针，负时，为逆时针</li>
<li>默认旋转的中心点是元素的中心点</li>
</ul>
<p>1.5.2.3 demo</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="1-5-3-2D-转换中心点-transform-origin"><a href="#1-5-3-2D-转换中心点-transform-origin" class="headerlink" title="1.5.3 2D 转换中心点 transform-origin"></a>1.5.3 2D 转换中心点 transform-origin</h4><p>1.5.3.1 语法</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform-origin</span>: x y;</span><br></pre></td></tr></table></figure>

<p>1.5.3.2 重点</p>
<ul>
<li>注意后面的参数 x 和 y 用空格隔开</li>
<li>x y 默认转换的中心点是元素的中心点 (50% 50%)</li>
<li>还可以给x y 设置 像素 或者 方位名词 （top bottom left right center</li>
</ul>
<h4 id="1-5-4-2D-转换之缩放scale"><a href="#1-5-4-2D-转换之缩放scale" class="headerlink" title="1.5.4 2D 转换之缩放scale"></a>1.5.4 2D 转换之缩放scale</h4><p>1.5.4.1 语法</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform</span>:<span class="built_in">scale</span>(x,y);</span><br></pre></td></tr></table></figure>

<p>1.5.4.2 重点</p>
<ul>
<li>注意其中的x和y用逗号分隔</li>
<li>transform:scale(1,1) ：宽和高都放大一倍，相对于没有放大</li>
<li>transform:scale(2,2) ：宽和高都放大了2倍</li>
<li>transform:scale(2) ：只写一个参数，第二个参数则和第一个参数一样，相当于 scale(2,2)</li>
<li>transform:scale(0.5,0.5)：缩小一倍</li>
<li>sacle缩放最大的优势：可以设置转换中心点缩放，默认以中心点缩放的，而且不影响其他盒子</li>
</ul>
<h4 id="1-5-5-2D-转换综合写法"><a href="#1-5-5-2D-转换综合写法" class="headerlink" title="1.5.5 2D 转换综合写法"></a>1.5.5 2D 转换综合写法</h4><ol>
<li><p>同时使用多个转换，其格式为：transform: translate() rotate() scale() …等， </p>
</li>
<li><p>其顺序会影转换的效果。（先旋转会改变坐标轴方向）</p>
</li>
<li><p><strong>当我们同时有位移和其他属性的时候，记得要将位移放到最前面</strong></p>
</li>
</ol>
<h4 id="1-5-6-总结"><a href="#1-5-6-总结" class="headerlink" title="1.5.6 总结"></a>1.5.6 总结</h4><ul>
<li>转换transform 我们简单理解就是变形 有2D 和 3D 之分</li>
<li>我们暂且学了三个 分别是 位移 旋转 和 缩放</li>
<li>2D 移动 translate(x, y) 最大的优势是不影响其他盒子， 里面参数用%，是相对于自身宽度和高度来计算的</li>
<li>可以分开写比如 translateX(x) 和 translateY(y)</li>
<li>2D 旋转 rotate(度数) 可以实现旋转元素 度数的单位是deg</li>
<li>2D 缩放 sacle(x,y) 里面参数是数字 不跟单位 可以是小数 最大的优势 不影响其他盒子</li>
<li>设置转换中心点 transform-origin : x y; 参数可以百分比、像素或者是方位名词</li>
<li><strong>当我们进行综合写法，同时有位移和其他属性的时候，记得要将位移放到最前</strong></li>
</ul>
<h3 id="1-6-动画"><a href="#1-6-动画" class="headerlink" title="1.6 动画"></a>1.6 动画</h3><h4 id="1-6-1-动画的基本使用"><a href="#1-6-1-动画的基本使用" class="headerlink" title="1.6.1  动画的基本使用"></a>1.6.1  动画的基本使用</h4><p>制作动画分为两步： 1.先定义动画     2.再使用（调用）动画</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 用keyframes 定义动画（类似定义类选择器） */</span></span><br><span class="line"><span class="keyword">@keyframes</span> 动画名称 &#123;</span><br><span class="line"> <span class="number">0%</span>&#123;</span><br><span class="line"> <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line"> &#125; </span><br><span class="line"> <span class="number">100%</span>&#123;</span><br><span class="line"> <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-6-2-动画序列"><a href="#1-6-2-动画序列" class="headerlink" title="1.6.2 动画序列"></a>1.6.2 <strong><font color='red'>动画序列</font></strong></h4><ul>
<li>0% 是动画的开始，100% 是动画的完成。这样的规则就是动画序列。</li>
<li>在 @keyframes 中规定某项 CSS 样式，就能创建由当前样式逐渐改为新样式的动画效果。</li>
<li>动画是使元素从一种样式逐渐变化为另一种样式的效果。您可以改变任意多的样式任意多的次数。</li>
<li>请用百分比来规定变化发生的时间，或用关键词 “from” 和 “to”，等同于 0% 和 100%</li>
</ul>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>@keyframes</strong></td>
<td align="left"><strong>规定动画</strong></td>
</tr>
<tr>
<td align="left">animation</td>
<td align="left">所有动画属性的简写属性，除了animation-play-state属性</td>
</tr>
<tr>
<td align="left"><strong>animation-name</strong></td>
<td align="left"><strong>规定@keyframes动画的名称。（必须的）</strong></td>
</tr>
<tr>
<td align="left"><strong>animation-duration</strong></td>
<td align="left"><strong>规定动画完成一个周期所花费的秒或毫秒，默认是0。（必须的）</strong></td>
</tr>
<tr>
<td align="left">animation-timing-function</td>
<td align="left">规定动画的速度曲线，默认是“ease”</td>
</tr>
<tr>
<td align="left">animation-delay</td>
<td align="left">规定动画何时开始，默认是0</td>
</tr>
<tr>
<td align="left">animation-iteration-count</td>
<td align="left">规定动画被播放的次数，默认是1，还有infinite</td>
</tr>
<tr>
<td align="left">animation-direction</td>
<td align="left">规定动画是否在下一周期逆向播放，默认是“normal“,alternate逆播放</td>
</tr>
<tr>
<td align="left">animation-play-state</td>
<td align="left">规定动画是否正在运行或暂停。默认是”running”,还有”paused”</td>
</tr>
<tr>
<td align="left">animation-fill-mode</td>
<td align="left">规定动画结束后状态，保持forwards回到起始backward</td>
</tr>
</tbody></table>
<h4 id="1-6-3-动画简写属性"><a href="#1-6-3-动画简写属性" class="headerlink" title="1.6.3 动画简写属性"></a>1.6.3 动画简写属性</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">animation</span>：动画名称 持续时间 运动曲线 何时开始 播放次数 是否反方向 动画起始或者结束的状</span><br><span class="line"><span class="attribute">animation</span>: myfirst <span class="number">5s</span> linear <span class="number">2s</span> infinite alternate</span><br></pre></td></tr></table></figure>

<h4 id="1-6-4-速度曲线细节"><a href="#1-6-4-速度曲线细节" class="headerlink" title="1.6.4 速度曲线细节"></a>1.6.4 速度曲线细节</h4><table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>linear</td>
<td>动画从头到尾的速度是相同的。匀速</td>
</tr>
<tr>
<td>ease</td>
<td>默认。动画以低速开始，然后加快，在结束前变慢。</td>
</tr>
<tr>
<td>ease-in</td>
<td>动画以低速开始。</td>
</tr>
<tr>
<td>ease-out</td>
<td>动画以低速结束。</td>
</tr>
<tr>
<td>ease-in-out</td>
<td>动画以低速开始和结束。</td>
</tr>
<tr>
<td>steps()</td>
<td>指定了时间函数中的间隔数量（步长）</td>
</tr>
</tbody></table>
<h3 id="1-7-3D-转换"><a href="#1-7-3D-转换" class="headerlink" title="1.7 3D 转换"></a>1.7 3D 转换</h3><ul>
<li>3D位移: translate3d(x,y,z)</li>
<li>3D旋转: rotate3d(x,y,z)</li>
<li>透视: perspective</li>
<li>3D呈现 transfrom-style</li>
</ul>
<h4 id="1-7-1-特点"><a href="#1-7-1-特点" class="headerlink" title="1.7.1 特点"></a>1.7.1 特点</h4><ul>
<li>近大远小。</li>
<li>物体后面遮挡不可见</li>
</ul>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/http://www.qiyunzhou.top/images/docker/images/3d-1.png"></p>
<h4 id="1-7-2-三维坐标系"><a href="#1-7-2-三维坐标系" class="headerlink" title="1.7.2 三维坐标系"></a>1.7.2 三维坐标系</h4><ul>
<li>x轴：水平向右 注意： x 右边是正值，左边是负值</li>
<li>y轴：垂直向下 注意： y 下面是正值，上面是负值</li>
<li>z轴：垂直屏幕 注意： 往外面是正值，往里面是负</li>
</ul>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/http://www.qiyunzhou.top/images/docker/images/3d-2.png"></p>
<h4 id="1-7-3-3D移动-translate3d"><a href="#1-7-3-3D移动-translate3d" class="headerlink" title="1.7.3 3D移动 translate3d"></a>1.7.3 3D移动 translate3d</h4><p>3D移动在2D移动的基础上多加了一个可以移动的方向，就是z轴方向。</p>
<ul>
<li>translform:translateX(100px)：仅仅是在x轴上移动</li>
<li>translform:translateY(100px)：仅仅是在Y轴上移动</li>
<li>translform:translateZ(100px)：仅仅是在Z轴上移动（注意：translateZ一般用px单位）</li>
<li>transform:translate3d(x,y,z)：其中 x、y、z 分别指要移动的轴的方向的距离 </li>
</ul>
<p>因为z轴是垂直屏幕，由里指向外面，所以默认是看不到元素在z轴的方向上移动</p>
<h4 id="1-7-4-透视-perspective"><a href="#1-7-4-透视-perspective" class="headerlink" title="1.7.4 透视 perspective"></a>1.7.4 透视 perspective</h4><p>在2D平面产生近大远小视觉立体，但是只是效果二维的</p>
<ul>
<li>如果想要在网页产生3D效果需要透视（理解成3D物体投影在2D平面内）。</li>
<li>模拟人类的视觉位置，可认为安排一只眼睛去看 - 透视我们也称为视距：视距就是人的眼睛到屏幕的距离</li>
<li>距离视觉点越近的在电脑平面成像越大，越远成像越小 - 透视的单位是像素</li>
</ul>
<p><font color='red'><strong>透视写在被观察元素的父盒子上面的</strong><br></font></p>
<p>d：就是视距，视距就是一个距离人的眼睛到屏幕的距离。 </p>
<p>z：就是 z轴，物体距离屏幕的距离，z轴越大（正值） 我们看到的物体就越大。</p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/http://www.qiyunzhou.top/images/docker/images/3d-3.png"></p>
<h4 id="1-7-5-translateZ"><a href="#1-7-5-translateZ" class="headerlink" title="1.7.5 translateZ"></a>1.7.5 translateZ</h4><p>translform:translateZ(100px)：仅仅是在Z轴上移动。 有了透视，就能看到translateZ 引起的变化了 </p>
<ul>
<li>translateZ：近大远小</li>
<li>translateZ：往外是正值</li>
<li>translateZ：往里是负值</li>
</ul>
<h4 id="1-7-6-3D旋转-rotate3d"><a href="#1-7-6-3D旋转-rotate3d" class="headerlink" title="1.7.6 3D旋转 rotate3d"></a>1.7.6 3D旋转 rotate3d</h4><p>3D旋转指可以让元素在三维平面内沿着 x轴，y轴，z轴或者自定义轴进行旋转</p>
<ul>
<li>transform:rotateX(45deg)：沿着x轴正方向旋转 45度</li>
<li>transform:rotateY(45deg) ：沿着y轴正方向旋转 45deg</li>
<li>transform:rotateZ(45deg) ：沿着Z轴正方向旋转 45deg</li>
<li>transform:rotate3d(x,y,z,deg)： 沿着自定义轴旋转 deg为角度（了解即可）</li>
</ul>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/http://www.qiyunzhou.top/images/docker/images/3d-4.png"></p>
<h4 id="1-7-7-3D旋转-rotate3d"><a href="#1-7-7-3D旋转-rotate3d" class="headerlink" title="1.7.7 3D旋转 rotate3d"></a>1.7.7 3D旋转 rotate3d</h4><p>对于元素旋转的方向的判断 我们需要先学习一个左手准则</p>
<ul>
<li>左手的手拇指指向 x轴的正方向</li>
<li>其余手指的弯曲方向就是该元素沿着x轴旋转的方向</li>
</ul>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/http://www.qiyunzhou.top/images/docker/images/3d-5.png"></p>
<h4 id="1-7-8-3D旋转-rotate3d"><a href="#1-7-8-3D旋转-rotate3d" class="headerlink" title="1.7.8 3D旋转 rotate3d"></a>1.7.8 3D旋转 rotate3d</h4><p>transform:rotate3d(x,y,z,deg)： 沿着自定义轴旋转 deg为角度</p>
<p>xyz是表示旋转轴的矢量，是标示你是否希望沿着该轴旋转，最后一个标示旋转的角度</p>
<ul>
<li>transform:rotate3d(1,0,0,45deg) 就是沿着x轴旋转 45deg</li>
<li>transform:rotate3d(1,1,0,45deg) 就是沿着对角线旋转 45de</li>
</ul>
<h4 id="1-7-9-3D呈现-transfrom-style"><a href="#1-7-9-3D呈现-transfrom-style" class="headerlink" title="1.7.9 3D呈现 transfrom-style"></a>1.7.9 3D呈现 transfrom-style</h4><ul>
<li>控制子元素是否开启三维立体环境。。</li>
<li>transform-style: flat 子元素不开启3d立体空间 默认的</li>
<li>transform-style: preserve-3d; 子元素开启立体空间</li>
<li>代码写给父级，但是影响的是子盒子</li>
<li>这个属性很重要，后面必用</li>
</ul>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/http://www.qiyunzhou.top/images/docker/images/3d-6.png"></p>
<h4 id="1-8-浏览器私有前缀"><a href="#1-8-浏览器私有前缀" class="headerlink" title="1.8 浏览器私有前缀"></a>1.8 浏览器私有前缀</h4><p>浏览器私有前缀是为了兼容老版本的写法，比较新版本的浏览器无须添加</p>
<ol>
<li>私有前缀</li>
</ol>
<ul>
<li>-moz-：代表 firefox 浏览器私有属性</li>
<li>-ms-：代表 ie 浏览器私有属性</li>
<li>-webkit-：代表 safari、chrome 私有属性</li>
<li>-o-：代表 Opera 私有</li>
</ul>
<ol start="2">
<li>提倡的写法</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">-moz-<span class="attribute">border-radius</span>: <span class="number">10px</span>; </span><br><span class="line">-webkit-<span class="attribute">border-radius</span>: <span class="number">10px</span>; </span><br><span class="line">-o-<span class="attribute">border-radius</span>: <span class="number">10px</span>; </span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br></pre></td></tr></table></figure>





<h2 id="二十一-移动WEB开发之流式布局"><a href="#二十一-移动WEB开发之流式布局" class="headerlink" title="二十一.移动WEB开发之流式布局"></a>二十一.移动WEB开发之流式布局</h2><h3 id="1-视口"><a href="#1-视口" class="headerlink" title="1.视口"></a>1.视口</h3><p>视口（viewport）就是浏览器显示页面内容的屏幕区域。 视口可以分为布局视口、视觉视口和理想视口</p>
<h4 id="1-1-布局视口-layout-viewport"><a href="#1-1-布局视口-layout-viewport" class="headerlink" title="1.1 布局视口 layout viewport"></a>1.1 布局视口 layout viewport</h4><ul>
<li>一般移动设备的浏览器都默认设置了一个布局视口，用于解决早期的PC端页面在手机上显示的问题。</li>
<li>iOS, Android基本都将这个视口分辨率设置为 980px，所以PC上的网页大多都能在手机上呈现，只不过元<br>素看上去很小，一般默认可以通过手动缩放网页</li>
</ul>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/http://www.qiyunzhou.top/images/docker/images/mobile1.png"></p>
<h4 id="1-2-视觉视口-visual-viewpor"><a href="#1-2-视觉视口-visual-viewpor" class="headerlink" title="1.2 视觉视口 visual viewpor"></a>1.2 视觉视口 visual viewpor</h4><ul>
<li>字面意思，它是用户正在看到的网站的区域。注意：是网站的区域。</li>
<li>我们可以通过缩放去操作视觉视口，但不会影响布局视口，布局视口仍保持原来的宽度</li>
</ul>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/http://www.qiyunzhou.top/images/docker/images/mobile2.png"></p>
<h4 id="1-3-理想视口-ideal-viewpor"><a href="#1-3-理想视口-ideal-viewpor" class="headerlink" title="1.3  理想视口 ideal viewpor"></a>1.3  理想视口 ideal viewpor</h4><ul>
<li>为了使网站在移动端有最理想的浏览和阅读宽度而设定</li>
<li>理想视口，对设备来讲，是最理想的视口尺寸</li>
<li>需要手动添写meta视口标签通知浏览器操作</li>
<li>meta视口标签的主要目的：布局视口的宽度应该与理想视口的宽度一致，简单理解就是设备有多宽，我们布<br>局的视口就多宽</li>
</ul>
<h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><ul>
<li>视口就是浏览器显示页面内容的屏幕区域</li>
<li>视口分为布局视口、视觉视口和理想视口</li>
<li>我们移动端布局想要的是理想视口就是手机屏幕有多宽，我们的布局视口就有多宽</li>
<li>想要理想视口，我们需要给我们的移动端页面添加 meta视口标签</li>
</ul>
<h4 id="1-4-meta视口标签"><a href="#1-4-meta视口标签" class="headerlink" title="1.4 meta视口标签"></a>1.4 meta视口标签</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 视口宽度和设备保持一致</span></span><br><span class="line"><span class="comment">视口的默认缩放比例1.0</span></span><br><span class="line"><span class="comment">不允许用户自行缩放</span></span><br><span class="line"><span class="comment">最大允许的缩放比例1.0</span></span><br><span class="line"><span class="comment">最小允许的缩放比例1.0 */</span></span><br><span class="line">&lt;meta name=&quot;viewport&quot; <span class="attribute">content</span>=&quot;<span class="attribute">width</span>=device-<span class="attribute">width</span>, user-scalable=no, <span class="attribute">initial</span>-scale=<span class="number">1.0</span>, maximum-scale=<span class="number">1.0</span>, minimum-scale=<span class="number">1.0</span>&quot;&gt;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/http://www.qiyunzhou.top/images/docker/images/mobile3.png"></p>
<h3 id="2-二倍图"><a href="#2-二倍图" class="headerlink" title="2.二倍图"></a>2.二倍图</h3><h4 id="1-物理像素-amp-物理像素比"><a href="#1-物理像素-amp-物理像素比" class="headerlink" title="1.物理像素&amp;物理像素比"></a>1.物理像素&amp;物理像素比</h4><ul>
<li>物理像素点指的是屏幕显示的最小颗粒，是物理真实存在的。这是厂商在出厂时就设置好了,比如苹果6\7\8 是 750* 1334</li>
<li>我们开发时候的1px 不是一定等于1个物理像素的</li>
<li>PC端页面，1个px 等于1个物理像素的，但是移动端就不尽相同</li>
<li>一个px的能显示的物理像素点的个数，称为物理像素比或屏幕像素比</li>
</ul>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/http://www.qiyunzhou.top/images/docker/images/mobile4.png"></p>
<ul>
<li>PC端 和 早前的手机屏幕 / 普通手机屏幕: 1CSS像素 = 1 物理像素的</li>
<li>Retina（视网膜屏幕）是一种显示技术，可以将把更多的物理像素点压缩至一块屏幕里，从<br>而达到更高的分辨率，并提高屏幕显示的细腻程度。</li>
</ul>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/http://www.qiyunzhou.top/images/docker/images/mobile5.png"></p>
<h3 id="2-背景缩放-background-size"><a href="#2-背景缩放-background-size" class="headerlink" title="2.背景缩放 background-size"></a>2.背景缩放 background-size</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-size</span>: 背景图片宽度 背景图片高度</span><br></pre></td></tr></table></figure>

<ul>
<li>单位： 长度|百分比|cover|contain;</li>
<li>cover把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。</li>
<li>contain把图像图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域</li>
</ul>
<p>3.移动端浏览器</p>
<p>移动端浏览器基本以 webkit 内核为主，因此我们就考虑webkit兼容性问题。 我们可以放心使用 H5 标签和 CSS3 样式。</p>
<p> 同时我们浏览器的私有前缀我们只需要考虑添加 webkit 即可</p>
<h3 id="4-CSS初始化-normalize-css"><a href="#4-CSS初始化-normalize-css" class="headerlink" title="4.CSS初始化 normalize.css"></a>4.CSS初始化 normalize.css</h3><p><a href="http://necolas.github.io/normalize.css/">http://necolas.github.io/normalize.css/</a></p>
<h3 id="5-特殊样式"><a href="#5-特殊样式" class="headerlink" title="5.特殊样式"></a>5.特殊样式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*CSS3盒子模型*/</span></span><br><span class="line"><span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">-webkit-<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line"><span class="comment">/*点击高亮我们需要清除清除 设置为transparent 完成透明*/</span></span><br><span class="line">-webkit-tap-highlight-<span class="attribute">color</span>: transparent;</span><br><span class="line"><span class="comment">/*在移动端浏览器默认的外观在iOS上加上这个属性才能给按钮和输入框自定义样式*/</span></span><br><span class="line">-webkit-appearance: none;</span><br><span class="line"><span class="comment">/*禁用长按页面时的弹出菜单*/</span></span><br><span class="line"><span class="selector-tag">img</span>,<span class="selector-tag">a</span> &#123; -webkit-touch-callout: none; &#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-流式布局"><a href="#6-流式布局" class="headerlink" title="6.流式布局"></a>6.流式布局</h3><ul>
<li>流式布局，就是百分比布局，也称非固定像素布局。</li>
<li>通过盒子的宽度设置成百分比来根据屏幕的宽度来进行伸缩，不受固定像素的限制，内容向两侧填充。</li>
<li>流式布局方式是移动web开发使用的比较常见的布局方式。</li>
</ul>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/http://www.qiyunzhou.top/images/docker/images/mobile6.png"></p>
<h2 id="二十二-flex布局"><a href="#二十二-flex布局" class="headerlink" title="二十二.flex布局"></a>二十二.flex布局</h2><h3 id="1-布局原理"><a href="#1-布局原理" class="headerlink" title="1.布局原理"></a>1.布局原理</h3><p>flex 是 flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性，任何一个容器都可以 指定为 flex 布局</p>
<ul>
<li>当我们为父盒子设为 flex 布局以后，子元素的 float、clear 和 vertical-align 属性将失效。</li>
<li>伸缩布局 = 弹性布局 = 伸缩盒布局 = 弹性盒布局 =flex布局</li>
</ul>
<p>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成 员，称为 Flex 项目（flex item），简称”项目”。</p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/http://www.qiyunzhou.top/images/docker/images/flex1.png"></p>
<p>总结：就是通过给父盒子添加flex属性，来控制子盒 子的位置和排列方式</p>
<p>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做<code>main start</code>，结束位置叫做<code>main end</code>；交叉轴的开始位置叫做<code>cross start</code>，结束位置叫做<code>cross end</code>。</p>
<p>项目默认沿主轴排列。单个项目占据的主轴空间叫做<code>main size</code>，占据的交叉轴空间叫做<code>cross size</code>。</p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/http://www.qiyunzhou.top/images/docker/images/flex2.png"></p>
<h3 id="2-flex布局父项常见属性（★★★）"><a href="#2-flex布局父项常见属性（★★★）" class="headerlink" title="2.flex布局父项常见属性（★★★）"></a>2.flex布局父项常见属性（★★★）</h3><ul>
<li>flex-direction：设置主轴的方向</li>
<li>justify-content：设置主轴上的子元素排列方式</li>
<li>flex-wrap：设置子元素是否换行</li>
<li>align-content：设置侧轴上的子元素的排列方式（多行）</li>
<li>align-items：设置侧轴上的子元素排列方式（单行）</li>
<li>flex-flow：复合属性，相当于同时设置了 flex-direction 和 flex-wrap</li>
</ul>
<h4 id="2-1-flex-direction-设置主轴的方向"><a href="#2-1-flex-direction-设置主轴的方向" class="headerlink" title="2.1 flex-direction 设置主轴的方向"></a>2.1 flex-direction 设置主轴的方向</h4><h5 id="主轴与侧轴"><a href="#主轴与侧轴" class="headerlink" title="主轴与侧轴"></a>主轴与侧轴</h5><p>在 flex 布局中，是分为主轴和侧轴两个方向，同样的叫法有 ： 行和列、x 轴和y 轴</p>
<ul>
<li>默认主轴方向就是 x 轴方向，水平向右</li>
<li>默认侧轴方向就是 y 轴方向，水平向下</li>
</ul>
<h4 id="2-2-flex-direction-设置主轴的方向"><a href="#2-2-flex-direction-设置主轴的方向" class="headerlink" title="2.2 flex-direction 设置主轴的方向"></a>2.2 flex-direction 设置主轴的方向</h4><p>flex-direction 属性决定主轴的方向（即项目的排列方向） </p>
<p>注意： 主轴和侧轴是会变化的，就看 flex-direction 设置谁为主轴，剩下的就是侧轴。而我们的子元素是跟着主轴来排列的</p>
<table>
<thead>
<tr>
<th align="center">属性值</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">row</td>
<td align="center">默认值从左</td>
</tr>
<tr>
<td align="center">row-reverse</td>
<td align="center">从右到左</td>
</tr>
<tr>
<td align="center">column</td>
<td align="center">从上到下</td>
</tr>
<tr>
<td align="center">column-reverse</td>
<td align="center">从下到上</td>
</tr>
</tbody></table>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/http://www.qiyunzhou.top/images/docker/images/flex3.png"></p>
<h4 id="2-3-justify-content-设置主轴上的子元素排列方式"><a href="#2-3-justify-content-设置主轴上的子元素排列方式" class="headerlink" title="2.3 justify-content 设置主轴上的子元素排列方式"></a>2.3 justify-content 设置主轴上的子元素排列方式</h4><p>justify-content 属性定义了项目在主轴上的对齐方式 </p>
<p><font color='red'>注意： 使用这个属性之前一定要确定好主轴是哪个</font></p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>flex-start</td>
<td>从头部开始 如果主轴是x轴，则从左到右（默认值）</td>
</tr>
<tr>
<td>flex-end</td>
<td>从尾部开始排列</td>
</tr>
<tr>
<td>center</td>
<td>在主轴居中对齐（如果主轴是x轴则 水平居中)</td>
</tr>
<tr>
<td>space-around</td>
<td>平分剩余空间（只有 flex 元素之间的空间是相等的）</td>
</tr>
<tr>
<td>space-between</td>
<td>先两边贴边 再平分剩余空间</td>
</tr>
<tr>
<td>space-evenly</td>
<td>平分剩余空间</td>
</tr>
</tbody></table>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/http://www.qiyunzhou.top/images/docker/images/flex4.png"></p>
<h5 id="space-around-和-space-evenly-的区别"><a href="#space-around-和-space-evenly-的区别" class="headerlink" title="space-around 和 space-evenly 的区别"></a>space-around 和 space-evenly 的区别</h5><p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/http://www.qiyunzhou.top/images/docker/images/flex13.png"></p>
<h4 id="2-4-flex-wrap-设置子元素是否换行"><a href="#2-4-flex-wrap-设置子元素是否换行" class="headerlink" title="2.4  flex-wrap 设置子元素是否换行"></a>2.4  flex-wrap 设置子元素是否换行</h4><p>默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，flex布局中默认是不换行的</p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>nowrap</td>
<td>默认值，不换行</td>
</tr>
<tr>
<td>wrap</td>
<td>换行</td>
</tr>
<tr>
<td>wrap-reverse</td>
<td>换行，第一行在下方。</td>
</tr>
</tbody></table>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/http://www.qiyunzhou.top/images/docker/images/flex5.png"></p>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/http://www.qiyunzhou.top/images/docker/images/flex6.png"></p>
<h4 id="2-5-align-items-设置侧轴上的子元素排列方式（单行-）"><a href="#2-5-align-items-设置侧轴上的子元素排列方式（单行-）" class="headerlink" title="2.5 align-items 设置侧轴上的子元素排列方式（单行 ）"></a>2.5 align-items 设置侧轴上的子元素排列方式（单行 ）</h4><p>设置子项在侧轴上的排列方式 并且只能用于子项出现 换行 的情况（多行），在单行下是没有效果的</p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>flex-start</td>
<td>从上到下</td>
</tr>
<tr>
<td>flex-end</td>
<td>从下到上</td>
</tr>
<tr>
<td>center</td>
<td>挤在一起居中（垂直居中)</td>
</tr>
<tr>
<td>stretch</td>
<td>拉伸 （默认值 ）</td>
</tr>
<tr>
<td>baseline</td>
<td>项目的第一行文字的基线对齐</td>
</tr>
</tbody></table>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/http://www.qiyunzhou.top/images/docker/images/flex7.png"></p>
<h4 id="2-6-align-content-设置侧轴上的子元素的排列方式（多行）"><a href="#2-6-align-content-设置侧轴上的子元素的排列方式（多行）" class="headerlink" title="2.6 align-content 设置侧轴上的子元素的排列方式（多行）"></a>2.6 align-content 设置侧轴上的子元素的排列方式（多行）</h4><p>设置子项在侧轴上的排列方式 并且只能用于子项出现 换行 的情况（多行），在单行下是没有效果的</p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>flex-start</td>
<td>默认值在侧轴的头部开始排列</td>
</tr>
<tr>
<td>flex-end</td>
<td>在侧轴的尾部开始排列</td>
</tr>
<tr>
<td>center</td>
<td>在侧轴中间显示</td>
</tr>
<tr>
<td>space-around</td>
<td>子项在侧轴平分剩余空间</td>
</tr>
<tr>
<td>space-between</td>
<td>子项在侧轴先分布在两头，再平分剩余空间</td>
</tr>
<tr>
<td>stretch</td>
<td>设置子项元素高度平分父元素高度（默认值）</td>
</tr>
</tbody></table>
<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/http://www.qiyunzhou.top/images/docker/images/flex8.png"></p>
<h4 id="2-7-align-content-和-align-items-区别"><a href="#2-7-align-content-和-align-items-区别" class="headerlink" title="2.7 align-content 和 align-items 区别"></a>2.7 align-content 和 align-items 区别</h4><ul>
<li>align-items 适用于单行情况下， 只有上对齐、下对齐、居中和 拉伸</li>
<li>align-content 适应于换行（多行）的情况下（单行情况下无效）， 可以设置 上对齐、 下对齐、居中、拉伸以及平均分<br>配剩余空间等属性值。</li>
<li>总结就是单行找 align-items 多行找 align-content</li>
</ul>
<h4 id="2-8-flex-flow"><a href="#2-8-flex-flow" class="headerlink" title="2.8 flex-flow"></a>2.8 flex-flow</h4><p>flex-flow 属性是 flex-direction 和 flex-wrap 属性的复合属性</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">flex-flow</span>:row wrap;</span><br></pre></td></tr></table></figure>

<h4 id="2-9-总结"><a href="#2-9-总结" class="headerlink" title="2.9 总结"></a>2.9 总结</h4><ul>
<li>flex-direction：设置主轴的方向</li>
<li>justify-content：设置主轴上的子元素排列方式</li>
<li>flex-wrap：设置子元素是否换行 - align-content：设置侧轴上的子元素的排列方式（多行）</li>
<li>align-items：设置侧轴上的子元素排列方式（单行）</li>
<li>flex-flow：复合属性，相当于同时设置了 flex-direction 和 flex-w</li>
</ul>
<h3 id="3-flex布局子项常见属性（★★★）"><a href="#3-flex布局子项常见属性（★★★）" class="headerlink" title="3.flex布局子项常见属性（★★★）"></a>3.flex布局子项常见属性（★★★）</h3><ul>
<li>flex 子项目占的份数</li>
<li>align-self 控制子项自己在侧轴的排列方式</li>
<li>order属性定义子项的排列顺序（前后顺序）</li>
<li>flex-grow</li>
<li>flex-shrink</li>
<li>flex-basis</li>
</ul>
<h4 id="3-1-flex-属性"><a href="#3-1-flex-属性" class="headerlink" title="3.1  flex 属性"></a>3.1  flex 属性</h4><p><code>flex</code>属性是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。后两个属性可选。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line"> <span class="attribute">flex</span>: &lt;number&gt;; <span class="comment">/* default 0 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该属性有两个快捷值：<code>auto</code> (<code>1 1 auto</code>) 和 none (<code>0 0 auto</code>)。</p>
<p>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p>
<h4 id="3-2-align-self-控制子项自己在侧轴上的排列方式"><a href="#3-2-align-self-控制子项自己在侧轴上的排列方式" class="headerlink" title="3.2 align-self 控制子项自己在侧轴上的排列方式"></a>3.2 align-self 控制子项自己在侧轴上的排列方式</h4><p>align-self 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖 align-items 属性。 </p>
<p>默认值为 auto，表示继承父元素的 align-items 属性，如果没有父元素，则等同于 stretch</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">span</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line"> <span class="comment">/* 设置自己在侧轴上的排列方式 */</span></span><br><span class="line"> <span class="attribute">align-self</span>: flex-end;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/http://www.qiyunzhou.top/images/docker/images/flex9.png"></p>
<h4 id="3-3-order-属性定义项目的排列顺序"><a href="#3-3-order-属性定义项目的排列顺序" class="headerlink" title="3.3 order 属性定义项目的排列顺序"></a>3.3 order 属性定义项目的排列顺序</h4><p>数值越小，排列越靠前，默认为0。 注意：和 z-index 不一样</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line"> <span class="attribute">order</span>: &lt;number&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/http://www.qiyunzhou.top/images/docker/images/flex10.png"></p>
<h4 id="3-4-flex-grow"><a href="#3-4-flex-grow" class="headerlink" title="3.4 flex-grow"></a>3.4 flex-grow</h4><p><code>flex-grow</code>属性定义项目的放大比例，默认为<code>0</code>，即如果存在剩余空间，也不放大。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: &lt;number&gt;; <span class="comment">/* default 0 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/http://www.qiyunzhou.top/images/docker/images/flex11.png"></p>
<p>如果所有项目的<code>flex-grow</code>属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的<code>flex-grow</code>属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p>
<h4 id="3-5-flex-shrink"><a href="#3-5-flex-shrink" class="headerlink" title="3.5 flex-shrink"></a>3.5 flex-shrink</h4><p><code>flex-shrink</code>属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: &lt;number&gt;; <span class="comment">/* default 1 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/codeyunzhou/images/raw/master/css/http://www.qiyunzhou.top/images/docker/images/flex12.png"></p>
<p>如果所有项目的<code>flex-shrink</code>属性都为1，当空间不足时，都将等比例缩小。如果一个项目的<code>flex-shrink</code>属性为0，其他项目都为1，则空间不足时，前者不缩小。负值对该属性无效。</p>
<h4 id="3-6-flex-basis"><a href="#3-6-flex-basis" class="headerlink" title="3.6 flex-basis"></a>3.6 flex-basis</h4><p><code>flex-basis</code>属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code>auto</code>，即项目的本来大小。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-basis</span>: &lt;length&gt; | auto; <span class="comment">/* default auto */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>它可以设为跟<code>width</code>或<code>height</code>属性一样的值（比如350px），则项目将占据固定空间。</p>
<h2 id="二十三-rem适配布局"><a href="#二十三-rem适配布局" class="headerlink" title="二十三 rem适配布局"></a>二十三 rem适配布局</h2><h3 id="1-rem-基础"><a href="#1-rem-基础" class="headerlink" title="1.rem 基础"></a>1.rem 基础</h3><p>rem 单位 1. rem 基础 rem (root em)是一个相对单位，类似于em，em是父元素字体大小。 </p>
<p>不同的是rem的基准是相对于html元素的字体大小。 </p>
<p>比如，根元素（html）设置font-size=12px; 非根元素设置width:2rem; 则换成px表示就是24px。 </p>
<p>rem的优势：父元素文字大小可能不一致， 但是整个页面只有一个html，可以很好来控制整个页面的元素大小</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 根html 为 12px */</span></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line"> <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 此时 div 的字体大小就是 24px */</span> </span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"> <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-媒体查询"><a href="#2-媒体查询" class="headerlink" title="2.媒体查询"></a>2.媒体查询</h3><h4 id="2-1-媒体查询（Media-Query）是CSS3新语法。"><a href="#2-1-媒体查询（Media-Query）是CSS3新语法。" class="headerlink" title="2.1 媒体查询（Media Query）是CSS3新语法。"></a>2.1 媒体查询（Media Query）是CSS3新语法。</h4><ul>
<li>使用 @media 查询，可以针对不同的媒体类型定义不同的样式</li>
<li>@media 可以针对不同的屏幕尺寸设置不同的样式</li>
<li>当你重置浏览器大小的过程中，页面也会根据浏览器的宽度和高度重新渲染页面</li>
<li>目前针对很多苹果手机、Android手机，平板等设备都用得到多媒体查询</li>
</ul>
<h4 id="2-2-语法规范"><a href="#2-2-语法规范" class="headerlink" title="2.2 语法规范"></a>2.2 语法规范</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> mediatype <span class="keyword">and</span>|<span class="keyword">not</span>|<span class="keyword">only</span> (media feature) &#123;</span><br><span class="line"> CSS-<span class="selector-tag">Code</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>用 @media 开头 注意@符号</li>
<li>mediatype 媒体类型</li>
<li>关键字 and not only</li>
<li>media feature 媒体特性 必须有小括号包含</li>
</ul>
<h5 id="2-2-1-mediatype-查询类型"><a href="#2-2-1-mediatype-查询类型" class="headerlink" title="2.2.1 mediatype 查询类型"></a>2.2.1 mediatype 查询类型</h5><p>将不同的终端设备划分成不同的类型，称为媒体类型</p>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>all</td>
<td>用于所有设备</td>
</tr>
<tr>
<td>print</td>
<td>用于打印机和打印预览</td>
</tr>
<tr>
<td>scree</td>
<td>用于电脑屏幕，平板电脑，智能手机等</td>
</tr>
</tbody></table>
<h5 id="2-2-2-关键字"><a href="#2-2-2-关键字" class="headerlink" title="2.2.2  关键字"></a>2.2.2  关键字</h5><p>关键字将媒体类型或多个媒体特性连接到一起做为媒体查询的条件</p>
<ul>
<li>and：可以将多个媒体特性连接到一起，相当于“且”的意思。</li>
<li>not：排除某个媒体类型，相当于“非”的意思，可以省略。</li>
<li>only：指定某个特定的媒体类型，可以省略。 </li>
</ul>
<h5 id="2-2-3-媒体特性"><a href="#2-2-3-媒体特性" class="headerlink" title="2.2.3  媒体特性"></a>2.2.3  媒体特性</h5><p>每种媒体类型都具体各自不同的特性，根据不同媒体类型的媒体特性设置不同的展示风格</p>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>width</td>
<td>定义输出设备中页面可见区域的宽度</td>
</tr>
<tr>
<td>min-width</td>
<td>定义输出设备中页面最小可见区域宽度</td>
</tr>
<tr>
<td>max-width</td>
<td>定义输出设备中页面最大可见区域宽度</td>
</tr>
</tbody></table>
<h2 id="二十四-Less-基础"><a href="#二十四-Less-基础" class="headerlink" title="二十四 Less 基础"></a>二十四 Less 基础</h2><h3 id="1-Less-介绍"><a href="#1-Less-介绍" class="headerlink" title="1. Less 介绍"></a>1. Less 介绍</h3><p>Less （Leaner Style Sheets 的缩写） 是一门 CSS 扩展语言，也成为CSS预处理器。 </p>
<p>做为 CSS 的一种形式的扩展，它并没有减少 CSS 的功能，而是在现有的 CSS 语法上，为CSS加入程序式语言的 特性。 </p>
<p>它在 CSS 的语法基础之上，引入了变量，Mixin（混入），运算以及函数等功能，大大简化了 CSS 的编写，并且 降低了 CSS 的维护成本，就像它的名称所说的那样，Less 可以让我们用更少的代码做更多的事情。</p>
<p>Less中文网址： <a href="http://lesscss.cn/">http://lesscss.cn</a></p>
<h4 id="2-Less-安装"><a href="#2-Less-安装" class="headerlink" title="2. Less 安装"></a>2. Less 安装</h4><p>① 安装nodejs，可选择版本(8.0)，网址：<a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a><br>② 检查是否安装成功，使用cmd命令（win10 是 window +r 打开 运行输入cmd） — 输入“ node –v ”查看版本即可<br>③ 基于nodejs在线安装Less，使用cmd命令“ npm install -g less ”即可<br>④ 检查是否安装成功，使用cmd命令“ lessc -v ”查看版本即可</p>
<h4 id="3-Less-变量"><a href="#3-Less-变量" class="headerlink" title="3. Less 变量"></a>3. Less 变量</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">@变量名:值;</span><br><span class="line"><span class="keyword">@color</span>: pink</span><br><span class="line"></span><br><span class="line">//直接使用</span><br><span class="line">body&#123;</span><br><span class="line"> <span class="attribute">color</span>:@color;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line"> <span class="attribute">color</span>:@color;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>

<ul>
<li>必须有@为前缀</li>
<li>不能包含特殊字符</li>
<li>不能以数字开头</li>
<li>大小写敏感</li>
</ul>
<h4 id="4-Less-嵌套"><a href="#4-Less-嵌套" class="headerlink" title="4. Less 嵌套"></a>4. Less 嵌套</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#header</span> <span class="selector-class">.logo</span> &#123;</span><br><span class="line"> <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line">Less 嵌套写法</span><br><span class="line"><span class="selector-id">#header</span> &#123;</span><br><span class="line"> <span class="selector-class">.logo</span> &#123;</span><br><span class="line"> <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果遇见 （交集|伪类|伪元素选择器） </p>
<ul>
<li>内层选择器的前面没有 &amp; 符号，则它被解析为父选择器的后代； </li>
<li>如果有 &amp; 符号，它就被解析为父元素自身或父元素的伪类。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line"> <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line">Less 嵌套写法</span><br><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line"> &amp;<span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line"> <span class="attribute">color</span>:red;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-Less-运算"><a href="#5-Less-运算" class="headerlink" title="5.Less 运算"></a>5.Less 运算</h4><p>任何数字、颜色或者变量都可以参与运算。就是Less提供了加（+）、减（-）、乘（*）、除（/）算术运算</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*Less 里面写*/</span></span><br><span class="line"><span class="keyword">@witdh</span>: <span class="number">10px</span> + <span class="number">5</span>;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"> <span class="attribute">border</span>: @witdh solid red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*生成的css*/</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"> <span class="attribute">border</span>: <span class="number">15px</span> solid red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Less 甚至还可以这样 */</span></span><br><span class="line"><span class="attribute">width</span>: (@width + <span class="number">5</span>) * <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p><font color='red'><strong>注意：</strong></font></p>
<ul>
<li>乘号（*）和除号（/）的写法</li>
<li>运算符中间左右有个空格隔开 1px + 5</li>
<li>对于两个不同的单位的值之间的运算，运算结果的值取第一个值的单位</li>
<li>如果两个值之间只有一个值有单位，则运算结果就取该单位</li>
</ul>
<h2 id="常用命名推荐"><a href="#常用命名推荐" class="headerlink" title="常用命名推荐"></a>常用命名推荐</h2><table>
<thead>
<tr>
<th>ClassName</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>about</td>
<td>关于</td>
</tr>
<tr>
<td>account</td>
<td>账户</td>
</tr>
<tr>
<td>arrow</td>
<td>箭头图标</td>
</tr>
<tr>
<td>article</td>
<td>文章</td>
</tr>
<tr>
<td>aside</td>
<td>边栏</td>
</tr>
<tr>
<td>audio</td>
<td>音频</td>
</tr>
<tr>
<td>avatar</td>
<td>头像</td>
</tr>
<tr>
<td>bg,background</td>
<td>背景</td>
</tr>
<tr>
<td>bar</td>
<td>栏（工具类）</td>
</tr>
<tr>
<td>branding</td>
<td>品牌化</td>
</tr>
<tr>
<td>crumb,breadcrumbs</td>
<td>面包屑</td>
</tr>
<tr>
<td>btn,button</td>
<td>按钮</td>
</tr>
<tr>
<td>caption</td>
<td>标题，说明</td>
</tr>
<tr>
<td>category</td>
<td>分类</td>
</tr>
<tr>
<td>chart</td>
<td>图表</td>
</tr>
<tr>
<td>clearfix</td>
<td>清除浮动</td>
</tr>
<tr>
<td>close</td>
<td>关闭</td>
</tr>
<tr>
<td>col,column</td>
<td>列</td>
</tr>
<tr>
<td>comment</td>
<td>评论</td>
</tr>
<tr>
<td>community</td>
<td>社区</td>
</tr>
<tr>
<td>container</td>
<td>容器</td>
</tr>
<tr>
<td>content</td>
<td>内容</td>
</tr>
<tr>
<td>copyright</td>
<td>版权</td>
</tr>
<tr>
<td>current</td>
<td>当前态，选中态</td>
</tr>
<tr>
<td>default</td>
<td>默认</td>
</tr>
<tr>
<td>description</td>
<td>描述</td>
</tr>
<tr>
<td>details</td>
<td>细节</td>
</tr>
<tr>
<td>disabled</td>
<td>不可用</td>
</tr>
<tr>
<td>entry</td>
<td>文章，博文</td>
</tr>
<tr>
<td>error</td>
<td>错误</td>
</tr>
<tr>
<td>even</td>
<td>偶数，常用于多行列表或表格中</td>
</tr>
<tr>
<td>fail</td>
<td>失败（提示）</td>
</tr>
<tr>
<td>feature</td>
<td>专题</td>
</tr>
<tr>
<td>fewer</td>
<td>收起</td>
</tr>
<tr>
<td>field</td>
<td>用于表单的输入区域</td>
</tr>
<tr>
<td>figure</td>
<td>图</td>
</tr>
<tr>
<td>filter</td>
<td>筛选</td>
</tr>
<tr>
<td>first</td>
<td>第一个，常用于列表中</td>
</tr>
<tr>
<td>footer</td>
<td>页脚</td>
</tr>
<tr>
<td>forum</td>
<td>论坛</td>
</tr>
<tr>
<td>gallery</td>
<td>画廊</td>
</tr>
<tr>
<td>group</td>
<td>模块，清除浮动</td>
</tr>
<tr>
<td>header</td>
<td>页头</td>
</tr>
<tr>
<td>help</td>
<td>帮助</td>
</tr>
<tr>
<td>hide</td>
<td>隐藏</td>
</tr>
<tr>
<td>hightlight</td>
<td>高亮</td>
</tr>
<tr>
<td>home</td>
<td>主页</td>
</tr>
<tr>
<td>icon</td>
<td>图标</td>
</tr>
<tr>
<td>info,information</td>
<td>信息</td>
</tr>
<tr>
<td>last</td>
<td>最后一个，常用于列表中</td>
</tr>
<tr>
<td>links</td>
<td>链接</td>
</tr>
<tr>
<td>login</td>
<td>登录</td>
</tr>
<tr>
<td>logout</td>
<td>退出</td>
</tr>
<tr>
<td>logo</td>
<td>标志</td>
</tr>
<tr>
<td>main</td>
<td>主体</td>
</tr>
<tr>
<td>menu</td>
<td>菜单</td>
</tr>
<tr>
<td>meta</td>
<td>作者、更新时间等信息栏，一般位于标题之下</td>
</tr>
<tr>
<td>module</td>
<td>模块</td>
</tr>
<tr>
<td>more</td>
<td>更多（展开）</td>
</tr>
<tr>
<td>msg,message</td>
<td>消息</td>
</tr>
<tr>
<td>nav,navigation</td>
<td>导航</td>
</tr>
<tr>
<td>next</td>
<td>下一页</td>
</tr>
<tr>
<td>nub</td>
<td>小块</td>
</tr>
<tr>
<td>odd</td>
<td>奇数，常用于多行列表或表格中</td>
</tr>
<tr>
<td>off</td>
<td>鼠标离开</td>
</tr>
<tr>
<td>on</td>
<td>鼠标移过</td>
</tr>
<tr>
<td>output</td>
<td>输出</td>
</tr>
<tr>
<td>pagination</td>
<td>分页</td>
</tr>
<tr>
<td>pop,popup</td>
<td>弹窗</td>
</tr>
<tr>
<td>preview</td>
<td>预览</td>
</tr>
<tr>
<td>previous</td>
<td>上一页</td>
</tr>
<tr>
<td>primary</td>
<td>主要</td>
</tr>
<tr>
<td>progress</td>
<td>进度条</td>
</tr>
<tr>
<td>promotion</td>
<td>促销</td>
</tr>
<tr>
<td>rcommd,recommendations</td>
<td>推荐</td>
</tr>
<tr>
<td>reg,register</td>
<td>注册</td>
</tr>
<tr>
<td>save</td>
<td>保存</td>
</tr>
<tr>
<td>search</td>
<td>搜索</td>
</tr>
<tr>
<td>secondary</td>
<td>次要</td>
</tr>
<tr>
<td>section</td>
<td>区块</td>
</tr>
<tr>
<td>selected</td>
<td>已选</td>
</tr>
<tr>
<td>share</td>
<td>分享</td>
</tr>
<tr>
<td>show</td>
<td>显示</td>
</tr>
<tr>
<td>sidebar</td>
<td>边栏，侧栏</td>
</tr>
<tr>
<td>slide</td>
<td>幻灯片，图片切换</td>
</tr>
<tr>
<td>sort</td>
<td>排序</td>
</tr>
<tr>
<td>sub</td>
<td>次级的，子级的</td>
</tr>
<tr>
<td>submit</td>
<td>提交</td>
</tr>
<tr>
<td>subscribe</td>
<td>订阅</td>
</tr>
<tr>
<td>subtitle</td>
<td>副标题</td>
</tr>
<tr>
<td>success</td>
<td>成功（提示）</td>
</tr>
<tr>
<td>summary</td>
<td>摘要</td>
</tr>
<tr>
<td>tab</td>
<td>标签页</td>
</tr>
<tr>
<td>table</td>
<td>表格</td>
</tr>
<tr>
<td>txt,text</td>
<td>文本</td>
</tr>
<tr>
<td>thumbnail</td>
<td>缩略图</td>
</tr>
<tr>
<td>time</td>
<td>时间</td>
</tr>
<tr>
<td>tips</td>
<td>提示</td>
</tr>
<tr>
<td>title</td>
<td>标题</td>
</tr>
<tr>
<td>video</td>
<td>视频</td>
</tr>
<tr>
<td>wrap</td>
<td>容器，包，一般用于最外层</td>
</tr>
<tr>
<td>wrapper</td>
<td>容器，包，一般用于最外层</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>css</tag>
      </tags>
  </entry>
</search>
